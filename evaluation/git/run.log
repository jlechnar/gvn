
[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| used git version[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32mnone[0m @ [38;5;67;1m../[0m [38;5;55;1m[0m $ [1;31mgit --version[0m
git version 2.43.0

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| create environment[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32mnone[0m @ [38;5;67;1m../[0m [38;5;55;1m[0m $ [1;31mrm -rf test[0m
[1;36mRUN:[0m [1;32mnone[0m @ [38;5;67;1m../[0m [38;5;55;1m[0m $ [1;31mmkdir test[0m
[1;36mRUN:[0m [1;32mnone[0m @ [38;5;67;1m../[0m [38;5;55;1m[0m $ [1;31mcd test[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| create shared local remote repository[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32mnone[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mmkdir local_shared_repo[0m
[1;36mRUN:[0m [1;32mnone[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mcd local_shared_repo[0m
[1;36mRUN:[0m [1;32mnone[0m @ [38;5;67;1m../test/local_shared_repo[0m [38;5;55;1m[0m $ [1;31mgit init --bare --shared=true .[0m
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty shared Git repository in ../test/local_shared_repo/
[1;36mCMT:[0m [1;35mselect rights properly (multiple options available) using --shared so that other users can push to repository[0m
[1;36mRUN:[0m [1;32mnone[0m @ [38;5;67;1m../test/local_shared_repo[0m [38;5;55;1m[0m $ [1;31mtree -a[0m
.
â”œâ”€â”€ branches
â”œâ”€â”€ config
â”œâ”€â”€ description
â”œâ”€â”€ HEAD
â”œâ”€â”€ hooks
â”‚Â Â  â”œâ”€â”€ applypatch-msg.sample
â”‚Â Â  â”œâ”€â”€ commit-msg.sample
â”‚Â Â  â”œâ”€â”€ fsmonitor-watchman.sample
â”‚Â Â  â”œâ”€â”€ post-update.sample
â”‚Â Â  â”œâ”€â”€ pre-applypatch.sample
â”‚Â Â  â”œâ”€â”€ pre-commit.sample
â”‚Â Â  â”œâ”€â”€ pre-merge-commit.sample
â”‚Â Â  â”œâ”€â”€ prepare-commit-msg.sample
â”‚Â Â  â”œâ”€â”€ pre-push.sample
â”‚Â Â  â”œâ”€â”€ pre-rebase.sample
â”‚Â Â  â”œâ”€â”€ pre-receive.sample
â”‚Â Â  â”œâ”€â”€ push-to-checkout.sample
â”‚Â Â  â”œâ”€â”€ sendemail-validate.sample
â”‚Â Â  â””â”€â”€ update.sample
â”œâ”€â”€ info
â”‚Â Â  â””â”€â”€ exclude
â”œâ”€â”€ objects
â”‚Â Â  â”œâ”€â”€ info
â”‚Â Â  â””â”€â”€ pack
â””â”€â”€ refs
    â”œâ”€â”€ heads
    â””â”€â”€ tags

10 directories, 18 files

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| create sandbox for user1[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/local_shared_repo[0m [38;5;55;1m[0m $ [1;31mcd ..[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mmkdir user1_sb1[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mcd user1_sb1[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[0m $ [1;31mgit clone ../test/local_shared_repo .[0m
Cloning into '.'...
warning: You appear to have cloned an empty repository.
done.
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[0m $ [1;31mtree -a[0m
.
â””â”€â”€ .git
    â”œâ”€â”€ branches
    â”œâ”€â”€ config
    â”œâ”€â”€ description
    â”œâ”€â”€ HEAD
    â”œâ”€â”€ hooks
    â”‚Â Â  â”œâ”€â”€ applypatch-msg.sample
    â”‚Â Â  â”œâ”€â”€ commit-msg.sample
    â”‚Â Â  â”œâ”€â”€ fsmonitor-watchman.sample
    â”‚Â Â  â”œâ”€â”€ post-update.sample
    â”‚Â Â  â”œâ”€â”€ pre-applypatch.sample
    â”‚Â Â  â”œâ”€â”€ pre-commit.sample
    â”‚Â Â  â”œâ”€â”€ pre-merge-commit.sample
    â”‚Â Â  â”œâ”€â”€ prepare-commit-msg.sample
    â”‚Â Â  â”œâ”€â”€ pre-push.sample
    â”‚Â Â  â”œâ”€â”€ pre-rebase.sample
    â”‚Â Â  â”œâ”€â”€ pre-receive.sample
    â”‚Â Â  â”œâ”€â”€ push-to-checkout.sample
    â”‚Â Â  â”œâ”€â”€ sendemail-validate.sample
    â”‚Â Â  â””â”€â”€ update.sample
    â”œâ”€â”€ info
    â”‚Â Â  â””â”€â”€ exclude
    â”œâ”€â”€ objects
    â”‚Â Â  â”œâ”€â”€ info
    â”‚Â Â  â””â”€â”€ pack
    â””â”€â”€ refs
        â”œâ”€â”€ heads
        â””â”€â”€ tags

11 directories, 18 files

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| adding/removing content to stage + showing the status[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mcp -R ../../data/* .[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mtree[0m
.
â”œâ”€â”€ empty_folder
â”œâ”€â”€ file_to_be_ignored_by_extension.ignore_me
â”œâ”€â”€ file_to_be_ignored.txt
â”œâ”€â”€ folder_not_to_be_tracked
â”‚Â Â  â””â”€â”€ dummy.txt
â”œâ”€â”€ links
â”‚Â Â  â”œâ”€â”€ cra.sv -> ../verilog/carry_ripple_adder.v
â”‚Â Â  â”œâ”€â”€ fa.sv -> ../verilog/full_adder.v
â”‚Â Â  â””â”€â”€ ha.sv -> ../verilog/halve_adder.v
â”œâ”€â”€ readme.txt
â”œâ”€â”€ shared.gitconfig
â””â”€â”€ verilog
    â”œâ”€â”€ carry_lookahead_adder.v
    â”œâ”€â”€ carry_ripple_adder.v
    â”œâ”€â”€ file_not_to_be_tracked.v
    â”œâ”€â”€ file_to_be_ignored_by_extension.ignore_me
    â”œâ”€â”€ full_adder_cla.v
    â”œâ”€â”€ full_adder.v
    â”œâ”€â”€ halve_adder.v
    â””â”€â”€ sub_folder_not_to_be_tracked
        â””â”€â”€ file_not_to_be_tracked2.v

6 directories, 16 files
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mempty_folder/[m
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mlinks/[m
	[36mreadme.txt[m
	[36mshared.gitconfig[m
	[36mverilog/[m

nothing added to commit but untracked files present (use "git add" to track)

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| files[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit add readme.txt[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   readme.txt[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mempty_folder/[m
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mlinks/[m
	[36mshared.gitconfig[m
	[36mverilog/[m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| folder / add links[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit add links[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   links/cra.sv[m
	[32mnew file:   links/fa.sv[m
	[32mnew file:   links/ha.sv[m
	[32mnew file:   readme.txt[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mempty_folder/[m
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mshared.gitconfig[m
	[36mverilog/[m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| using wildcards[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit add verilog/*.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   links/cra.sv[m
	[32mnew file:   links/fa.sv[m
	[32mnew file:   links/ha.sv[m
	[32mnew file:   readme.txt[m
	[32mnew file:   verilog/carry_lookahead_adder.v[m
	[32mnew file:   verilog/carry_ripple_adder.v[m
	[32mnew file:   verilog/file_not_to_be_tracked.v[m
	[32mnew file:   verilog/full_adder.v[m
	[32mnew file:   verilog/full_adder_cla.v[m
	[32mnew file:   verilog/halve_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mempty_folder/[m
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mshared.gitconfig[m
	[36mverilog/file_to_be_ignored_by_extension.ignore_me[m
	[36mverilog/sub_folder_not_to_be_tracked/[m

[1;36mCMT:[0m [1;35mempty folders are not supported, use a placeholder as workaround[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit add empty_folder[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   empty_folder/.placeholder[m
	[32mnew file:   links/cra.sv[m
	[32mnew file:   links/fa.sv[m
	[32mnew file:   links/ha.sv[m
	[32mnew file:   readme.txt[m
	[32mnew file:   verilog/carry_lookahead_adder.v[m
	[32mnew file:   verilog/carry_ripple_adder.v[m
	[32mnew file:   verilog/file_not_to_be_tracked.v[m
	[32mnew file:   verilog/full_adder.v[m
	[32mnew file:   verilog/full_adder_cla.v[m
	[32mnew file:   verilog/halve_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mshared.gitconfig[m
	[36mverilog/file_to_be_ignored_by_extension.ignore_me[m
	[36mverilog/sub_folder_not_to_be_tracked/[m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| status in a subfolder[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mcd verilog[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   ../empty_folder/.placeholder[m
	[32mnew file:   ../links/cra.sv[m
	[32mnew file:   ../links/fa.sv[m
	[32mnew file:   ../links/ha.sv[m
	[32mnew file:   ../readme.txt[m
	[32mnew file:   carry_lookahead_adder.v[m
	[32mnew file:   carry_ripple_adder.v[m
	[32mnew file:   file_not_to_be_tracked.v[m
	[32mnew file:   full_adder.v[m
	[32mnew file:   full_adder_cla.v[m
	[32mnew file:   halve_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m../file_to_be_ignored.txt[m
	[36m../file_to_be_ignored_by_extension.ignore_me[m
	[36m../folder_not_to_be_tracked/[m
	[36m../shared.gitconfig[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36msub_folder_not_to_be_tracked/[m

[1;36mCMT:[0m [1;35mstatus is shown relative to the current folder[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| remove unwanted added file from stage[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit rm --cached file_not_to_be_tracked.v[0m
rm 'verilog/file_not_to_be_tracked.v'
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   ../empty_folder/.placeholder[m
	[32mnew file:   ../links/cra.sv[m
	[32mnew file:   ../links/fa.sv[m
	[32mnew file:   ../links/ha.sv[m
	[32mnew file:   ../readme.txt[m
	[32mnew file:   carry_lookahead_adder.v[m
	[32mnew file:   carry_ripple_adder.v[m
	[32mnew file:   full_adder.v[m
	[32mnew file:   full_adder_cla.v[m
	[32mnew file:   halve_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m../file_to_be_ignored.txt[m
	[36m../file_to_be_ignored_by_extension.ignore_me[m
	[36m../folder_not_to_be_tracked/[m
	[36m../shared.gitconfig[m
	[36mfile_not_to_be_tracked.v[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36msub_folder_not_to_be_tracked/[m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| modify a staged file[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[EMPTY][0m $ [1;31mecho test > carry_ripple_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   ../empty_folder/.placeholder[m
	[32mnew file:   ../links/cra.sv[m
	[32mnew file:   ../links/fa.sv[m
	[32mnew file:   ../links/ha.sv[m
	[32mnew file:   ../readme.txt[m
	[32mnew file:   carry_lookahead_adder.v[m
	[32mnew file:   carry_ripple_adder.v[m
	[32mnew file:   full_adder.v[m
	[32mnew file:   full_adder_cla.v[m
	[32mnew file:   halve_adder.v[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   carry_ripple_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m../file_to_be_ignored.txt[m
	[36m../file_to_be_ignored_by_extension.ignore_me[m
	[36m../folder_not_to_be_tracked/[m
	[36m../shared.gitconfig[m
	[36mfile_not_to_be_tracked.v[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36msub_folder_not_to_be_tracked/[m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| revert the change[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit restore carry_ripple_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   ../empty_folder/.placeholder[m
	[32mnew file:   ../links/cra.sv[m
	[32mnew file:   ../links/fa.sv[m
	[32mnew file:   ../links/ha.sv[m
	[32mnew file:   ../readme.txt[m
	[32mnew file:   carry_lookahead_adder.v[m
	[32mnew file:   carry_ripple_adder.v[m
	[32mnew file:   full_adder.v[m
	[32mnew file:   full_adder_cla.v[m
	[32mnew file:   halve_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m../file_to_be_ignored.txt[m
	[36m../file_to_be_ignored_by_extension.ignore_me[m
	[36m../folder_not_to_be_tracked/[m
	[36m../shared.gitconfig[m
	[36mfile_not_to_be_tracked.v[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36msub_folder_not_to_be_tracked/[m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[EMPTY][0m $ [1;31mcd ..[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| config - git configuration[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mATTENTION: before committing content at least the username/e-mail must be configured properly[0m
[1;36mCMT:[0m [1;35mgit supports configuration on multiple levels: system (e.g. /etc/gitconfig) / home (~/.gitconfig) / sandbox (<sandbox_folder>/.git/config)[0m
[1;36mCMT:[0m [1;35min case of same configuration in multiple levels the following option override priority is used: sandbox > home > system[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mcat .git/config[0m
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = ../test/local_shared_repo
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| configure username/e-mail/color/etc.[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit config user.name "user1"[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit config user.email "user1@domain"[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| show configuration[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mcat .git/config[0m
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = ../test/local_shared_repo
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
[user]
	name = user1
	email = user1@domain
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit config --local --list[0m
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=../test/local_shared_repo
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
user.name=user1
user.email=user1@domain

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| manual edit configuration (add some more handy configurations)[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mCMT:[0m [1;35mmanual changing the configuration is possible[0m
[1;36mCMT:[0m [1;35mNote that configuration is not shared with others, but possible by including a git managed configuration file[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mecho -e "[include]
 path=../shared.gitconfig" >> .git/config[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mcat .git/config[0m
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = ../test/local_shared_repo
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
[user]
	name = user1
	email = user1@domain
[include]
 path=../shared.gitconfig
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit config --list --local --includes[0m
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=../test/local_shared_repo
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
user.name=user1
user.email=user1@domain
include.path=../shared.gitconfig
core.editor=vim
core.autocrlf=input
core.pager=less
push.default=simple
pull.rebase=false
diff.tool=meld
diff.guitool=meld
color.ui=always
color.branch=always
color.status=always
color.diff=always
color.interactive=always
color.grep=always
color.pager=true
color.decorate=always
color.showbranch=always
color.diff.context=black
color.diff.frag=blue brightmagenta
color.diff.meta=cyan
color.diff.old=blue brightred
color.diff.new=blue brightgreen
color.decorate.tag=bold blue
merge.tool=meld
merge.conflictstyle=diff3
difftool.meld.path=/usr/bin/meld
difftool.meld.trustexitcode=false
difftool.prompt=false
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit add shared.gitconfig[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit status[0m
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	[32mnew file:   empty_folder/.placeholder[m
	[32mnew file:   links/cra.sv[m
	[32mnew file:   links/fa.sv[m
	[32mnew file:   links/ha.sv[m
	[32mnew file:   readme.txt[m
	[32mnew file:   shared.gitconfig[m
	[32mnew file:   verilog/carry_lookahead_adder.v[m
	[32mnew file:   verilog/carry_ripple_adder.v[m
	[32mnew file:   verilog/full_adder.v[m
	[32mnew file:   verilog/full_adder_cla.v[m
	[32mnew file:   verilog/halve_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mverilog/file_not_to_be_tracked.v[m
	[36mverilog/file_to_be_ignored_by_extension.ignore_me[m
	[36mverilog/sub_folder_not_to_be_tracked/[m


[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| commit the contents of the stage to the sandbox repository[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mskip -m 'message' to get to interactive commit message editing[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[EMPTY][0m $ [1;31mgit commit -m 'initial commit'[0m
[master (root-commit) <HASH>] initial commit
 11 files changed, 141 insertions(+)
 create mode 100644 empty_folder/.placeholder
 create mode 120000 links/cra.sv
 create mode 120000 links/fa.sv
 create mode 120000 links/ha.sv
 create mode 100644 readme.txt
 create mode 100644 shared.gitconfig
 create mode 100644 verilog/carry_lookahead_adder.v
 create mode 100644 verilog/carry_ripple_adder.v
 create mode 100644 verilog/full_adder.v
 create mode 100644 verilog/full_adder_cla.v
 create mode 100644 verilog/halve_adder.v

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| log - show the commit history[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mgit uses a hash instead of a number for each commit, numbers are not possible due to the decentralized nature of git[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log[0m
[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    initial commit
[1;36mCMT:[0m [1;35msome more options, which will be handy later[0m
[1;36mCMT:[0m [1;35mshow all commits of all branches[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --all[0m
[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    initial commit
[1;36mCMT:[0m [1;35mshow all commits using a graph to show commit history[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --all --graph[0m
* [33mcommit <HASH>[33m
  Author: user1 <user1@domain>
  Date:   Sat Sep 20 <TIME> 2025 +0200
  
      initial commit
[1;36mCMT:[0m [1;35mshow reference names (branches, tags, etc.)[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --all --graph --decorate[0m
* [33mcommit <HASH>[33m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m
  Author: user1 <user1@domain>
  Date:   Sat Sep 20 <TIME> 2025 +0200
  
      initial commit
[1;36mCMT:[0m [1;35mshow short logs[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --oneline[0m
[33m<HASH>[m initial commit
[1;36mCMT:[0m [1;35mcombine them all[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --oneline --all --graph --decorate[0m
* [33m<HASH>[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m initial commit
[1;36mCMT:[0m [1;35mlets try these afterwards when there are more commits[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| commit messages[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mgit supports basic structured commit messages of the form:[0m
[1;36mCMT:[0m [1;35m  <SUMMARY>       (one line only)[0m
[1;36mCMT:[0m [1;35m  <EMPTY LINE>[0m
[1;36mCMT:[0m [1;35m  <DETAILS>       (multiple lines)[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho 'dummy data' > commit_message_test.file[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit add commit_message_test.file[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit commit -m $'commit message structure demo

detailed message can contain
multiple lines

it was added to show the commit message structure
and it can contain any arbitrary message'[0m
[master  <HASH>] commit message structure demo
 1 file changed, 1 insertion(+)
 create mode 100644 commit_message_test.file
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log[0m
[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    commit message structure demo
    
    detailed message can contain
    multiple lines
    
    it was added to show the commit message structure
    and it can contain any arbitrary message

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    initial commit
[1;36mCMT:[0m [1;35monly summary is shown when using --oneline, this is handy for getting a fast overview of the changes[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --oneline[0m
[33m<HASH>[m commit message structure demo
[33m<HASH>[m initial commit
[1;36mCMT:[0m [1;35mrecommendation is to place: unique commit identifiers/categories/ticket_numbers etc. in front of the <SUMMARY> for better readability[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| push the contents of the sandbox repository to the shared local remote repository[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is based on 'origin/master', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mverilog/file_not_to_be_tracked.v[m
	[36mverilog/file_to_be_ignored_by_extension.ignore_me[m
	[36mverilog/sub_folder_not_to_be_tracked/[m

nothing added to commit but untracked files present (use "git add" to track)
[1;36mCMT:[0m [1;35muse "git branch --unset-upstream" to fixup => this warning is because there is no remote repo branch known for master as the repo is empty - solved by first push[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit push[0m
To ../test/local_shared_repo
 * [new branch]      master -> master

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| remotes - show connected remote repositories by name (+remote URL)[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mdefault branch is called origin[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit remote[0m
origin
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit remote -v[0m
origin	../test/local_shared_repo (fetch)
origin	../test/local_shared_repo (push)

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| branches - show branches (current, all, all with details and with more details)[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mdefault branch is called master[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch[0m
* [32mmaster[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch -a[0m
* [32mmaster[m
  [31mremotes/origin/master[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch -va[0m
* [32mmaster               [m 1154722 commit message structure demo
  [31mremotes/origin/master[m 1154722 commit message structure demo
[1;36mCMT:[0m [1;35mbelow shows additonally the upstream connection (where default push/pull goes to/from)[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch -vva[0m
* [32mmaster               [m <HASH> [[34morigin/master[m] commit message structure demo
  [31mremotes/origin/master[m 1154722 commit message structure demo

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| add dummy repo's and add them as remote[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mmultiple remotes can be added of the same repo or even other repos, which enables to implement all kind of workflows[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mcd ..[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mmkdir local_shared_repo2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mcd local_shared_repo2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/local_shared_repo2[0m [38;5;55;1m[0m $ [1;31mgit init --bare --shared=true .[0m
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty shared Git repository in ../test/local_shared_repo2/
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/local_shared_repo2[0m [38;5;55;1m[0m $ [1;31mcd ..[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mcd user1_sb1[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add the new remote repos[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit remote add local_shared_repo2 ../test/local_shared_repo2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit remote -v[0m
local_shared_repo2	../test/local_shared_repo2 (fetch)
local_shared_repo2	../test/local_shared_repo2 (push)
origin	../test/local_shared_repo (fetch)
origin	../test/local_shared_repo (push)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch -vva[0m
* [32mmaster               [m <HASH> [[34morigin/master[m] commit message structure demo
  [31mremotes/origin/master[m 1154722 commit message structure demo

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| push the current branch to the remote repo's[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit push local_shared_repo2[0m
To ../test/local_shared_repo2
 * [new branch]      master -> master
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch -vva[0m
* [32mmaster                           [m <HASH> [[34morigin/master[m] commit message structure demo
  [31mremotes/local_shared_repo2/master[m 1154722 commit message structure demo
  [31mremotes/origin/master            [m 1154722 commit message structure demo

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| ignoring files[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mverilog/file_not_to_be_tracked.v[m
	[36mverilog/file_to_be_ignored_by_extension.ignore_me[m
	[36mverilog/sub_folder_not_to_be_tracked/[m

nothing added to commit but untracked files present (use "git add" to track)
[1;36mCMT:[0m [1;35mignores are immediately effective[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho "file_to_be_ignored.txt" > .gitignore[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m.gitignore[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mverilog/file_not_to_be_tracked.v[m
	[36mverilog/file_to_be_ignored_by_extension.ignore_me[m
	[36mverilog/sub_folder_not_to_be_tracked/[m

nothing added to commit but untracked files present (use "git add" to track)

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| using wildcards[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho "*.ignore_me" >> .gitignore[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m.gitignore[m
	[36mfolder_not_to_be_tracked/[m
	[36mverilog/file_not_to_be_tracked.v[m
	[36mverilog/sub_folder_not_to_be_tracked/[m

nothing added to commit but untracked files present (use "git add" to track)

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| showing ignored files[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status --ignored[0m
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m.gitignore[m
	[36mfolder_not_to_be_tracked/[m
	[36mverilog/file_not_to_be_tracked.v[m
	[36mverilog/sub_folder_not_to_be_tracked/[m

Ignored files:
  (use "git add -f <file>..." to include in what will be committed)
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mverilog/file_to_be_ignored_by_extension.ignore_me[m

nothing added to commit but untracked files present (use "git add" to track)

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add remaining files to get clean status[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho "*folder_not_to_be_tracked" >> .gitignore[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho "verilog/file_not_to_be_tracked.v" >> .gitignore[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m.gitignore[m

nothing added to commit but untracked files present (use "git add" to track)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status --ignored[0m
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36m.gitignore[m

Ignored files:
  (use "git add -f <file>..." to include in what will be committed)
	[36mfile_to_be_ignored.txt[m
	[36mfile_to_be_ignored_by_extension.ignore_me[m
	[36mfolder_not_to_be_tracked/[m
	[36mverilog/file_not_to_be_tracked.v[m
	[36mverilog/file_to_be_ignored_by_extension.ignore_me[m
	[36mverilog/sub_folder_not_to_be_tracked/[m

nothing added to commit but untracked files present (use "git add" to track)

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| sharing files to be ignored[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit add .gitignore[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit commit -m 'adding git ignores'[0m
[master  <HASH>] adding git ignores
 1 file changed, 4 insertions(+)
 create mode 100644 .gitignore

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| common issue: user is in the middle of feature implementation and gets a request to do something else[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mSOLUTION 1: commit current changes[0m
[1;36mCMT:[0m [1;35mSOLUTION 2: use stash to store intermediate changes[0m
[1;36mCMT:[0m [1;35mSOLUTION 3: avoid it: work on branches for each feature[0m
[1;36mCMT:[0m [1;35mSOLUTION 4: avoid it: use worktree's[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| stashes (SOLUTION 2) + advanced log + aliases[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mstash is similar to a commit but it does not modify the branch[0m
[1;36mCMT:[0m [1;35minstead it creates a 'one branch with one commit only'[0m
[1;36mCMT:[0m [1;35ma stack like approach is used for handling the stashes[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho 'some change' >> readme.txt[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit rm links/fa.sv[0m
rm 'links/fa.sv'
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mrm links/ha.sv[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho 'remove all contents' > verilog/carry_ripple_adder.v[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| stash selected file[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash -- verilog/carry_ripple_adder.v[0m
Saved working directory and index state WIP on master: be9fdf2 adding git ignores
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mdeleted:    links/fa.sv[m

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mdeleted:    links/ha.sv[m
	[31mmodified:   readme.txt[m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| stash all changed files[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash[0m
Saved working directory and index state WIP on master: be9fdf2 adding git ignores
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| list all stashes[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash list[0m
stash@{0}: WIP on master: be9fdf2 adding git ignores
stash@{1}: WIP on master: be9fdf2 adding git ignores

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| apply stash and drop it[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mCMT:[0m [1;35mif there are conflicts during stash pop then the stash is not automatically removed ![0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash pop[0m
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mdeleted:    links/fa.sv[m
	[31mdeleted:    links/ha.sv[m
	[31mmodified:   readme.txt[m

no changes added to commit (use "git add" and/or "git commit -a")
Dropped refs/stash@{0} (<HASH>)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash list[0m
stash@{0}: WIP on master: be9fdf2 adding git ignores
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mdeleted:    links/fa.sv[m
	[31mdeleted:    links/ha.sv[m
	[31mmodified:   readme.txt[m

no changes added to commit (use "git add" and/or "git commit -a")

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| stash all changed files + adding a title for the stash[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash -m 'stash with certain name'[0m
Saved working directory and index state On master: stash with certain name
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash list[0m
stash@{0}: On master: stash with certain name
stash@{1}: WIP on master: be9fdf2 adding git ignores

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| apply stash but keep it for other usage[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash apply[0m
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mdeleted:    links/fa.sv[m
	[31mdeleted:    links/ha.sv[m
	[31mmodified:   readme.txt[m

no changes added to commit (use "git add" and/or "git commit -a")
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash list[0m
stash@{0}: On master: stash with certain name
stash@{1}: WIP on master: be9fdf2 adding git ignores
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mdeleted:    links/fa.sv[m
	[31mdeleted:    links/ha.sv[m
	[31mmodified:   readme.txt[m

no changes added to commit (use "git add" and/or "git commit -a")

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| restore all local changes at once[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit restore :/[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| show change list of top most stash element[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash show[0m
 links/fa.sv | 1 [34;101m-[m
 links/ha.sv | 1 [34;101m-[m
 readme.txt  | 1 [34;102m+[m
 3 files changed, 1 insertion(+), 2 deletions(-)

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| show change list of selected stash element[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash show 1[0m
 links/fa.sv                  |  1 [34;101m-[m
 verilog/carry_ripple_adder.v | 22 [34;102m+[m[34;101m---------------------[m
 2 files changed, 1 insertion(+), 22 deletions(-)

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| show detailed changes of top most or selected stash element[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash show -p[0m
[36mdiff --git a/links/fa.sv b/links/fa.sv[m
[36mdeleted file mode 120000[m
[36mindex <HASH>..<HASH>[m
[36m--- a/links/fa.sv[m
[36m+++ /dev/null[m
[34;105m@@ -1 +0,0 @@[m
[34;101m-../verilog/full_adder.v[m
[30m\ No newline at end of file[m
[36mdiff --git a/links/ha.sv b/links/ha.sv[m
[36mdeleted file mode 120000[m
[36mindex <HASH>..<HASH>[m
[36m--- a/links/ha.sv[m
[36m+++ /dev/null[m
[34;105m@@ -1 +0,0 @@[m
[34;101m-../verilog/halve_adder.v[m
[30m\ No newline at end of file[m
[36mdiff --git a/readme.txt b/readme.txt[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/readme.txt[m
[36m+++ b/readme.txt[m
[34;105m@@ -1 +1,2 @@[m
[30m this file containts some dummy data[m
[34;102m+[m[34;102msome change[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash show -p 1[0m
[36mdiff --git a/links/fa.sv b/links/fa.sv[m
[36mdeleted file mode 120000[m
[36mindex <HASH>..<HASH>[m
[36m--- a/links/fa.sv[m
[36m+++ /dev/null[m
[34;105m@@ -1 +0,0 @@[m
[34;101m-../verilog/full_adder.v[m
[30m\ No newline at end of file[m
[36mdiff --git a/verilog/carry_ripple_adder.v b/verilog/carry_ripple_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/carry_ripple_adder.v[m
[36m+++ b/verilog/carry_ripple_adder.v[m
[34;105m@@ -1,21 +1 @@[m
[34;101m-module carry_ripple_adder[m
[34;101m-  #(parameter W = 16)[m
[34;101m-  (input  wire [W-1:0] a,[m
[34;101m-   input  wire [W-1:0] b,[m
[34;101m-   input  wire         c_in,[m
[34;101m-   output wire [W-1:0] s,[m
[34;101m-   output wire         c_out);[m
[34;101m-[m
[34;101m-  wire [W-1:0] c;[m
[34;101m-[m
[34;101m-  full_adder fas [W-1:0] ([m
[34;101m-    .a     (a),[m
[34;101m-    .b     (b),[m
[34;101m-    .c_in  ({c[W-2:0], c_in}),[m
[34;101m-    .s     (s),[m
[34;101m-    .c_out (c)[m
[34;101m-  );[m
[34;101m-[m
[34;101m-  assign c_out = c[W-1];[m
[34;101m-[m
[34;101m-endmodule[m
[34;102m+[m[34;102mremove all contents[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash show -p stash@{1}[0m
[36mdiff --git a/links/fa.sv b/links/fa.sv[m
[36mdeleted file mode 120000[m
[36mindex <HASH>..<HASH>[m
[36m--- a/links/fa.sv[m
[36m+++ /dev/null[m
[34;105m@@ -1 +0,0 @@[m
[34;101m-../verilog/full_adder.v[m
[30m\ No newline at end of file[m
[36mdiff --git a/verilog/carry_ripple_adder.v b/verilog/carry_ripple_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/carry_ripple_adder.v[m
[36m+++ b/verilog/carry_ripple_adder.v[m
[34;105m@@ -1,21 +1 @@[m
[34;101m-module carry_ripple_adder[m
[34;101m-  #(parameter W = 16)[m
[34;101m-  (input  wire [W-1:0] a,[m
[34;101m-   input  wire [W-1:0] b,[m
[34;101m-   input  wire         c_in,[m
[34;101m-   output wire [W-1:0] s,[m
[34;101m-   output wire         c_out);[m
[34;101m-[m
[34;101m-  wire [W-1:0] c;[m
[34;101m-[m
[34;101m-  full_adder fas [W-1:0] ([m
[34;101m-    .a     (a),[m
[34;101m-    .b     (b),[m
[34;101m-    .c_in  ({c[W-2:0], c_in}),[m
[34;101m-    .s     (s),[m
[34;101m-    .c_out (c)[m
[34;101m-  );[m
[34;101m-[m
[34;101m-  assign c_out = c[W-1];[m
[34;101m-[m
[34;101m-endmodule[m
[34;102m+[m[34;102mremove all contents[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add more stashes[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho 'remove all whatever' > verilog/carry_ripple_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash -m 'another change to cra' -- verilog/carry_ripple_adder.v[0m
Saved working directory and index state On master: another change to cra

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| showing the stashes in log[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash list[0m
stash@{0}: On master: another change to cra
stash@{1}: On master: stash with certain name
stash@{2}: WIP on master: be9fdf2 adding git ignores
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log -g stash[0m
[33mcommit <HASH>[33m
Reflog: stash@{0} (user1 <user1@domain>)
Reflog message: On master: another change to cra
Merge: be9fdf2 6944da1
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    On master: another change to cra

[33mcommit <HASH>[33m
Reflog: stash@{1} (user1 <user1@domain>)
Reflog message: On master: stash with certain name
Merge: be9fdf2 3ce6f34
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    On master: stash with certain name

[33mcommit <HASH>[33m
Reflog: stash@{2} (user1 <user1@domain>)
Reflog message: WIP on master: be9fdf2 adding git ignores
Merge: be9fdf2 ec55474
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    WIP on master: be9fdf2 adding git ignores
[1;36mCMT:[0m [1;35mgit log does not show stashes at all, --all shows only some, --decorate additionally show all reference names (e.g. branches, tags, stashes, etc.)[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --all --decorate[0m
[33mcommit <HASH>[33m[33m ([m[1;35mrefs/stash[m[33m)[m
Merge: be9fdf2 6944da1
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    On master: another change to cra

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    index on master: be9fdf2 adding git ignores

[33mcommit <HASH>[33m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    adding git ignores

[33mcommit <HASH>[33m[33m ([m[1;31morigin/master[m[33m, [m[1;31mlocal_shared_repo2/master[m[33m)[m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    commit message structure demo
    
    detailed message can contain
    multiple lines
    
    it was added to show the commit message structure
    and it can contain any arbitrary message

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    initial commit
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --all --decorate $(git reflog show --format="%h" stash)[0m
[33mcommit <HASH>[33m[33m ([m[1;35mrefs/stash[m[33m)[m
Merge: be9fdf2 6944da1
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    On master: another change to cra

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    index on master: be9fdf2 adding git ignores

[33mcommit <HASH>[33m
Merge: be9fdf2 3ce6f34
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    On master: stash with certain name

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    index on master: be9fdf2 adding git ignores

[33mcommit <HASH>[33m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    adding git ignores

[33mcommit <HASH>[33m
Merge: be9fdf2 ec55474
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    WIP on master: be9fdf2 adding git ignores

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    index on master: be9fdf2 adding git ignores

[33mcommit <HASH>[33m[33m ([m[1;31morigin/master[m[33m, [m[1;31mlocal_shared_repo2/master[m[33m)[m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    commit message structure demo
    
    detailed message can contain
    multiple lines
    
    it was added to show the commit message structure
    and it can contain any arbitrary message

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    initial commit
[1;36mCMT:[0m [1;35m--online gives a one line list instead of full blown log[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --online --all --decorate $(git reflog show --format="%h" stash)[0m
fatal: unrecognized argument: --online
[1;36mCMT:[0m [1;35m--graph shows how the internal commit graph history[0m
[1;36mCMT:[0m [1;35mwe can see two entries for each stash entry - index on master (copy of part where stash is applied + stash itself => used for calculating patch differences)[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit log --oneline --graph --decorate --all $(git reflog show --format="%h" stash)[0m
*   [33m<HASH>[m[33m ([m[1;35mrefs/stash[m[33m)[m On master: another change to cra
[31m|[m[32m\[m  
[31m|[m * [33m<HASH>[m index on master: be9fdf2 adding git ignores
[31m|[m[31m/[m  
[31m|[m * [33m<HASH>[m On master: stash with certain name
[31m|[m[31m/[m[34m|[m 
[31m|[m * [33m<HASH>[m index on master: be9fdf2 adding git ignores
[31m|[m[31m/[m  
[31m|[m * [33m<HASH>[m WIP on master: be9fdf2 adding git ignores
[31m|[m[31m/[m[36m|[m 
[31m|[m * [33m<HASH>[m index on master: be9fdf2 adding git ignores
[31m|[m[31m/[m  
* [33m<HASH>[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m adding git ignores
* [33m<HASH>[m[33m ([m[1;31morigin/master[m[33m, [m[1;31mlocal_shared_repo2/master[m[33m)[m commit message structure demo
* [33m<HASH>[m initial commit
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash list[0m
stash@{0}: On master: another change to cra
stash@{1}: On master: stash with certain name
stash@{2}: WIP on master: be9fdf2 adding git ignores

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| aliases can be used to avoid remembering/typing long commands[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mCMT:[0m [1;35mit is possible to call git with different options or any other commands (e.g. shell scripts)[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit config --local alias.aliaslogall "log --oneline --graph --decorate --all"[0m
[1;36mCMT:[0m [1;35msometimes its more complex to get aliases properly running[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit config --local alias.aliaslogallstash "!f() { git reflog show --format=\"%h\" stash | git log --oneline --graph --decorate --all; }; f"[0m
[1;36mCMT:[0m [1;35madding alias for bash command[0m
+ echo '[alias]'
+ echo aliasanycmd = '"!bash' -c ''\''cd' -- '\"${GIT_PREFIX:-.}\";' any_cmd.sh -- '\"$@\"'\''' '--"'
+ set +x
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mtail -n 1 .git/config[0m
aliasanycmd = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; any_cmd.sh -- \"$@\"' --"
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit aliaslogallstash[0m
*   [33m<HASH>[m[33m ([m[1;35mrefs/stash[m[33m)[m On master: another change to cra
[31m|[m[32m\[m  
[31m|[m * [33m<HASH>[m index on master: be9fdf2 adding git ignores
[31m|[m[31m/[m  
* [33m<HASH>[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m adding git ignores
* [33m<HASH>[m[33m ([m[1;31morigin/master[m[33m, [m[1;31mlocal_shared_repo2/master[m[33m)[m commit message structure demo
* [33m<HASH>[m initial commit
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit config --local --list | grep alias[0m
alias.aliaslogall=log --oneline --graph --decorate --all
alias.aliaslogallstash=!f() { git reflog show --format="%h" stash | git log --oneline --graph --decorate --all; }; f
alias.aliasanycmd=!bash -c 'cd -- "${GIT_PREFIX:-.}"; any_cmd.sh -- "$@"' --

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| branches (SOLUTION 3)[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| create branch from current[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch feature1[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit checkout feature1[0m
Switched to branch 'feature1'
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliaslogall[0m
*   [33m<HASH>[m[33m ([m[1;35mrefs/stash[m[33m)[m On master: another change to cra
[31m|[m[32m\[m  
[31m|[m * [33m<HASH>[m index on master: be9fdf2 adding git ignores
[31m|[m[31m/[m  
* [33m<HASH>[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1[m[33m, [m[1;32mmaster[m[33m)[m adding git ignores
* [33m<HASH>[m[33m ([m[1;31morigin/master[m[33m, [m[1;31mlocal_shared_repo2/master[m[33m)[m commit message structure demo
* [33m<HASH>[m initial commit

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| do some changes[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mecho 'do some modifications in branch' >> verilog/halve_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit verilog/halve_adder.v -m 'some change in branch'[0m
[feature1  <HASH>] some change in branch
 1 file changed, 1 insertion(+)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mecho 'some more changes' >> verilog/full_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit verilog/full_adder.v -m 'another change in branch'[0m
[feature1  <HASH>] another change in branch
 1 file changed, 1 insertion(+)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,full_adder,fa,g" verilog/full_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit verilog/full_adder.v -m 'rename full_adder to fa'[0m
[feature1  <HASH>] rename full_adder to fa
 1 file changed, 1 insertion(+), 1 deletion(-)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliaslogall[0m
* [33m<HASH>[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1[m[33m)[m rename full_adder to fa
* [33m<HASH>[m another change in branch
* [33m<HASH>[m some change in branch
[31m|[m * [33m<HASH>[m[33m ([m[1;35mrefs/stash[m[33m)[m On master: another change to cra
[31m|[m[31m/[m[33m|[m 
[31m|[m * [33m<HASH>[m index on master: be9fdf2 adding git ignores
[31m|[m[31m/[m  
* [33m<HASH>[m[33m ([m[1;32mmaster[m[33m)[m adding git ignores
* [33m<HASH>[m[33m ([m[1;31morigin/master[m[33m, [m[1;31mlocal_shared_repo2/master[m[33m)[m commit message structure demo
* [33m<HASH>[m initial commit

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| try to checkout different branch in case of local modifications[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mCMT:[0m [1;35mthis will break as data would be lost => stash/commit/worktree[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,halve_adder,ha,g" verilog/halve_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit checkout master[0m
error: Your local changes to the following files would be overwritten by checkout:
	verilog/halve_adder.v
Please commit your changes or stash them before you switch branches.
Aborting
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit verilog/halve_adder.v -m 'rename halve_adder to ha'[0m
[feature1  <HASH>] rename halve_adder to ha
 1 file changed, 1 insertion(+), 1 deletion(-)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit checkout master[0m
Switched to branch 'master'
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit push[0m
To ../test/local_shared_repo
   <HASH>..<HASH>  master -> master

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| transfer new local feature1 branch to remote repository[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit checkout feature1[0m
Switched to branch 'feature1'
[1;36mCMT:[0m [1;35msimple push will fail es we first need to setup upstream first[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit push[0m
fatal: The current branch feature1 has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin feature1

To have this happen automatically for branches without a tracking
upstream, see 'push.autoSetupRemote' in 'git help config'.

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit branch -vva[0m
* [32mfeature1                         [m 5d2e926 rename halve_adder to ha
  master                           [m <HASH> [[34morigin/master[m] adding git ignores
  [31mremotes/local_shared_repo2/master[m 1154722 commit message structure demo
  [31mremotes/origin/master            [m be9fdf2 adding git ignores
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit push --set-upstream origin feature1[0m
To ../test/local_shared_repo
 * [new branch]      feature1 -> feature1
branch 'feature1' set up to track 'origin/feature1'.
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit push[0m
Everything up-to-date
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliaslogall[0m
* [33m<HASH>[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1[m[33m, [m[1;31morigin/feature1[m[33m)[m rename halve_adder to ha
* [33m<HASH>[m rename full_adder to fa
* [33m<HASH>[m another change in branch
* [33m<HASH>[m some change in branch
[31m|[m * [33m<HASH>[m[33m ([m[1;35mrefs/stash[m[33m)[m On master: another change to cra
[31m|[m[31m/[m[33m|[m 
[31m|[m * [33m<HASH>[m index on master: be9fdf2 adding git ignores
[31m|[m[31m/[m  
* [33m<HASH>[m[33m ([m[1;31morigin/master[m[33m, [m[1;32mmaster[m[33m)[m adding git ignores
* [33m<HASH>[m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m commit message structure demo
* [33m<HASH>[m initial commit
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit branch -vva[0m
* [32mfeature1                         [m <HASH> [[34morigin/feature1[m] rename halve_adder to ha
  master                           [m <HASH> [[34morigin/master[m] adding git ignores
  [31mremotes/local_shared_repo2/master[m 1154722 commit message structure demo
  [31mremotes/origin/feature1          [m 5d2e926 rename halve_adder to ha
  [31mremotes/origin/master            [m be9fdf2 adding git ignores

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| diff[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| prepare some changes to show[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit stash apply 0[0m
On branch feature1
Your branch is up to date with 'origin/feature1'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   verilog/carry_ripple_adder.v[m

no changes added to commit (use "git add" and/or "git commit -a")
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit stash apply 1[0m
On branch feature1
Your branch is up to date with 'origin/feature1'.

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mdeleted:    links/fa.sv[m
	[31mdeleted:    links/ha.sv[m
	[31mmodified:   readme.txt[m
	[31mmodified:   verilog/carry_ripple_adder.v[m

no changes added to commit (use "git add" and/or "git commit -a")
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,wire, wire ,g" verilog/halve_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,reg, logic,g" verilog/halve_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,modifications,mods,g" verilog/halve_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,c_,carry_,g" verilog/full_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit diff[0m
[36mdiff --git a/links/fa.sv b/links/fa.sv[m
[36mdeleted file mode 120000[m
[36mindex <HASH>..<HASH>[m
[36m--- a/links/fa.sv[m
[36m+++ /dev/null[m
[34;105m@@ -1 +0,0 @@[m
[34;101m-../verilog/full_adder.v[m
[30m\ No newline at end of file[m
[36mdiff --git a/links/ha.sv b/links/ha.sv[m
[36mdeleted file mode 120000[m
[36mindex <HASH>..<HASH>[m
[36m--- a/links/ha.sv[m
[36m+++ /dev/null[m
[34;105m@@ -1 +0,0 @@[m
[34;101m-../verilog/halve_adder.v[m
[30m\ No newline at end of file[m
[36mdiff --git a/readme.txt b/readme.txt[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/readme.txt[m
[36m+++ b/readme.txt[m
[34;105m@@ -1 +1,2 @@[m
[30m this file containts some dummy data[m
[34;102m+[m[34;102msome change[m
[36mdiff --git a/verilog/carry_ripple_adder.v b/verilog/carry_ripple_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/carry_ripple_adder.v[m
[36m+++ b/verilog/carry_ripple_adder.v[m
[34;105m@@ -1,21 +1 @@[m
[34;101m-module carry_ripple_adder[m
[34;101m-  #(parameter W = 16)[m
[34;101m-  (input  wire [W-1:0] a,[m
[34;101m-   input  wire [W-1:0] b,[m
[34;101m-   input  wire         c_in,[m
[34;101m-   output wire [W-1:0] s,[m
[34;101m-   output wire         c_out);[m
[34;101m-[m
[34;101m-  wire [W-1:0] c;[m
[34;101m-[m
[34;101m-  full_adder fas [W-1:0] ([m
[34;101m-    .a     (a),[m
[34;101m-    .b     (b),[m
[34;101m-    .c_in  ({c[W-2:0], c_in}),[m
[34;101m-    .s     (s),[m
[34;101m-    .c_out (c)[m
[34;101m-  );[m
[34;101m-[m
[34;101m-  assign c_out = c[W-1];[m
[34;101m-[m
[34;101m-endmodule[m
[34;102m+[m[34;102mremove all whatever[m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -1,11 +1,11 @@[m
[30m module fa ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[34;101m-  input  wire c_in,[m
[34;102m+[m[34;102m  input  wire carry_in,[m
[30m   output reg s,[m
[34;101m-  output reg c_out);[m
[34;102m+[m[34;102m  output reg carry_out);[m
[30m [m
[34;101m-  assign {c_out, s} = a + b + c_in;[m
[34;102m+[m[34;102m  assign {carry_out, s} = a + b + carry_in;[m
[30m [m
[30m endmodule[m
[30m some more changes[m
[36mdiff --git a/verilog/halve_adder.v b/verilog/halve_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/halve_adder.v[m
[36m+++ b/verilog/halve_adder.v[m
[34;105m@@ -1,10 +1,10 @@[m
[30m module ha ([m
[34;101m- input  wire a,[m
[34;101m- input  wire b,[m
[34;101m- output reg s,[m
[34;101m- output reg c);[m
[34;102m+[m[34;102m input   wire  a,[m
[34;102m+[m[34;102m input   wire  b,[m
[34;102m+[m[34;102m output  logic s,[m
[34;102m+[m[34;102m output  logic c);[m
[30m [m
[30m   assign {c, s} = a + b;[m
[30m [m
[30m endmodule[m
[34;101m-do some modifications in branch[m
[34;102m+[m[34;102mdo some mods in branch[m
[1;36mCMT:[0m [1;35mgui mode can be started by using difftool instead of diff command[0m
[1;36mCMT:[0m [1;35m  > git difftool[0m
[1;36mCMT:[0m [1;35mgui directory diff is supported e.g. via meld[0m
[1;36mCMT:[0m [1;35m  > git difftool -d[0m
[1;36mCMT:[0m [1;35mfiles/paths can be used to show only diffs of certain files[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit diff verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -1,11 +1,11 @@[m
[30m module fa ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[34;101m-  input  wire c_in,[m
[34;102m+[m[34;102m  input  wire carry_in,[m
[30m   output reg s,[m
[34;101m-  output reg c_out);[m
[34;102m+[m[34;102m  output reg carry_out);[m
[30m [m
[34;101m-  assign {c_out, s} = a + b + c_in;[m
[34;102m+[m[34;102m  assign {carry_out, s} = a + b + carry_in;[m
[30m [m
[30m endmodule[m
[30m some more changes[m
[1;36mCMT:[0m [1;35mwordwise diff reduces overhead[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit diff --word-diff verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -1,11 +1,11 @@[m
[30mmodule fa ([m
[30m  input  wire a,[m
[30m  input  wire b,[m
[30m  input  wire [m[34;101m[-c_in,-][m[34;102m{+carry_in,+}[m
[30m  output reg s,[m
[30m  output reg [m[34;101m[-c_out);-][m[34;102m{+carry_out);+}[m

[30m  assign [m[34;101m[-{c_out,-][m[34;102m{+{carry_out,+}[m[30m s} = a + b + [m[34;101m[-c_in;-][m[34;102m{+carry_in;+}[m

[30mendmodule[m
[30msome more changes[m
[1;36mCMT:[0m [1;35mignoring spaces[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit diff '--word-diff-regex=[^[:space:]]' verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -1,11 +1,11 @@[m
[30mmodule fa ([m
[30m  input  wire a,[m
[30m  input  wire b,[m
[30m  input  wire c[m[34;102m{+arry+}[m[30m_in,[m
[30m  output reg s,[m
[30m  output reg c[m[34;102m{+arry+}[m[30m_out);[m

[30m  assign {c[m[34;102m{+arry+}[m[30m_out, s} = a + b + c[m[34;102m{+arry+}[m[30m_in;[m

[30mendmodule[m
[30msome more changes[m
[1;36mCMT:[0m [1;35mreduce diff overhead to just use just color encoding[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit diff '--word-diff-regex=[^[:space:]]' --word-diff=color verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -1,11 +1,11 @@[m
[30mmodule fa ([m
[30m  input  wire a,[m
[30m  input  wire b,[m
[30m  input  wire c[m[34;102marry[m[30m_in,[m
[30m  output reg s,[m
[30m  output reg c[m[34;102marry[m[30m_out);[m

[30m  assign {c[m[34;102marry[m[30m_out, s} = a + b + c[m[34;102marry[m[30m_in;[m

[30mendmodule[m
[30msome more changes[m
[1;36mCMT:[0m [1;35mjust show lines that changed - no context around the diff[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit diff '--word-diff-regex=[^[:space:]]' --word-diff=color -U0 verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -4 +4 @@[m[30m [mmodule fa ([m
[30m  input  wire c[m[34;102marry[m[30m_in,[m
[34;105m@@ -6 +6 @@[m[30m [mmodule fa ([m
[30m  output reg c[m[34;102marry[m[30m_out);[m
[34;105m@@ -8 +8 @@[m[30m [mmodule fa ([m
[30m  assign {c[m[34;102marry[m[30m_out, s} = a + b + c[m[34;102marry[m[30m_in;[m
[1;36mCMT:[0m [1;35msome more options that can be handy[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit diff '--word-diff-regex=[^[:space:]]' --word-diff=color -U0 --ignore-all-space --ignore-blank-lines --ignore-space-change verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -4 +4 @@[m[30m [mmodule fa ([m
[30m  input  wire c[m[34;102marry[m[30m_in,[m
[34;105m@@ -6 +6 @@[m[30m [mmodule fa ([m
[30m  output reg c[m[34;102marry[m[30m_out);[m
[34;105m@@ -8 +8 @@[m[30m [mmodule fa ([m
[30m  assign {c[m[34;102marry[m[30m_out, s} = a + b + c[m[34;102marry[m[30m_in;[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit config --local alias.aliasdiffall "diff '--word-diff-regex=[^[:space:]]' --word-diff=color -U0 --ignore-all-space --ignore-blank-lines --ignore-space-change"[0m
[1;36mCMT:[0m [1;35mcolor encoding is handy in commandline interface but cannot be used with difftool ![0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add all changes and directly commit them[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit -a -m 'changes to files'[0m
[feature1  <HASH>] changes to files
 6 files changed, 10 insertions(+), 31 deletions(-)
 delete mode 120000 links/fa.sv
 delete mode 120000 links/ha.sv

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| diff changes for commit[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mCMT:[0m [1;35mcarret/^ is used for relative naviation to reference name e.g. HEAD^ means one commit before head[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliasdiffall HEAD^..HEAD verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -4 +4 @@[m[30m [mmodule fa ([m
[30m  input  wire c[m[34;102marry[m[30m_in,[m
[34;105m@@ -6 +6 @@[m[30m [mmodule fa ([m
[30m  output reg c[m[34;102marry[m[30m_out);[m
[34;105m@@ -8 +8 @@[m[30m [mmodule fa ([m
[30m  assign {c[m[34;102marry[m[30m_out, s} = a + b + c[m[34;102marry[m[30m_in;[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| branch names are also references[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliasdiffall feature1..master verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -1 +1 @@[m
[30mmodule f[m[34;102mull_[m[30ma[m[34;102mdder[m[30m ([m
[34;105m@@ -4 +4 @@[m[30m [mmodule fa ([m
[30m  input  wire c[m[34;101marry[m[30m_in,[m
[34;105m@@ -6 +6 @@[m[30m [mmodule fa ([m
[30m  output reg c[m[34;101marry[m[30m_out);[m
[34;105m@@ -8 +8 @@[m[30m [mmodule fa ([m
[30m  assign {c[m[34;101marry[m[30m_out, s} = a + b + c[m[34;101marry[m[30m_in;[m
[34;105m@@ -11 +10,0 @@[m[30m [mendmodule[m
[34;101msome more changes[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| commit hashes can also be used[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliasdiffall 0891fb255d4aa95b5479880d2b2e84d46f695f51..be9fdf2bb5a3faff04a8bec6e8165f9db8a06fae verilog/full_adder.v[0m
[36mdiff --git a/verilog/full_adder.v b/verilog/full_adder.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder.v[m
[36m+++ b/verilog/full_adder.v[m
[34;105m@@ -1 +1 @@[m
[30mmodule f[m[34;102mull_[m[30ma[m[34;102mdder[m[30m ([m
[34;105m@@ -4 +4 @@[m[30m [mmodule fa ([m
[30m  input  wire c[m[34;101marry[m[30m_in,[m
[34;105m@@ -6 +6 @@[m[30m [mmodule fa ([m
[30m  output reg c[m[34;101marry[m[30m_out);[m
[34;105m@@ -8 +8 @@[m[30m [mmodule fa ([m
[30m  assign {c[m[34;101marry[m[30m_out, s} = a + b + c[m[34;101marry[m[30m_in;[m
[34;105m@@ -11 +10,0 @@[m[30m [mendmodule[m
[34;101msome more changes[m
[1;36mCMT:[0m [1;35mall these can be used with difftool too[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| merge[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mh are used to integrate changes from one branch to another one[0m
[1;36mCMT:[0m [1;35mmerging is used to integrate all changes from another branch to the current one[0m
[1;36mCMT:[0m [1;35mthe changes are combined without changing the history[0m
[1;36mCMT:[0m [1;35mmergin just adds another commit where the changes are merged together on the working branch where the merge is started[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add local changes to create merge conflicts comming from a another user called user2 via remote repository[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,reg,logic,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit verilog/full_adder_cla.v -m "reg to logic (conflicts with user2: c to carry_)"[0m
[feature1  <HASH>] reg to logic (conflicts with user2: c to carry_)
 1 file changed, 3 insertions(+), 3 deletions(-)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,prev ,previous ,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit verilog/full_adder_cla.v -m "prev to previous in comment (conflicts with user2: c to carry_)"[0m
[feature1  <HASH>] prev to previous in comment (conflicts with user2: c to carry_)
 1 file changed, 1 insertion(+), 1 deletion(-)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31msed -i "s,full_adder_cla,full_adder_carry_lookahead_adder,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit verilog/full_adder_cla.v -m "module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)"[0m
[feature1  <HASH>] module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
 1 file changed, 1 insertion(+), 1 deletion(-)

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| create sandbox for user2[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[0m $ [1;31mcd ..[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mmkdir user2_sb1[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test[0m [38;5;55;1m[0m $ [1;31mcd user2_sb1[0m
[1;36mCMT:[0m [1;35mbelow is an alternative way to clone[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[0m $ [1;31mgit init .[0m
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty Git repository in ../test/user2_sb1/.git/
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[0m $ [1;31mgit remote add origin ../test/local_shared_repo[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[0m $ [1;31mgit fetch[0m
From ../test/local_shared_repo
 * [new branch]      feature1   -> origin/feature1
 * [new branch]      master     -> origin/master
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[0m $ [1;31mgit checkout master[0m
Already on 'master'
branch 'master' set up to track 'origin/master'.
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit config user.name "user2"[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit config user.email "user2@domain"[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit config --local alias.aliaslogall2 "log --oneline --graph --decorate --all '--date=format-local:%Y-%m-%d %H:%M:%S' --pretty=format:\"%C(yellow)%h%C(reset) - %C(blue)%an%C(reset), %C(green)%ad%C(reset) : %s %C(auto)%d%C(reset)\""[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit aliaslogall2[0m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch -vva[0m
* [32mmaster                 [m <HASH> [[34morigin/master[m] adding git ignores
  [31mremotes/origin/feature1[m 5d2e926 rename halve_adder to ha
  [31mremotes/origin/master  [m be9fdf2 adding git ignores
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add changes to create merge conflicts to be solved in user1 sandbox later[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,c,cry_,g" verilog/carry_lookahead_adder.v[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit commit verilog/carry_lookahead_adder.v -m "c to cry_ (no conflict, only changed from user2)"[0m
[master  <HASH>] c to cry_ (no conflict, only changed from user2)
 1 file changed, 10 insertions(+), 10 deletions(-)
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,endmodule,endmodul../ some note,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit commit verilog/full_adder_cla.v -m "note after endmodule (no conflict, no change from user1 at the same location)"[0m
[master  <HASH>] note after endmodule (no conflict, no change from user1 at the same location)
 1 file changed, 1 insertion(+), 1 deletion(-)
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,full_adder_cla,fa_cla,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit commit verilog/full_adder_cla.v -m "module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder)"[0m
[master  <HASH>] module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder)
 1 file changed, 1 insertion(+), 1 deletion(-)
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,c,carry_,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,carry_ ,carry ,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i -r "s,carry_$,carry,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,carry_),carry),g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit commit verilog/full_adder_cla.v -m "c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder)"[0m
[master  <HASH>] c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder)
 1 file changed, 4 insertions(+), 4 deletions(-)
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,endmodule,endmodul../ some comment,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit commit verilog/full_adder_cla.v -m "update of note - added a comment after endmodule (no conflict, no change from user1 at the same location)"[0m
[master  <HASH>] update of note - added a comment after endmodule (no conflict, no change from user1 at the same location)
 1 file changed, 1 insertion(+), 1 deletion(-)

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| transfer to remote for merging[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit push[0m
To ../test/local_shared_repo
   <HASH>..<HASH>  master -> master
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit aliaslogall2[0m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : update of note - added a comment after endmodule (no conflict, no change from user1 at the same location) [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : note after endmodule (no conflict, no change from user1 at the same location) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to cry_ (no conflict, only changed from user2) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
[31m|[m[31m/[m  
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| change back to user1[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mcd ../user1_sb1[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit checkout feature1[0m
Already on 'feature1'
Your branch is ahead of 'origin/feature1' by 4 commits.
  (use "git push" to publish your local commits)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit pull[0m
From ../test/local_shared_repo
   <HASH>..<HASH>  master     -> origin/master
Already up to date.
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit fetch[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit checkout master[0m
Switched to branch 'master'
Your branch is behind 'origin/master' by 5 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit pull[0m
Updating <HASH>..<HASH>
Fast-forward
 verilog/carry_lookahead_adder.v | 20 [34;102m++++++++++[m[34;101m----------[m
 verilog/full_adder_cla.v        | 10 [34;102m+++++[m[34;101m-----[m
 2 files changed, 15 insertions(+), 15 deletions(-)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit config --local alias.aliaslogall2 "log --oneline --graph --decorate --all '--date=format-local:%Y-%m-%d %H:%M:%S' --pretty=tformat:\"%C(yellow)%h%C(reset) - %C(blue)%an%C(reset), %C(green)%ad%C(reset) : %s %C(auto)%d%C(reset)\""[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit config --local alias.aliaslog2 "log --oneline --graph --decorate '--date=format-local:%Y-%m-%d %H:%M:%S' --pretty=tformat:\"%C(yellow)%h%C(reset) - %C(blue)%an%C(reset), %C(green)%ad%C(reset) : %s %C(auto)%d%C(reset)\""[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit aliaslogall2[0m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : update of note - added a comment after endmodule (no conflict, no change from user1 at the same location) [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : note after endmodule (no conflict, no change from user1 at the same location) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to cry_ (no conflict, only changed from user2) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;32mfeature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
[31m|[m[31m/[m  
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : On master: another change to cra [m[33m ([m[1;35mrefs/stash[m[33m)[m[m
[31m|[m[31m/[m[34m|[m 
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : index on master: be9fdf2 adding git ignores [m[m
[31m|[m[31m/[m  
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| create a new branch to show merge (just for demonstration to keep master state for later use)[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit checkout -b master_duplicate_for_merge master[0m
Switched to a new branch 'master_duplicate_for_merge'
[1;36mCMT:[0m [1;35mcreating branches works on references and also on commit hashes[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit checkout -b master_duplicate_for_merge_using_hash 1f2a34c2b3530fe04c3630f72ed7e58083a95586[0m
Switched to a new branch 'master_duplicate_for_merge_using_hash'
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge_using_hash][0m $ [1;31mgit checkout master_duplicate_for_merge[0m
Switched to branch 'master_duplicate_for_merge'

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| do the merge of user1 and user2 changes[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit merge feature1[0m
Auto-merging verilog/full_adder_cla.v
CONFLICT (content): Merge conflict in verilog/full_adder_cla.v
Automatic merge failed; fix conflicts and then commit the result.
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit status[0m
On branch master_duplicate_for_merge
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Changes to be committed:
	[32mdeleted:    links/fa.sv[m
	[32mdeleted:    links/ha.sv[m
	[32mmodified:   readme.txt[m
	[32mmodified:   verilog/carry_ripple_adder.v[m
	[32mmodified:   verilog/full_adder.v[m
	[32mmodified:   verilog/halve_adder.v[m

Unmerged paths:
  (use "git add <file>..." to mark resolution)
	[31mboth modified:   verilog/full_adder_cla.v[m

[1;36mCMT:[0m [1;35mHINT: if anything went wrong operation can be aborted e.g. in case of unexpected conflicts[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit merge --abort[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit status[0m
On branch master_duplicate_for_merge
nothing to commit, working tree clean
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit merge feature1[0m
Auto-merging verilog/full_adder_cla.v
CONFLICT (content): Merge conflict in verilog/full_adder_cla.v
Automatic merge failed; fix conflicts and then commit the result.
[1;36mCMT:[0m [1;35mmerge results in expected merge conflicts that need to be solved manually[0m
[1;36mCMT:[0m [1;35mHINT: for graphical merging conflicts use: git mergetool <filename>[0m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| show differences ours vs. base vs. theirs (3 way merge style)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit diff verilog/full_adder_cla.v[0m
[36mdiff --cc verilog/full_adder_cla.v[m
[36mindex b6cb9ae,fda1507..0000000[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@@ -1,12 -1,12 +1,34 @@@[m
[34;102m++<<<<<<< HEAD[m
[34;102m +module fa_carry_la ([m
[34;102m++||||||| be9fdf2[m
[34;102m++module full_adder_cla ([m
[34;102m++=======[m
[34;102m+ module full_adder_carry_lookahead_adder ([m
[34;102m++>>>>>>> feature1[m
[30m    input  wire a,[m
[30m    input  wire b,[m
[34;102m++<<<<<<< HEAD[m
[34;102m +  input  wire carry_p../ prev carry_arry[m
[34;102m++||||||| be9fdf2[m
[34;102m++  input  wire cp../ prev carry[m
[34;102m++=======[m
[34;102m+   input  wire cp../ previous carry[m
[34;102m++>>>>>>> feature1[m
[30m    input  wire pp../ previous propagate[m
[30m    input  wire gp../ previous generate[m
[34;102m++<<<<<<< HEAD[m
[34;102m +  output reg  p,[m
[34;102m +  output reg  g,[m
[34;102m +  output reg  carry);[m
[34;102m++||||||| be9fdf2[m
[34;102m++  output reg  p,[m
[34;102m++  output reg  g,[m
[34;102m++  output reg  c);[m
[34;102m++=======[m
[34;102m+   output logic  p,[m
[34;102m+   output logic  g,[m
[34;102m+   output logic  c);[m
[34;102m++>>>>>>> feature1[m
[30m  [m
[30m    assign p = a ^ b../ propagate[m
[30m    assign g = a & b../ generate[m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| use checkout to obtain different versions of the code[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m


[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| theirs means the code of the branch to merge in (feature1)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit checkout --theirs verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit diff HEAD verilog/full_adder_cla.v[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1,15 +1,15 @@[m
[34;101m-module fa_carry_la ([m
[34;102m+[m[34;102mmodule full_adder_carry_lookahead_adder ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[34;101m-  input  wire carry_p../ prev carry_arry[m
[34;102m+[m[34;102m  input  wire cp../ previous carry[m
[30m   input  wire pp../ previous propagate[m
[30m   input  wire gp../ previous generate[m
[34;101m-  output reg  p,[m
[34;101m-  output reg  g,[m
[34;101m-  output reg  carry);[m
[34;102m+[m[34;102m  output logic  p,[m
[34;102m+[m[34;102m  output logic  g,[m
[34;102m+[m[34;102m  output logic  c);[m
[30m [m
[30m   assign p = a ^ b../ propagate[m
[30m   assign g = a & b../ generate[m
[34;101m-  assign carry = gp | pp & carry_p;[m
[34;102m+[m[34;102m  assign c = gp | pp & cp;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodule[m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| ours means the code of the branch to merge to (master_duplicate_for_merge)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit checkout --ours verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit diff HEAD verilog/full_adder_cla.v[0m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| merge means the merged code of both - originally created by the merge[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit checkout --merge verilog/full_adder_cla.v[0m
Recreated 1 merge conflict
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit diff HEAD verilog/full_adder_cla.v[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1,12 +1,34 @@[m
[34;102m+[m[34;102m<<<<<<< ours[m
[30m module fa_carry_la ([m
[34;102m+[m[34;102m||||||| base[m
[34;102m+[m[34;102mmodule full_adder_cla ([m
[34;102m+[m[34;102m=======[m
[34;102m+[m[34;102mmodule full_adder_carry_lookahead_adder ([m
[34;102m+[m[34;102m>>>>>>> theirs[m
[30m   input  wire a,[m
[30m   input  wire b,[m
[34;102m+[m[34;102m<<<<<<< ours[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;102m+[m[34;102m||||||| base[m
[34;102m+[m[34;102m  input  wire cp../ prev carry[m
[34;102m+[m[34;102m=======[m
[34;102m+[m[34;102m  input  wire cp../ previous carry[m
[34;102m+[m[34;102m>>>>>>> theirs[m
[30m   input  wire pp../ previous propagate[m
[30m   input  wire gp../ previous generate[m
[34;102m+[m[34;102m<<<<<<< ours[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[34;102m+[m[34;102m||||||| base[m
[34;102m+[m[34;102m  output reg  p,[m
[34;102m+[m[34;102m  output reg  g,[m
[34;102m+[m[34;102m  output reg  c);[m
[34;102m+[m[34;102m=======[m
[34;102m+[m[34;102m  output logic  p,[m
[34;102m+[m[34;102m  output logic  g,[m
[34;102m+[m[34;102m  output logic  c);[m
[34;102m+[m[34;102m>>>>>>> theirs[m
[30m [m
[30m   assign p = a ^ b../ propagate[m
[30m   assign g = a & b../ generate[m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| solving conflict[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit checkout --ours verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31msed -i "s,_la,_lookahead_adder,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31msed -i "s,_arry,,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31msed -i "s,prev ,previous ,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31msed -i "s,reg,logic,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit add verilog/full_adder_cla.v[0m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| concluding merge (using commandline message. Note that git commit is enough and would bring up the message editor.)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit commit -a -m 'Merge branch "feature1" into master_duplicate_for_merge'[0m
[master_duplicate_for_merge  <HASH>] Merge branch "feature1" into master_duplicate_for_merge
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit aliaslog2[0m
*   [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : Merge branch "feature1" into master_duplicate_for_merge [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster_duplicate_for_merge[m[33m)[m[m
[31m|[m[32m\[m  
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;32mfeature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
* [32m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : update of note - added a comment after endmodule (no conflict, no change from user1 at the same location) [m[33m ([m[1;31morigin/master[m[33m, [m[1;32mmaster_duplicate_for_merge_using_hash[m[33m, [m[1;32mmaster[m[33m)[m[m
* [32m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [32m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [32m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : note after endmodule (no conflict, no change from user1 at the same location) [m[m
* [32m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to cry_ (no conflict, only changed from user2) [m[m
[32m|[m[32m/[m  
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| opposite direction merge demonstration[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master_duplicate_for_merge][0m $ [1;31mgit checkout feature1[0m
Switched to branch 'feature1'
Your branch is ahead of 'origin/feature1' by 4 commits.
  (use "git push" to publish your local commits)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit checkout -b feature1_duplicate_for_merge feature1[0m
Switched to a new branch 'feature1_duplicate_for_merge'
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31mgit checkout feature1_duplicate_for_merge[0m
Already on 'feature1_duplicate_for_merge'
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31mgit merge master[0m
Auto-merging verilog/full_adder_cla.v
CONFLICT (content): Merge conflict in verilog/full_adder_cla.v
Automatic merge failed; fix conflicts and then commit the result.
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31mgit status[0m
On branch feature1_duplicate_for_merge
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Changes to be committed:
	[32mmodified:   verilog/carry_lookahead_adder.v[m

Unmerged paths:
  (use "git add <file>..." to mark resolution)
	[31mboth modified:   verilog/full_adder_cla.v[m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31mgit checkout --theirs verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31msed -i "s,_la,_lookahead_adder,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31msed -i "s,_arry,,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31msed -i "s,prev ,previous ,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31msed -i "s,reg,logic,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31mgit commit -a -m 'Merge branch "master" into feature1_duplicate_for_merge'[0m
[feature1_duplicate_for_merge  <HASH>] Merge branch "master" into feature1_duplicate_for_merge
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31mgit aliaslog2 feature1 master master_duplicate_for_merge feature1_duplicate_for_merge[0m
*   [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : Merge branch "master" into feature1_duplicate_for_merge [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1_duplicate_for_merge[m[33m)[m[m
[31m|[m[32m\[m  
[31m|[m [32m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : Merge branch "feature1" into master_duplicate_for_merge [m[33m ([m[1;32mmaster_duplicate_for_merge[m[33m)[m[m
[31m|[m [32m|[m[32m/[m[31m|[m 
[31m|[m [32m|[m[31m/[m  
[31m|[m[31m/[m[32m|[m   
* [32m|[m [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;32mfeature1[m[33m)[m[m
* [32m|[m [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
* [32m|[m [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
* [32m|[m [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
* [32m|[m [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
* [32m|[m [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
* [32m|[m [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
* [32m|[m [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
[34m|[m * [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : update of note - added a comment after endmodule (no conflict, no change from user1 at the same location) [m[33m ([m[1;31morigin/master[m[33m, [m[1;32mmaster_duplicate_for_merge_using_hash[m[33m, [m[1;32mmaster[m[33m)[m[m
[34m|[m * [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder) [m[m
[34m|[m * [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder) [m[m
[34m|[m * [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : note after endmodule (no conflict, no change from user1 at the same location) [m[m
[34m|[m * [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to cry_ (no conflict, only changed from user2) [m[m
[34m|[m[34m/[m  
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| rebase[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mrebase is used to integrate all the changes happend in between on the base branch (where the feature branch was forked off) into the feature branch[0m
[1;36mCMT:[0m [1;35mthe idea is to get a linear history, therefore the feature branch gets replaced by a 'new' feature branch with the same name, where each and every commit that was done on the 'old' feature branch is applied again in the same sequence on the top of the of the base branch[0m
[1;36mCMT:[0m [1;35mAll these commits will get a new commit hash id, and there is no easy way back to the state before the rebase[0m
[1;36mCMT:[0m [1;35mRECOMMENDATION: Automatically add a tag (or branch) pointing to the 'old' feature branch, to keep the history and have an easy way back.[0m
[1;36mCMT:[0m [1;35mPITFALL / IMPORTANT RULE: rebase must only be used to changes that no other user has seen before (only local changes by one user are allowed). REASON: rebase rewrites the history[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| create own branch for feature1 => feature1_duplicate_for_rebase and to rebase[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_merge][0m $ [1;31mgit checkout feature1[0m
Switched to branch 'feature1'
Your branch is ahead of 'origin/feature1' by 4 commits.
  (use "git push" to publish your local commits)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit checkout -b feature1_duplicate_for_rebase feature1[0m
Switched to a new branch 'feature1_duplicate_for_rebase'
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit checkout feature1_duplicate_for_rebase[0m
Already on 'feature1_duplicate_for_rebase'
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit rebase master[0m
Rebasing (1/8)Rebasing (2/8)Rebasing (3/8)Rebasing (4/8)Rebasing (5/8)Rebasing (6/8)Auto-merging verilog/full_adder_cla.v
CONFLICT (content): Merge conflict in verilog/full_adder_cla.v
error: could not apply <HASH>... reg to logic (conflicts with user2: c to carry_)
hint: Resolve all conflicts manually, mark them as resolved with
hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
hint: You can instead skip this commit: run "git rebase --skip".
hint: To abort and get back to the state before "git rebase", run "git rebase --abort".
Could not apply <HASH>... reg to logic (conflicts with user2: c to carry_)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit status[0m
[31minteractive rebase in progress; onto [m<HASH>
Last commands done (6 commands done):
   pick 0891fb2 changes to files
   pick 3edbbe3 reg to logic (conflicts with user2: c to carry_)
  (see more in file .git/rebase-merge/done)
Next commands to do (2 remaining commands):
   pick ece3e62 prev to previous in comment (conflicts with user2: c to carry_)
   pick 56ceb61 module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
  (use "git rebase --edit-todo" to view and edit)
You are currently rebasing branch 'feature1_duplicate_for_rebase' on '<HASH>'.
  (fix conflicts and then run "git rebase --continue")
  (use "git rebase --skip" to skip this patch)
  (use "git rebase --abort" to check out the original branch)

Unmerged paths:
  (use "git restore --staged <file>..." to unstage)
  (use "git add <file>..." to mark resolution)
	[31mboth modified:   verilog/full_adder_cla.v[m

no changes added to commit (use "git add" and/or "git commit -a")
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit aliaslog2 master feature1 feature1_duplicate_for_rebase[0m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : update of note - added a comment after endmodule (no conflict, no change from user1 at the same location) [m[33m ([m[1;31morigin/master[m[33m, [m[1;32mmaster_duplicate_for_merge_using_hash[m[33m, [m[1;32mmaster[m[33m)[m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : note after endmodule (no conflict, no change from user1 at the same location) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to cry_ (no conflict, only changed from user2) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;32mfeature1_duplicate_for_rebase[m[33m, [m[1;32mfeature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
[31m|[m[31m/[m  
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit diff[0m
[36mdiff --cc verilog/full_adder_cla.v[m
[36mindex b6cb9ae,93486c9..0000000[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@@ -1,12 -1,12 +1,22 @@@[m
[34;101m -module full_adder_cla ([m
[34;102m +module fa_carry_la ([m
[30m    input  wire a,[m
[30m    input  wire b,[m
[34;101m -  input  wire cp../ prev carry[m
[34;102m +  input  wire carry_p../ prev carry_arry[m
[30m    input  wire pp../ previous propagate[m
[30m    input  wire gp../ previous generate[m
[34;102m++<<<<<<< HEAD[m
[34;102m +  output reg  p,[m
[34;102m +  output reg  g,[m
[34;102m +  output reg  carry);[m
[34;102m++||||||| parent of 3edbbe3 (reg to logic (conflicts with user2: c to carry_))[m
[34;102m++  output reg  p,[m
[34;102m++  output reg  g,[m
[34;102m++  output reg  c);[m
[34;102m++=======[m
[34;102m+   output logic  p,[m
[34;102m+   output logic  g,[m
[34;102m+   output logic  c);[m
[34;102m++>>>>>>> 3edbbe3 (reg to logic (conflicts with user2: c to carry_))[m
[30m  [m
[30m    assign p = a ^ b../ propagate[m
[30m    assign g = a & b../ generate[m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| HINT: use checkout to obtain different versions of the code can be used but --theirs and --ours are exchanged as the base for the rebase if the branche to rebase onto !!![0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m


[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| theirs means the code of the branch to rebase in (feature1)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit checkout --theirs verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit diff HEAD verilog/full_adder_cla.v[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1,15 +1,15 @@[m
[34;101m-module fa_carry_la ([m
[34;102m+[m[34;102mmodule full_adder_cla ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[34;101m-  input  wire carry_p../ prev carry_arry[m
[34;102m+[m[34;102m  input  wire cp../ prev carry[m
[30m   input  wire pp../ previous propagate[m
[30m   input  wire gp../ previous generate[m
[34;101m-  output reg  p,[m
[34;101m-  output reg  g,[m
[34;101m-  output reg  carry);[m
[34;102m+[m[34;102m  output logic  p,[m
[34;102m+[m[34;102m  output logic  g,[m
[34;102m+[m[34;102m  output logic  c);[m
[30m [m
[30m   assign p = a ^ b../ propagate[m
[30m   assign g = a & b../ generate[m
[34;101m-  assign carry = gp | pp & carry_p;[m
[34;102m+[m[34;102m  assign c = gp | pp & cp;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodule[m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| ours means the code of the branch to merge to (master_duplicate_for_merge)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit checkout --ours verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit diff HEAD verilog/full_adder_cla.v[0m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| merge means the merged code of both - originally created by the merge[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit checkout --merge verilog/full_adder_cla.v[0m
Recreated 1 merge conflict
[1;36mCMT:[0m [1;35mCommit messages in merge comments are lost, instead ours/theirs/base is used => this seems to be a bug ?![0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit diff HEAD verilog/full_adder_cla.v[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -4,9 +4,19 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire carry_p../ prev carry_arry[m
[30m   input  wire pp../ previous propagate[m
[30m   input  wire gp../ previous generate[m
[34;102m+[m[34;102m<<<<<<< ours[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[34;102m+[m[34;102m||||||| base[m
[34;102m+[m[34;102m  output reg  p,[m
[34;102m+[m[34;102m  output reg  g,[m
[34;102m+[m[34;102m  output reg  c);[m
[34;102m+[m[34;102m=======[m
[34;102m+[m[34;102m  output logic  p,[m
[34;102m+[m[34;102m  output logic  g,[m
[34;102m+[m[34;102m  output logic  c);[m
[34;102m+[m[34;102m>>>>>>> theirs[m
[30m [m
[30m   assign p = a ^ b../ propagate[m
[30m   assign g = a & b../ generate[m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| aborting a rebase can be done at any stage during rebase[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit status[0m
[31minteractive rebase in progress; onto [m<HASH>
Last commands done (6 commands done):
   pick 0891fb2 changes to files
   pick 3edbbe3 reg to logic (conflicts with user2: c to carry_)
  (see more in file .git/rebase-merge/done)
Next commands to do (2 remaining commands):
   pick ece3e62 prev to previous in comment (conflicts with user2: c to carry_)
   pick 56ceb61 module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
  (use "git rebase --edit-todo" to view and edit)
You are currently rebasing branch 'feature1_duplicate_for_rebase' on '<HASH>'.
  (fix conflicts and then run "git rebase --continue")
  (use "git rebase --skip" to skip this patch)
  (use "git rebase --abort" to check out the original branch)

Unmerged paths:
  (use "git restore --staged <file>..." to unstage)
  (use "git add <file>..." to mark resolution)
	[31mboth modified:   verilog/full_adder_cla.v[m

no changes added to commit (use "git add" and/or "git commit -a")
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit rebase --abort[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit status[0m
On branch feature1_duplicate_for_rebase
nothing to commit, working tree clean

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| Add command that creates a tag before rebase operation starts (details to tags will be shown later). Branches would also be fine (matter of taste).[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mCMT:[0m [1;35mRECOMMENDATION: Good practice is to have a tag/branch name prefix for filtering these dummy tags/branches![0m
+ echo '[alias]'
+ echo aliasrebasewithtag = '"!bash' -c ''\''cd' -- '\"${GIT_PREFIX:-.}\";' set '-x;' set '-e;' git tag -a tag_before_rebase -m '"tag_before_rebase";' git rebase -- '\"$@\"'\''' '--"'
+ set +x

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| finish rebase by iteratively solving all conflicts[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mCMT:[0m [1;35mNote that during a rebase operation the each commit is applied in the same sequence as they were commited originially[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit aliasrebasewithtag master[0m
+ set -e
+ git tag -a tag_before_rebase -m tag_before_rebase
+ git rebase -- master
Rebasing (1/8)Rebasing (2/8)Rebasing (3/8)Rebasing (4/8)Rebasing (5/8)Rebasing (6/8)Auto-merging verilog/full_adder_cla.v
CONFLICT (content): Merge conflict in verilog/full_adder_cla.v
error: could not apply <HASH>... reg to logic (conflicts with user2: c to carry_)
hint: Resolve all conflicts manually, mark them as resolved with
hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
hint: You can instead skip this commit: run "git rebase --skip".
hint: To abort and get back to the state before "git rebase", run "git rebase --abort".
Could not apply <HASH>... reg to logic (conflicts with user2: c to carry_)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit aliaslog2 master feature1 feature1_duplicate_for_rebase tag_before_rebase[0m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : update of note - added a comment after endmodule (no conflict, no change from user1 at the same location) [m[33m ([m[1;31morigin/master[m[33m, [m[1;32mmaster_duplicate_for_merge_using_hash[m[33m, [m[1;32mmaster[m[33m)[m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : note after endmodule (no conflict, no change from user1 at the same location) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to cry_ (no conflict, only changed from user2) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;34mtag: [m[1;34mtag_before_rebase[m[33m, [m[1;32mfeature1_duplicate_for_rebase[m[33m, [m[1;32mfeature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
[31m|[m[31m/[m  
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| solving conflict (1/3)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit rebase --show-current-patch[0m
[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    reg to logic (conflicts with user2: c to carry_)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -4,9 +4,9 @@[m[30m [mmodule full_adder_cla ([m
[30m   input  wire cp../ prev carry[m
[30m   input  wire pp../ previous propagate[m
[30m   input  wire gp../ previous generate[m
[34;101m-  output reg  p,[m
[34;101m-  output reg  g,[m
[34;101m-  output reg  c);[m
[34;102m+[m[34;102m  output logic  p,[m
[34;102m+[m[34;102m  output logic  g,[m
[34;102m+[m[34;102m  output logic  c);[m
[30m [m
[30m   assign p = a ^ b../ propagate[m
[30m   assign g = a & b../ generate[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit checkout --ours verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31msed -i "s,reg,logic,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31msed -i "s,c),carry),g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31msed -i "s,carry_arry,carry,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit diff[0m
[36mdiff --cc verilog/full_adder_cla.v[m
[36mindex b6cb9ae,93486c9..0000000[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@@ -1,12 -1,12 +1,12 @@@[m
[34;101m -module full_adder_cla ([m
[34;102m +module fa_carry_la ([m
[30m    input  wire a,[m
[30m    input  wire b,[m
[34;101m-   input  wire carry_p../ prev carry_arry[m
[34;101m -  input  wire cp../ prev carry[m
[34;102m++  input  wire carry_p../ prev carry[m
[30m    input  wire pp../ previous propagate[m
[30m    input  wire gp../ previous generate[m
[34;101m-   output reg  p,[m
[34;101m-   output reg  g,[m
[34;101m-   output reg  carry);[m
[34;102m+   output logic  p,[m
[34;102m+   output logic  g,[m
[34;101m -  output logic  c);[m
[34;102m++  output logic  carry);[m
[30m  [m
[30m    assign p = a ^ b../ propagate[m
[30m    assign g = a & b../ generate[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit add verilog/full_adder_cla.v[0m
[1;36mCMT:[0m [1;35mbelow is a trick to avoid editor to pop up + modify message => required for continues flow in demonstration => usually interactive mode is fine[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mmv .git/rebase-merge/message .git/rebase-merge/message2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mecho 'REBASE CONFLICT 1/3: ' > .git/rebase-merge/message[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mcat .git/rebase-merge/message2 >> .git/rebase-merge/message[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mrm -rf .git/rebase-merge/message2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mGIT_EDITOR=true git rebase --continue[0m
[detached HEAD  <HASH>] REBASE CONFLICT 1/3: reg to logic (conflicts with user2: c to carry_)
 1 file changed, 4 insertions(+), 4 deletions(-)
Rebasing (7/8)Auto-merging verilog/full_adder_cla.v
CONFLICT (content): Merge conflict in verilog/full_adder_cla.v
error: could not apply <HASH>... prev to previous in comment (conflicts with user2: c to carry_)
hint: Resolve all conflicts manually, mark them as resolved with
hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
hint: You can instead skip this commit: run "git rebase --skip".
hint: To abort and get back to the state before "git rebase", run "git rebase --abort".
Could not apply <HASH>... prev to previous in comment (conflicts with user2: c to carry_)

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| solving conflict (2/3)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit rebase --show-current-patch[0m
[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    prev to previous in comment (conflicts with user2: c to carry_)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1,7 +1,7 @@[m
[30m module full_adder_cla ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[34;101m-  input  wire cp../ prev carry[m
[34;102m+[m[34;102m  input  wire cp../ previous carry[m
[30m   input  wire pp../ previous propagate[m
[30m   input  wire gp../ previous generate[m
[30m   output logic  p,[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit checkout --ours verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31msed -i "s,prev ,previous ,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit diff[0m
[36mdiff --cc verilog/full_adder_cla.v[m
[36mindex 671ca75,252e35c..0000000[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@@ -1,7 -1,7 +1,7 @@@[m
[34;101m -module full_adder_cla ([m
[34;102m +module fa_carry_la ([m
[30m    input  wire a,[m
[30m    input  wire b,[m
[34;101m-   input  wire carry_p../ prev carry[m
[34;101m -  input  wire cp../ previous carry[m
[34;102m++  input  wire carry_p../ previous carry[m
[30m    input  wire pp../ previous propagate[m
[30m    input  wire gp../ previous generate[m
[30m    output logic  p,[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit add verilog/full_adder_cla.v[0m
[1;36mCMT:[0m [1;35mbelow is a trick to avoid editor to pop up + modify message => required for continues flow in demonstration => usually interactive mode is fine[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mmv .git/rebase-merge/message .git/rebase-merge/message2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mecho 'REBASE CONFLICT 2/3: ' > .git/rebase-merge/message[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mcat .git/rebase-merge/message2 >> .git/rebase-merge/message[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mrm -rf .git/rebase-merge/message2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mGIT_EDITOR=true git rebase --continue[0m
[detached HEAD  <HASH>] REBASE CONFLICT 2/3: prev to previous in comment (conflicts with user2: c to carry_)
 1 file changed, 1 insertion(+), 1 deletion(-)
Rebasing (8/8)Auto-merging verilog/full_adder_cla.v
CONFLICT (content): Merge conflict in verilog/full_adder_cla.v
error: could not apply <HASH>... module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
hint: Resolve all conflicts manually, mark them as resolved with
hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
hint: You can instead skip this commit: run "git rebase --skip".
hint: To abort and get back to the state before "git rebase", run "git rebase --abort".
Could not apply <HASH>... module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| solving conflict (3/3)[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit rebase --show-current-patch[0m
[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1,4 +1,4 @@[m
[34;101m-module full_adder_cla ([m
[34;102m+[m[34;102mmodule full_adder_carry_lookahead_adder ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire cp../ previous carry[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit checkout --ours verilog/full_adder_cla.v[0m
Updated 1 path from the index
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31msed -i "s,_la,_lookahead_adder,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mgit add verilog/full_adder_cla.v[0m
[1;36mCMT:[0m [1;35mbelow is a trick to avoid editor to pop up + modify message => required for continues flow in demonstration => usually interactive mode is fine[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mmv .git/rebase-merge/message .git/rebase-merge/message2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mecho 'REBASE CONFLICT 3/3: ' > .git/rebase-merge/message[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mcat .git/rebase-merge/message2 >> .git/rebase-merge/message[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mrm -rf .git/rebase-merge/message2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[HEAD][0m $ [1;31mGIT_EDITOR=true git rebase --continue[0m
[detached HEAD  <HASH>] REBASE CONFLICT 3/3: module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
 1 file changed, 1 insertion(+), 1 deletion(-)
[KSuccessfully rebased and updated refs/heads/feature1_duplicate_for_rebase.

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| show graph[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit aliaslog2 master feature1 feature1_duplicate_for_rebase[0m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : REBASE CONFLICT 3/3: module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1_duplicate_for_rebase[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : REBASE CONFLICT 2/3: prev to previous in comment (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : REBASE CONFLICT 1/3: reg to logic (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : update of note - added a comment after endmodule (no conflict, no change from user1 at the same location) [m[33m ([m[1;31morigin/master[m[33m, [m[1;32mmaster_duplicate_for_merge_using_hash[m[33m, [m[1;32mmaster[m[33m)[m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : note after endmodule (no conflict, no change from user1 at the same location) [m[m
* [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to cry_ (no conflict, only changed from user2) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;34mtag: [m[1;34mtag_before_rebase[m[33m, [m[1;32mfeature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
[31m|[m[31m/[m  
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| compare to merge - no differences are expected ![0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit aliaslogall2[0m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : REBASE CONFLICT 3/3: module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1_duplicate_for_rebase[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : REBASE CONFLICT 2/3: prev to previous in comment (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : REBASE CONFLICT 1/3: reg to logic (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
[31m|[m *   [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : Merge branch "master" into feature1_duplicate_for_merge [m[33m ([m[1;32mfeature1_duplicate_for_merge[m[33m)[m[m
[31m|[m [32m|[m[31m\[m  
[31m|[m [32m|[m[31m/[m  
[31m|[m[31m/[m[32m|[m   
[31m|[m [32m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : Merge branch "feature1" into master_duplicate_for_merge [m[33m ([m[1;32mmaster_duplicate_for_merge[m[33m)[m[m
[31m|[m [32m|[m[31m/[m[32m|[m 
[31m|[m[31m/[m[32m|[m[32m/[m  
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;34mtag: [m[1;34mtag_before_rebase[m[33m, [m[1;32mfeature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
[31m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
* [35m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : update of note - added a comment after endmodule (no conflict, no change from user1 at the same location) [m[33m ([m[1;31morigin/master[m[33m, [m[1;32mmaster_duplicate_for_merge_using_hash[m[33m, [m[1;32mmaster[m[33m)[m[m
* [35m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [35m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder) [m[m
* [35m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : note after endmodule (no conflict, no change from user1 at the same location) [m[m
* [35m|[m [33m<HASH>[m - [34muser2[m, [32m<DATE> <TIME>[m : c to cry_ (no conflict, only changed from user2) [m[m
[35m|[m[35m/[m  
[35m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : On master: another change to cra [m[33m ([m[1;35mrefs/stash[m[33m)[m[m
[35m|[m[35m/[m[1;31m|[m 
[35m|[m * [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : index on master: be9fdf2 adding git ignores [m[m
[35m|[m[35m/[m  
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit diff master_duplicate_for_merge..feature1_duplicate_for_rebase[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit diff feature1_duplicate_for_merge..feature1_duplicate_for_rebase[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| tags[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add/delete local tags[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1_duplicate_for_rebase][0m $ [1;31mgit checkout master[0m
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit tag -a mytagtoberemoved -m "my tag to be removed"[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit tag -d mytagtoberemoved[0m
Deleted tag 'mytagtoberemoved' (was <HASH>)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit tag -a mytag_feature1 feature1 -m "my tag feature1 local only"[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit tag -a mytag_master_local_only -m "my tag master local only"[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit tag -a mytag_master_shared_with_remote -m "my tag to be shared with remote"[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| list local tags[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit tag[0m
mytag_feature1
mytag_master_local_only
mytag_master_shared_with_remote
tag_before_rebase
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show-ref --tags[0m
<HASH> refs/tags/mytag_feature1
<HASH> refs/tags/mytag_master_local_only
<HASH> refs/tags/mytag_master_shared_with_remote
<HASH> refs/tags/tag_before_rebase

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| list remote tags[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit ls-remote --tags[0m
From ../test/local_shared_repo

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| share tags[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit push origin tag mytag_master_shared_with_remote[0m
To ../test/local_shared_repo
 * [new tag]         mytag_master_shared_with_remote -> mytag_master_shared_with_remote
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show-ref --tags[0m
<HASH> refs/tags/mytag_feature1
<HASH> refs/tags/mytag_master_local_only
<HASH> refs/tags/mytag_master_shared_with_remote
<HASH> refs/tags/tag_before_rebase
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit ls-remote --tags[0m
From ../test/local_shared_repo
<HASH>	refs/tags/mytag_master_shared_with_remote
<HASH>	refs/tags/mytag_master_shared_with_remote^{}

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| get tags from remote for user2[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mpwd[0m
../test/user1_sb1
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mcd ../user2_sb1[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show-ref --tags[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit ls-remote --tags[0m
From ../test/local_shared_repo
<HASH>	refs/tags/mytag_master_shared_with_remote
<HASH>	refs/tags/mytag_master_shared_with_remote^{}
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit fetch --tags[0m
From ../test/local_shared_repo
 * [new tag]         mytag_master_shared_with_remote -> mytag_master_shared_with_remote

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| delete remote tags via user2 (just to show how to do it but this is not recommended !!!)[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit tag -a mytag_master_shared_to_remove -m "my tag master shared to be remove"[0m
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit push origin tag mytag_master_shared_to_remove[0m
To ../test/local_shared_repo
 * [new tag]         mytag_master_shared_to_remove -> mytag_master_shared_to_remove
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show-ref --tags[0m
<HASH> refs/tags/mytag_master_shared_to_remove
<HASH> refs/tags/mytag_master_shared_with_remote
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit ls-remote --tags[0m
From ../test/local_shared_repo
<HASH>	refs/tags/mytag_master_shared_to_remove
<HASH>	refs/tags/mytag_master_shared_to_remove^{}
<HASH>	refs/tags/mytag_master_shared_with_remote
<HASH>	refs/tags/mytag_master_shared_with_remote^{}
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit push --delete origin mytag_master_shared_to_remove[0m
To ../test/local_shared_repo
 - [deleted]         mytag_master_shared_to_remove
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show-ref --tags[0m
<HASH> refs/tags/mytag_master_shared_to_remove
<HASH> refs/tags/mytag_master_shared_with_remote
[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit ls-remote --tags[0m
From ../test/local_shared_repo
<HASH>	refs/tags/mytag_master_shared_with_remote
<HASH>	refs/tags/mytag_master_shared_with_remote^{}

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| update removed tags for user1[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser2[0m @ [38;5;67;1m../test/user2_sb1[0m [38;5;55;1m[master][0m $ [1;31mcd ../user1_sb1[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show-ref --tags[0m
<HASH> refs/tags/mytag_feature1
<HASH> refs/tags/mytag_master_local_only
<HASH> refs/tags/mytag_master_shared_with_remote
<HASH> refs/tags/tag_before_rebase
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit ls-remote --tags[0m
From ../test/local_shared_repo
<HASH>	refs/tags/mytag_master_shared_with_remote
<HASH>	refs/tags/mytag_master_shared_with_remote^{}
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit fetch --tags[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show-ref --tags[0m
<HASH> refs/tags/mytag_feature1
<HASH> refs/tags/mytag_master_local_only
<HASH> refs/tags/mytag_master_shared_with_remote
<HASH> refs/tags/tag_before_rebase
[1;36mCMT:[0m [1;35mupdate does not work ! manual rework and exact knowledge is required to update here[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit fetch --prune --prune-tags[0m
From ../test/local_shared_repo
 - [deleted]         (none)     -> mytag_feature1
 - [deleted]         (none)     -> mytag_master_local_only
 - [deleted]         (none)     -> tag_before_rebase
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show-ref --tags[0m
<HASH> refs/tags/mytag_master_shared_with_remote
[1;36mCMT:[0m [1;35mPITFALL: all local tags that do not exist remote are removed[0m
[1;36mCMT:[0m [1;35mRECOMMENDATION: never ever delete (/move/rename) remote tags unless local tags are not relevant at all[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| worktree (SOLUTION 4)[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| list worktrees[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add worktree[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mtree .git/ > tree_of_.git_dir_before_worktree[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree add ../user1_sb2 feature1[0m
Preparing worktree (checking out 'feature1')
HEAD is now at <HASH> module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mcat ../user1_sb2/.git[0m
gitdir: ../test/user1_sb1/.git/worktrees/user1_sb2
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mtree .git/ > tree_of_.git_dir_after_worktree[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mdiff tree_of_.git_dir_before_worktree tree_of_.git_dir_after_worktree[0m
317,333c317,342
< â””â”€â”€ refs
<     â”œâ”€â”€ heads
<     â”‚Â Â  â”œâ”€â”€ feature1
<     â”‚Â Â  â”œâ”€â”€ feature1_duplicate_for_merge
<     â”‚Â Â  â”œâ”€â”€ feature1_duplicate_for_rebase
<     â”‚Â Â  â”œâ”€â”€ master
<     â”‚Â Â  â”œâ”€â”€ master_duplicate_for_merge
<     â”‚Â Â  â””â”€â”€ master_duplicate_for_merge_using_hash
<     â”œâ”€â”€ remotes
<     â”‚Â Â  â”œâ”€â”€ local_shared_repo2
<     â”‚Â Â  â”‚Â Â  â””â”€â”€ master
<     â”‚Â Â  â””â”€â”€ origin
<     â”‚Â Â      â”œâ”€â”€ feature1
<     â”‚Â Â      â””â”€â”€ master
<     â”œâ”€â”€ stash
<     â””â”€â”€ tags
<         â””â”€â”€ mytag_master_shared_with_remote
---
> â”œâ”€â”€ refs
> â”‚Â Â  â”œâ”€â”€ heads
> â”‚Â Â  â”‚Â Â  â”œâ”€â”€ feature1
> â”‚Â Â  â”‚Â Â  â”œâ”€â”€ feature1_duplicate_for_merge
> â”‚Â Â  â”‚Â Â  â”œâ”€â”€ feature1_duplicate_for_rebase
> â”‚Â Â  â”‚Â Â  â”œâ”€â”€ master
> â”‚Â Â  â”‚Â Â  â”œâ”€â”€ master_duplicate_for_merge
> â”‚Â Â  â”‚Â Â  â””â”€â”€ master_duplicate_for_merge_using_hash
> â”‚Â Â  â”œâ”€â”€ remotes
> â”‚Â Â  â”‚Â Â  â”œâ”€â”€ local_shared_repo2
> â”‚Â Â  â”‚Â Â  â”‚Â Â  â””â”€â”€ master
> â”‚Â Â  â”‚Â Â  â””â”€â”€ origin
> â”‚Â Â  â”‚Â Â      â”œâ”€â”€ feature1
> â”‚Â Â  â”‚Â Â      â””â”€â”€ master
> â”‚Â Â  â”œâ”€â”€ stash
> â”‚Â Â  â””â”€â”€ tags
> â”‚Â Â      â””â”€â”€ mytag_master_shared_with_remote
> â””â”€â”€ worktrees
>     â””â”€â”€ user1_sb2
>         â”œâ”€â”€ commondir
>         â”œâ”€â”€ gitdir
>         â”œâ”€â”€ HEAD
>         â”œâ”€â”€ index
>         â”œâ”€â”€ logs
>         â”‚Â Â  â””â”€â”€ HEAD
>         â””â”€â”€ ORIG_HEAD
335c344
< 133 directories, 200 files
---
> 136 directories, 206 files

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add worktree of branch already in use is not possible ![0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mCMT:[0m [1;35meach worktree must be bound to unique reference[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree add ../user1_sb3 feature1[0m
Preparing worktree (checking out 'feature1')
fatal: 'feature1' is already used by worktree at '../test/user1_sb2'

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| create branch without checking it out at the same time[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit branch feature1a feature1[0m

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| use duplicated branch for new worktree[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree add ../user1_sb3 feature1a[0m
Preparing worktree (checking out 'feature1a')
HEAD is now at <HASH> module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
../test/user1_sb3  56ceb61 [feature1a]

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| remove worktree[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
../test/user1_sb3  56ceb61 [feature1a]
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree remove ../user1_sb3[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
[1;36mCMT:[0m [1;35musually this breaks as there are local uncommitted changes and/or local untracked files, use option -f instead[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| remove worktree with changes[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree add ../user1_sb3 feature1a[0m
Preparing worktree (checking out 'feature1a')
HEAD is now at <HASH> module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mcd ../user1_sb3[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mcat test > test[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mgit worktree remove ../user1_sb3[0m
fatal: '../user1_sb3' contains modified or untracked files, use --force to delete it
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
../test/user1_sb3  56ceb61 [feature1a]
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mcd ../user1_sb2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree remove ../user1_sb3[0m
fatal: '../user1_sb3' contains modified or untracked files, use --force to delete it
[1;36mCMT:[0m [1;35mfails because there is a local file that is not tracked[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
../test/user1_sb3  56ceb61 [feature1a]
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mcd ../user1_sb3[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mecho 'some more changes' >> verilog/full_adder.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mgit status[0m
On branch feature1a
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   verilog/full_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mtest[m

no changes added to commit (use "git add" and/or "git commit -a")
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mcd ../user1_sb2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree remove ../user1_sb3[0m
fatal: '../user1_sb3' contains modified or untracked files, use --force to delete it
[1;36mCMT:[0m [1;35mfails because there is a local file that is not tracked and a changed file (changed file alone would also be enough !)[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
../test/user1_sb3  56ceb61 [feature1a]
[1;36mCMT:[0m [1;35mfinally force removal does the trick[0m
[1;36mCMT:[0m [1;35mRECOMMENDATAION: Double check contents before delete as there is no way to recover from this using git.[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree remove --force ../user1_sb3[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| alternative use stash to save changes before removing worktree[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree add ../user1_sb3 feature1a[0m
Preparing worktree (checking out 'feature1a')
HEAD is now at <HASH> module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mcd ../user1_sb3[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mdd if=/dev/urandom bs=1024 count=10000 of=test_10MB conv=notrunc[0m
10000+0 records in
10000+0 records out
10240000 bytes (10 MB, 9.8 MiB) copied, 0.309394 s, 33.1 MB/s
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mecho 'some more changes' >> verilog/full_adder.v[0m
[1;36mCMT:[0m [1;35muse stash to save all changes including untracked files[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mdu -sh ../*[0m
394K	../local_shared_repo
177K	../local_shared_repo2
1.3M	../user1_sb1
48K	../user1_sb2
9.9M	../user1_sb3
454K	../user2_sb1
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mgit stash --include-untracked[0m
Saved working directory and index state WIP on feature1a: 56ceb61 module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mdu -sh ../*[0m
402K	../local_shared_repo
177K	../local_shared_repo2
1.3M	../user1_sb1
48K	../user1_sb2
44K	../user1_sb3
486K	../user2_sb1
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb3[0m [38;5;55;1m[feature1a][0m $ [1;31mcd ../user1_sb2[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit status[0m
On branch feature1
Your branch is ahead of 'origin/feature1' by 4 commits.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree remove ../user1_sb3[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
[1;36mCMT:[0m [1;35mrestore stored data on different worktree including untracked files (--include-untracked)[0m
[1;36mCMT:[0m [1;35mnote that this is also possible with tracked only (without option)[0m
[1;36mCMT:[0m [1;35mnote that this is also possible with untracked only (--only-untracked)[0m
[1;36mCMT:[0m [1;35mnote that this is also possible without removing the worktree => transfer changes between worktrees can be done by this method[0m
[1;36mCMT:[0m [1;35mkeep 1MB file for later usage[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit stash apply[0m
On branch feature1
Your branch is ahead of 'origin/feature1' by 4 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   verilog/full_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mtest_10MB[m

no changes added to commit (use "git add" and/or "git commit -a")
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit status[0m
On branch feature1
Your branch is ahead of 'origin/feature1' by 4 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   verilog/full_adder.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mtest_10MB[m

no changes added to commit (use "git add" and/or "git commit -a")

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| alternative remove worktree via remove[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree add ../user1_sb3 feature1a[0m
Preparing worktree (checking out 'feature1a')
HEAD is now at <HASH> module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mrm -rf ../user1_sb3[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]
../test/user1_sb3  56ceb61 [feature1a] prunable
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree prune[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mgit worktree list[0m
../test/user1_sb1  1f2a34c [master]
../test/user1_sb2  56ceb61 [feature1]

[1;36mH3 : [0m [1;34m.-----------------------------[0m
[1;36mH3 : [0m [1;34m| cleanup[0m
[1;36mH3 : [0m [1;34m'-----------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb2[0m [38;5;55;1m[feature1][0m $ [1;31mcd ../user1_sb1[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit worktree remove --force ../user1_sb2[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| list files in database sorted by size[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| for a specific reference (e.g. HEAD)[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit ls-tree -r -l --abbrev --full-name HEAD | sort -n -r -k 4 | head -n 10[0m
100644 blob aaac048    1232	shared.gitconfig
100644 blob 35ce6c4     649	verilog/carry_lookahead_adder.v
100644 blob b6cb9ae     374	verilog/full_adder_cla.v
100644 blob 5600eb9     369	verilog/carry_ripple_adder.v
100644 blob 0b105fd     159	verilog/full_adder.v
100644 blob 57d3e02     121	verilog/halve_adder.v
100644 blob 6b616dc      94	.gitignore
100644 blob e7584c6      36	readme.txt
120000 blob 46cd2eb      31	links/cra.sv
120000 blob 498cb6f      24	links/ha.sv

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| for the complete database[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit rev-list --objects --all | git cat-file --batch-check='%(objectsize) %(rest)' | sort -k1 -h | tail -n 10[0m
369 verilog/carry_ripple_adder.v
374 verilog/full_adder_cla.v
375 verilog/full_adder_cla.v
379 verilog/full_adder_cla.v
392 verilog/full_adder_cla.v
447 
601 verilog/carry_lookahead_adder.v
649 verilog/carry_lookahead_adder.v
1232 shared.gitconfig
10240000 test_10MB

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| trigger garbage collection (get rid of 10MB file in stash from untracked files)[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit stash drop[0m
Dropped refs/stash@{0} (<HASH>)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit gc[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit rev-list --objects --all | git cat-file --batch-check='%(objectsize) %(rest)' | sort -k1 -h | tail -n 10[0m
355 
358 verilog/full_adder_cla.v
369 verilog/carry_ripple_adder.v
374 verilog/full_adder_cla.v
375 verilog/full_adder_cla.v
379 verilog/full_adder_cla.v
392 verilog/full_adder_cla.v
601 verilog/carry_lookahead_adder.v
649 verilog/carry_lookahead_adder.v
1232 shared.gitconfig
[1;36mCMT:[0m [1;35mATTENTION: Be careful with stashing untracked files. All files in the workspace would get included to the git repository and so could then increase the repository size massively.[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| list files[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit ls-files[0m
.gitignore
commit_message_test.file
empty_folder/.placeholder
links/cra.sv
links/fa.sv
links/ha.sv
readme.txt
shared.gitconfig
verilog/carry_lookahead_adder.v
verilog/carry_ripple_adder.v
verilog/full_adder.v
verilog/full_adder_cla.v
verilog/halve_adder.v
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mcd verilog[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[master][0m $ [1;31mgit ls-tree -r master --name-only[0m
carry_lookahead_adder.v
carry_ripple_adder.v
full_adder.v
full_adder_cla.v
halve_adder.v
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[master][0m $ [1;31mgit ls-tree -r master --name-only --full-tree[0m
.gitignore
commit_message_test.file
empty_folder/.placeholder
links/cra.sv
links/fa.sv
links/ha.sv
readme.txt
shared.gitconfig
verilog/carry_lookahead_adder.v
verilog/carry_ripple_adder.v
verilog/full_adder.v
verilog/full_adder_cla.v
verilog/halve_adder.v
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[master][0m $ [1;31mcd ..[0m
+ echo '[alias]'
+ echo aliasfindall = '"!bash' -c ''\''cd' -- '\"${GIT_PREFIX:-.}\";' set '-x;' set '-e;' git ls-tree -r HEAD --name-only --full-tree '|' grep -- '\"$@\"'\''' '--"'
+ set +x
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mcd verilog[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[master][0m $ [1;31mgit aliasfindall adder[0m
+ set -e
+ git ls-tree -r HEAD --name-only --full-tree
+ grep -- adder
verilog/carry_lookahead_adder.v
verilog/carry_ripple_adder.v
verilog/full_adder.v
verilog/full_adder_cla.v
verilog/halve_adder.v
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1/verilog[0m [38;5;55;1m[master][0m $ [1;31mcd ..[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit aliasfindall adder[0m
+ set -e
+ git ls-tree -r HEAD --name-only --full-tree
+ grep -- adder
verilog/carry_lookahead_adder.v
verilog/carry_ripple_adder.v
verilog/full_adder.v
verilog/full_adder_cla.v
verilog/halve_adder.v

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| search for contents[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit grep carry[0m
[35mverilog/carry_ripple_adder.v[m[36m:[mmodule [1;31mcarry[m_ripple_adder
[35mverilog/full_adder_cla.v[m[36m:[mmodule fa_[1;31mcarry[m_la (
[35mverilog/full_adder_cla.v[m[36m:[m  input  wire [1;31mcarry[m_p../ prev [1;31mcarry[m_arry
[35mverilog/full_adder_cla.v[m[36m:[m  output reg  [1;31mcarry[m);
[35mverilog/full_adder_cla.v[m[36m:[m  assign [1;31mcarry[m = gp | pp & [1;31mcarry[m_p;

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| cat contents of file at reference[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show HEAD:verilog/full_adder_cla.v[0m
module fa_carry_la (
  input  wire a,
  input  wire b,
  input  wire carry_p../ prev carry_arry
  input  wire pp../ previous propagate
  input  wire gp../ previous generate
  output reg  p,
  output reg  g,
  output reg  carry);

  assign p = a ^ b../ propagate
  assign g = a & b../ generate
  assign carry = gp | pp & carry_p;

endmodul../ some commen../ some note
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show master:verilog/full_adder_cla.v[0m
module fa_carry_la (
  input  wire a,
  input  wire b,
  input  wire carry_p../ prev carry_arry
  input  wire pp../ previous propagate
  input  wire gp../ previous generate
  output reg  p,
  output reg  g,
  output reg  carry);

  assign p = a ^ b../ propagate
  assign g = a & b../ generate
  assign carry = gp | pp & carry_p;

endmodul../ some commen../ some note
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show feature1^^:verilog/full_adder_cla.v[0m
module full_adder_cla (
  input  wire a,
  input  wire b,
  input  wire cp../ prev carry
  input  wire pp../ previous propagate
  input  wire gp../ previous generate
  output logic  p,
  output logic  g,
  output logic  c);

  assign p = a ^ b../ propagate
  assign g = a & b../ generate
  assign c = gp | pp & cp;

endmodule
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit show 56ceb61b4b1a830634a6352565e12aced48ae1ef:verilog/full_adder_cla.v[0m
module full_adder_carry_lookahead_adder (
  input  wire a,
  input  wire b,
  input  wire cp../ previous carry
  input  wire pp../ previous propagate
  input  wire gp../ previous generate
  output logic  p,
  output logic  g,
  output logic  c);

  assign p = a ^ b../ propagate
  assign g = a & b../ generate
  assign c = gp | pp & cp;

endmodule

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| blame[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit blame verilog/full_adder_cla.v[0m
de407475 (user2 <DATE> <TIME> +0200  1) module fa_carry_la (
^0b7346e (user1 <DATE> <TIME> +0200  2)   input  wire a,
^0b7346e (user1 <DATE> <TIME> +0200  3)   input  wire b,
de407475 (user2 <DATE> <TIME> +0200  4)   input  wire carry_p../ prev carry_arry
^0b7346e (user1 <DATE> <TIME> +0200  5)   input  wire pp../ previous propagate
^0b7346e (user1 <DATE> <TIME> +0200  6)   input  wire gp../ previous generate
^0b7346e (user1 <DATE> <TIME> +0200  7)   output reg  p,
^0b7346e (user1 <DATE> <TIME> +0200  8)   output reg  g,
de407475 (user2 <DATE> <TIME> +0200  9)   output reg  carry);
^0b7346e (user1 <DATE> <TIME> +0200 10) 
^0b7346e (user1 <DATE> <TIME> +0200 11)   assign p = a ^ b../ propagate
^0b7346e (user1 <DATE> <TIME> +0200 12)   assign g = a & b../ generate
de407475 (user2 <DATE> <TIME> +0200 13)   assign carry = gp | pp & carry_p;
^0b7346e (user1 <DATE> <TIME> +0200 14) 
1f2a34c2 (user2 <DATE> <TIME> +0200 15) endmodul../ some commen../ some note
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,previous ,prev ,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit blame verilog/full_adder_cla.v[0m
de407475 (user2             <DATE> <TIME> +0200  1) module fa_carry_la (
^0b7346e (user1             <DATE> <TIME> +0200  2)   input  wire a,
^0b7346e (user1             <DATE> <TIME> +0200  3)   input  wire b,
de407475 (user2             <DATE> <TIME> +0200  4)   input  wire carry_p../ prev carry_arry
00000000 (Not Committed Yet <DATE> <TIME> +0200  5)   input  wire pp../ prev propagate
00000000 (Not Committed Yet <DATE> <TIME> +0200  6)   input  wire gp../ prev generate
^0b7346e (user1             <DATE> <TIME> +0200  7)   output reg  p,
^0b7346e (user1             <DATE> <TIME> +0200  8)   output reg  g,
de407475 (user2             <DATE> <TIME> +0200  9)   output reg  carry);
^0b7346e (user1             <DATE> <TIME> +0200 10) 
^0b7346e (user1             <DATE> <TIME> +0200 11)   assign p = a ^ b../ propagate
^0b7346e (user1             <DATE> <TIME> +0200 12)   assign g = a & b../ generate
de407475 (user2             <DATE> <TIME> +0200 13)   assign carry = gp | pp & carry_p;
^0b7346e (user1             <DATE> <TIME> +0200 14) 
1f2a34c2 (user2             <DATE> <TIME> +0200 15) endmodul../ some commen../ some note
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit blame HEAD verilog/full_adder_cla.v[0m
de407475 (user2 <DATE> <TIME> +0200  1) module fa_carry_la (
^0b7346e (user1 <DATE> <TIME> +0200  2)   input  wire a,
^0b7346e (user1 <DATE> <TIME> +0200  3)   input  wire b,
de407475 (user2 <DATE> <TIME> +0200  4)   input  wire carry_p../ prev carry_arry
^0b7346e (user1 <DATE> <TIME> +0200  5)   input  wire pp../ previous propagate
^0b7346e (user1 <DATE> <TIME> +0200  6)   input  wire gp../ previous generate
^0b7346e (user1 <DATE> <TIME> +0200  7)   output reg  p,
^0b7346e (user1 <DATE> <TIME> +0200  8)   output reg  g,
de407475 (user2 <DATE> <TIME> +0200  9)   output reg  carry);
^0b7346e (user1 <DATE> <TIME> +0200 10) 
^0b7346e (user1 <DATE> <TIME> +0200 11)   assign p = a ^ b../ propagate
^0b7346e (user1 <DATE> <TIME> +0200 12)   assign g = a & b../ generate
de407475 (user2 <DATE> <TIME> +0200 13)   assign carry = gp | pp & carry_p;
^0b7346e (user1 <DATE> <TIME> +0200 14) 
1f2a34c2 (user2 <DATE> <TIME> +0200 15) endmodul../ some commen../ some note

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| log follow[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mfor single files log follow can be used to track changes[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mGIT_PAGER=cat git log --follow -p verilog/full_adder_cla.v[0m
[33mcommit <HASH>[33m
Author: user2 <user2@domain>
Date:   <DATE_TIME>

    update of note - added a comment after endmodule (no conflict, no change from user1 at the same location)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule fa_carry_la ([m
[30m   assign g = a & b../ generate[m
[30m   assign carry = gp | pp & carry_p;[m
[30m [m
[34;101m-endmodul../ some note[m
[34;102m+[m[34;102mendmodul../ some commen../ some note[m

[33mcommit <HASH>[33m
Author: user2 <user2@domain>
Date:   <DATE_TIME>

    c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1,15 +1,15 @@[m
[34;101m-module fa_cla ([m
[34;102m+[m[34;102mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[34;101m-  input  wire cp../ prev carry[m
[34;102m+[m[34;102m  input  wire carry_p../ prev carry_arry[m
[30m   input  wire pp../ previous propagate[m
[30m   input  wire gp../ previous generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[34;101m-  output reg  c);[m
[34;102m+[m[34;102m  output reg  carry);[m
[30m [m
[30m   assign p = a ^ b../ propagate[m
[30m   assign g = a & b../ generate[m
[34;101m-  assign c = gp | pp & cp;[m
[34;102m+[m[34;102m  assign carry = gp | pp & carry_p;[m
[30m [m
[30m endmodul../ some note[m

[33mcommit <HASH>[33m
Author: user2 <user2@domain>
Date:   <DATE_TIME>

    module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1,4 +1,4 @@[m
[34;101m-module full_adder_cla ([m
[34;102m+[m[34;102mmodule fa_cla ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire cp../ prev carry[m

[33mcommit <HASH>[33m
Author: user2 <user2@domain>
Date:   <DATE_TIME>

    note after endmodule (no conflict, no change from user1 at the same location)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule full_adder_cla ([m
[30m   assign g = a & b../ generate[m
[30m   assign c = gp | pp & cp;[m
[30m [m
[34;101m-endmodule[m
[34;102m+[m[34;102mendmodul../ some note[m

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    initial commit

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mnew file mode 100644[m
[36mindex <HASH>..<HASH>[m
[36m--- /dev/null[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -0,0 +1,15 @@[m
[34;102m+[m[34;102mmodule full_adder_cla ([m
[34;102m+[m[34;102m  input  wire a,[m
[34;102m+[m[34;102m  input  wire b,[m
[34;102m+[m[34;102m  input  wire cp../ prev carry[m
[34;102m+[m[34;102m  input  wire pp../ previous propagate[m
[34;102m+[m[34;102m  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  output reg  p,[m
[34;102m+[m[34;102m  output reg  g,[m
[34;102m+[m[34;102m  output reg  c);[m
[34;102m+[m
[34;102m+[m[34;102m  assign p = a ^ b../ propagate[m
[34;102m+[m[34;102m  assign g = a & b../ generate[m
[34;102m+[m[34;102m  assign c = gp | pp & cp;[m
[34;102m+[m
[34;102m+[m[34;102mendmodule[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mGIT_PAGER=cat git log --follow -p -w -U0 --word-diff-regex=[^[:space:]] verilog/full_adder_cla.v[0m
[33mcommit <HASH>[33m
Author: user2 <user2@domain>
Date:   <DATE_TIME>

    update of note - added a comment after endmodule (no conflict, no change from user1 at the same location)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -15 +15 @@[m[30m [mmodule fa_carry_la ([m
[30mendmodul../ some [m[34;102m{+commen../ some+}[m[30m note[m

[33mcommit <HASH>[33m
Author: user2 <user2@domain>
Date:   <DATE_TIME>

    c to carry_ (conflicts with user1: reg to logic / prev to previous / full_adder_cla to full_adder_carry_lookahead_adder)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1 +1 @@[m
[30mmodule fa_c[m[34;102m{+arry_+}[m[30mla ([m
[34;105m@@ -4 +4 @@[m[30m [mmodule fa_cla ([m
[30m  input  wire c[m[34;102m{+arry_+}[m[30mp../ prev carry[m[34;102m{+_arry+}[m
[34;105m@@ -9 +9 @@[m[30m [mmodule fa_cla ([m
[30m  output reg  c[m[34;102m{+arry+}[m[30m);[m
[34;105m@@ -13 +13 @@[m[30m [mmodule fa_cla ([m
[30m  assign c[m[34;102m{+arry+}[m[30m = gp | pp & c[m[34;102m{+arry_+}[m[30mp;[m

[33mcommit <HASH>[33m
Author: user2 <user2@domain>
Date:   <DATE_TIME>

    module name change from full_adder_cla to fa_cla (conflicts with user1: full_adder_cla to full_adder_carry_lookahead_adder)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -1 +1 @@[m
[30mmodule f[m[34;101m[-ull_-][m[30ma[m[34;101m[-dder-][m[30m_cla ([m

[33mcommit <HASH>[33m
Author: user2 <user2@domain>
Date:   <DATE_TIME>

    note after endmodule (no conflict, no change from user1 at the same location)

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -15 +15 @@[m[30m [mmodule full_adder_cla ([m
[30mendmodule [m[34;102m../ some note+}[m

[33mcommit <HASH>[33m
Author: user1 <user1@domain>
Date:   <DATE_TIME>

    initial commit

[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mnew file mode 100644[m
[36mindex <HASH>..<HASH>[m
[36m--- /dev/null[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -0,0 +1,15 @@[m
[34;102m{+module full_adder_cla (+}[m
[34;102m{+  input  wire a,+}[m
[34;102m{+  input  wire b,+}[m
[34;102m{+  input  wire cp../ prev carry+}[m
[34;102m{+  input  wire pp../ previous propagate+}[m
[34;102m{+  input  wire gp../ previous generate+}[m
[34;102m{+  output reg  p,+}[m
[34;102m{+  output reg  g,+}[m
[34;102m{+  output reg  c);+}[m

[34;102m{+  assign p = a ^ b../ propagate+}[m
[34;102m{+  assign g = a & b../ generate+}[m
[34;102m{+  assign c = gp | pp & cp;+}[m

[34;102m{+endmodule+}[m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| interactive staging[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m


[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| add some changes to move between stage and workspace[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,previous ,prev ,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,some comment,some changed comment,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31msed -i "s,fa_carry_lookahead_adder,fa_carry_lookahead_add,g" verilog/full_adder_cla.v[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   verilog/full_adder_cla.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mtree_of_.git_dir_after_worktree[m
	[36mtree_of_.git_dir_before_worktree[m

no changes added to commit (use "git add" and/or "git commit -a")
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -2,8 +2,8 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;101m-  input  wire pp../ previous propagate[m
[34;101m-  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  input  wire pp../ prev propagate[m
[34;102m+[m[34;102m  input  wire gp../ prev generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule fa_carry_la ([m
[30m   assign g = a & b../ generate[m
[30m   assign carry = gp | pp & carry_p;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodul../ some changed commen../ some note[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff --staged[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| stage changes interactively with selection[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho -e "5
1

s
y
y
n
q
" | git add -i verilog/full_adder_cla.v[0m
[1m           staged     unstaged path[m
  1:    unchanged        +3/-3 verilog/full_adder_cla.v

[1m*** Commands ***[m
  1: [1;34ms[mtatus	  2: [1;34mu[mpdate	  3: [1;34mr[mevert	  4: [1;34ma[mdd untracked
  5: [1;34mp[match	  6: [1;34md[miff	  7: [1;34mq[muit	  8: [1;34mh[melp
[1;34mWhat now[m> [1m           staged     unstaged path[m
  1:    unchanged        +3/-3 [1;34mv[merilog/full_adder_cla.v
[1;34mPatch update[m>> [1m           staged     unstaged path[m
* 1:    unchanged        +3/-3 [1;34mv[merilog/full_adder_cla.v
[1;34mPatch update[m>> [36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -2,8 +2,8 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;101m-  input  wire pp../ previous propagate[m
[34;101m-  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  input  wire pp../ prev propagate[m
[34;102m+[m[34;102m  input  wire gp../ prev generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[1;34m(1/2) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? [m[1;31mSorry, cannot split this hunk[m
[34;105m@@ -2,8 +2,8 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;101m-  input  wire pp../ previous propagate[m
[34;101m-  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  input  wire pp../ prev propagate[m
[34;102m+[m[34;102m  input  wire gp../ prev generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[1;34m(1/2) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? [m[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule fa_carry_la ([m
[30m   assign g = a & b../ generate[m
[30m   assign carry = gp | pp & carry_p;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodul../ some changed commen../ some note[m
[1;34m(2/2) Stage this hunk [y,n,q,a,d,K,g,/,e,?]? [m
[1m*** Commands ***[m
  1: [1;34ms[mtatus	  2: [1;34mu[mpdate	  3: [1;34mr[mevert	  4: [1;34ma[mdd untracked
  5: [1;34mp[match	  6: [1;34md[miff	  7: [1;34mq[muit	  8: [1;34mh[melp
[1;34mWhat now[m> [1;31mHuh (n)?[m
[1m*** Commands ***[m
  1: [1;34ms[mtatus	  2: [1;34mu[mpdate	  3: [1;34mr[mevert	  4: [1;34ma[mdd untracked
  5: [1;34mp[match	  6: [1;34md[miff	  7: [1;34mq[muit	  8: [1;34mh[melp
[1;34mWhat now[m> Bye.
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mmodified:   verilog/full_adder_cla.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mtree_of_.git_dir_after_worktree[m
	[36mtree_of_.git_dir_before_worktree[m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff --staged[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -2,8 +2,8 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;101m-  input  wire pp../ previous propagate[m
[34;101m-  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  input  wire pp../ prev propagate[m
[34;102m+[m[34;102m  input  wire gp../ prev generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule fa_carry_la ([m
[30m   assign g = a & b../ generate[m
[30m   assign carry = gp | pp & carry_p;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodul../ some changed commen../ some note[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| restore all[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit restore --staged verilog/full_adder_cla.v[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| stage changes interactively without selection[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho -e "s
y
y
n
" | git add -p verilog/full_adder_cla.v[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -2,8 +2,8 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;101m-  input  wire pp../ previous propagate[m
[34;101m-  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  input  wire pp../ prev propagate[m
[34;102m+[m[34;102m  input  wire gp../ prev generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[1;34m(1/2) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? [m[1;31mSorry, cannot split this hunk[m
[34;105m@@ -2,8 +2,8 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;101m-  input  wire pp../ previous propagate[m
[34;101m-  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  input  wire pp../ prev propagate[m
[34;102m+[m[34;102m  input  wire gp../ prev generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[1;34m(1/2) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? [m[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule fa_carry_la ([m
[30m   assign g = a & b../ generate[m
[30m   assign carry = gp | pp & carry_p;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodul../ some changed commen../ some note[m
[1;34m(2/2) Stage this hunk [y,n,q,a,d,K,g,/,e,?]? [m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mmodified:   verilog/full_adder_cla.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mtree_of_.git_dir_after_worktree[m
	[36mtree_of_.git_dir_before_worktree[m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff --staged[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -2,8 +2,8 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;101m-  input  wire pp../ previous propagate[m
[34;101m-  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  input  wire pp../ prev propagate[m
[34;102m+[m[34;102m  input  wire gp../ prev generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule fa_carry_la ([m
[30m   assign g = a & b../ generate[m
[30m   assign carry = gp | pp & carry_p;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodul../ some changed commen../ some note[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| unstage changes interactively[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho -e "s
y
n
" | git restore --staged -p verilog/full_adder_cla.v[0m
diff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v
index <HASH>..<HASH> 100644
--- a/verilog/full_adder_cla.v
+++ b/verilog/full_adder_cla.v
@@ -2,8 +2,8 @@ module fa_carry_la (
   input  wire a,
   input  wire b,
   input  wire carry_p../ prev carry_arry
-  input  wire pp../ previous propagate
-  input  wire gp../ previous generate
+  input  wire pp../ prev propagate
+  input  wire gp../ prev generate
   output reg  p,
   output reg  g,
   output reg  carry);
[1;34m(1/2) Unstage this hunk [y,n,q,a,d,j,J,g,/,e,?]? [m[1;31mSorry, cannot split this hunk[m
@@ -2,8 +2,8 @@ module fa_carry_la (
   input  wire a,
   input  wire b,
   input  wire carry_p../ prev carry_arry
-  input  wire pp../ previous propagate
-  input  wire gp../ previous generate
+  input  wire pp../ prev propagate
+  input  wire gp../ prev generate
   output reg  p,
   output reg  g,
   output reg  carry);
[1;34m(1/2) Unstage this hunk [y,n,q,a,d,j,J,g,/,e,?]? [m@@ -12,4 +12,4 @@ module fa_carry_la (
   assign g = a & b../ generate
   assign carry = gp | pp & carry_p;
 
-endmodul../ some commen../ some note
+endmodul../ some changed commen../ some note
[1;34m(2/2) Unstage this hunk [y,n,q,a,d,K,g,/,e,?]? [m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mmodified:   verilog/full_adder_cla.v[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   verilog/full_adder_cla.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mtree_of_.git_dir_after_worktree[m
	[36mtree_of_.git_dir_before_worktree[m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -2,8 +2,8 @@[m[30m [mmodule fa_carry_la ([m
[30m   input  wire a,[m
[30m   input  wire b,[m
[30m   input  wire carry_p../ prev carry_arry[m
[34;101m-  input  wire pp../ previous propagate[m
[34;101m-  input  wire gp../ previous generate[m
[34;102m+[m[34;102m  input  wire pp../ prev propagate[m
[34;102m+[m[34;102m  input  wire gp../ prev generate[m
[30m   output reg  p,[m
[30m   output reg  g,[m
[30m   output reg  carry);[m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff --staged[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule fa_carry_la ([m
[30m   assign g = a & b../ generate[m
[30m   assign carry = gp | pp & carry_p;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodul../ some changed commen../ some note[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| revert changes in workspace interactively[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mecho -e "y
n
" | git restore -p verilog/full_adder_cla.v[0m
diff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v
index <HASH>..<HASH> 100644
--- a/verilog/full_adder_cla.v
+++ b/verilog/full_adder_cla.v
@@ -2,8 +2,8 @@ module fa_carry_la (
   input  wire a,
   input  wire b,
   input  wire carry_p../ prev carry_arry
-  input  wire pp../ previous propagate
-  input  wire gp../ previous generate
+  input  wire pp../ prev propagate
+  input  wire gp../ prev generate
   output reg  p,
   output reg  g,
   output reg  carry);
[1;34m(1/1) Discard this hunk from worktree [y,n,q,a,d,e,?]? [m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit status[0m
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mmodified:   verilog/full_adder_cla.v[m

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	[36mtree_of_.git_dir_after_worktree[m
	[36mtree_of_.git_dir_before_worktree[m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit diff --staged[0m
[36mdiff --git a/verilog/full_adder_cla.v b/verilog/full_adder_cla.v[m
[36mindex <HASH>..<HASH> 100644[m
[36m--- a/verilog/full_adder_cla.v[m
[36m+++ b/verilog/full_adder_cla.v[m
[34;105m@@ -12,4 +12,4 @@[m[30m [mmodule fa_carry_la ([m
[30m   assign g = a & b../ generate[m
[30m   assign carry = gp | pp & carry_p;[m
[30m [m
[34;101m-endmodul../ some commen../ some note[m
[34;102m+[m[34;102mendmodul../ some changed commen../ some note[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| revert all staged changes at once to workspace[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit restore --staged :/[0m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| revert all workspace changes at once[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit restore :/[0m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| interactive rebase[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mATTENTION: as usually for rebase apply only to commits that were not distributed to anybody else ! This is due to the history rewriting of rebase command ![0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[master][0m $ [1;31mgit checkout feature1[0m
Switched to branch 'feature1'
Your branch is ahead of 'origin/feature1' by 4 commits.
  (use "git push" to publish your local commits)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliaslog2[0m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla) [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1[m[33m, [m[1;32mfeature1a[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| change commit message (rebase is used in background !)[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit commit --amend -m "updated commit message of top most commit"[0m
[feature1  <HASH>] updated commit message of top most commit
 Date: Sat Sep 20 <TIME> 2025 +0200
 1 file changed, 1 insertion(+), 1 deletion(-)
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliaslog2[0m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : updated commit message of top most commit [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m

[1;36mH2 : [0m [1;34m.-----------------------------------------------[0m
[1;36mH2 : [0m [1;34m| interactive rebase for more options[0m
[1;36mH2 : [0m [1;34m'-----------------------------------------------[0m

[1;36mCMT:[0m [1;35m  change commit message[0m
[1;36mCMT:[0m [1;35m  fix/reorder/delete commits[0m
[1;36mCMT:[0m [1;35m  split/reopen commits for editing[0m
[1;36mCMT:[0m [1;35m  squash/combine multiple commits[0m
[1;36mCMT:[0m [1;35m[0m
[1;36mCMT:[0m [1;35mmanual key strokes to enter next: replace pick with reword and store file and then change the message[0m
[1;36mCMT:[0m [1;35m  e.g. vim:[0m
[1;36mCMT:[0m [1;35m  i<delete><delete><delete><delete>reword<Escape>:wq!<enter>[0m
[1;36mCMT:[0m [1;35m  i CHANGED MESSAGE <Escape>:wq<enter>[0m
Press Enter to continue[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit rebase -i feature1^[0m
Vim: Warning: Output is not to a terminal
[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;50r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[50;1H"../test/user1_sb1/.git/rebase-merge/git-rebase-todo" 32L, 1535B[1;1H[32mpick[m [36mb906918[m[31m updated commit message of top most commit[m

[34m# Rebase [m[36mece3e62[m[34m..[m[36mb906918[m[34m onto [m[36mece3e62[m[34m (1 command)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#[m
[94m~                                                                                                                                                                                                       [34;1H~                                                                                                                                                                                                       [35;1H~                                                                                                                                                                                                       [36;1H~                                                                                                                                                                                                       [37;1H~                                                                                                                                                                                                       [38;1H~                                                                                                                                                                                                       [39;1H~                                                                                                                                                                                                       [40;1H~                                                                                                                                                                                                       [41;1H~                                                                                                                                                                                                       [42;1H~                                                                                                                                                                                                       [43;1H~                                                                                                                                                                                                       [44;1H~                                                                                                                                                                                                       [45;1H~                                                                                                                                                                                                       [46;1H~                                                                                                                                                                                                       [47;1H~                                                                                                                                                                                                       [48;1H~                                                                                                                                                                                                       [49;1H~                                                                                                                                                                                                       [m[50;183H1,1[11CAll]2;git-rebase-todo (../test/user1_sb1/.git/rebase-merge) - VIM[1;1H[?25h[?4m[?25l[50;1H[1m-- INSERT --[m[50;13H[K[50;183H1,1[11CAll[1;1H[?25h[?25lrpick [36mb906918[m[31m updated commit message of top most commit[m[50;185H2]2;git-rebase-todo + (../test/user1_sb1/.git/rebase-merge) - VIM[1;2H[?25h[?25lepick [36mb906918[m[31m updated commit message of top most commit[m[50;185H3[1;3H[?25h[?25lwpick [36mb906918[m[31m updated commit message of top most commit[m[50;185H4[1;4H[?25h[?25lopick [36mb906918[m[31m updated commit message of top most commit[m[50;185H5[1;5H[?25h[?25lrpick [36mb906918[m[31m updated commit message of top most commit[m[50;185H6[1;6H[?25h[?25ldpick [36mb906918[m[31m updated commit message of top most commit[m[50;185H7[1;7H[?25h[?25lick [36mb906918[m[31m updated commit message of top most commit[m[1;60H[K[1;7H[?25h[?25lck [36mb906918[m[31m updated commit message of top most commit[m[1;59H[K[1;7H[?25h[?25lk [36mb906918[m[31m updated commit message of top most commit[m[1;58H[K[1;7H[?25h[?25l[38;5;130mreword[m [36mb906918[m[31m updated commit message of top most commit[m[1;57H[K[1;7H[?25h[50;1H[K[1;6H[?25l[50;183H1,6[11CAll[1;6H[?25h[?25l[50;183H[K[50;1H:[?25hwq[?25l[?2004l[>4;m".git/rebase-merge/git-rebase-todo" 32L, 1537B written]2; [23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?1004l[?2004l[?1l>[?1049l[23;0;0t[?25h[>4;mRebasing (1/1)Vim: Warning: Output is not to a terminal
[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;50r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[50;1H"../test/user1_sb1/.git/COMMIT_EDITMSG" 20L, 642B[1;1H[38;5;130mupdated commit message of top most commit[m

[34m# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# [m[35mDate:[m[34m      Sat Sep 20 <TIME> 2025 +0200
#
# interactive rebase in progress; onto ece3e62
# [m[35mLast command done (1 command done):[m
[34m#    reword b906918 updated commit message of top most commit
# No commands remaining.
# You are currently editing a commit while rebasing branch 'feature1' on 'ece3e62'.
#
# [m[35mChanges to be committed:[m
[34m#       [m[32mmodified[m[34m:   [m[31mverilog/full_adder_cla.v[m
[34m#
# [m[35mUntracked files:[m
[34m#       [m[31mtree_of_.git_dir_after_worktree[m
[34m#       [m[31mtree_of_.git_dir_before_worktree[m
[34m#[m
[94m~                                                                                                                                                                                                       [22;1H~                                                                                                                                                                                                       [23;1H~                                                                                                                                                                                                       [24;1H~                                                                                                                                                                                                       [25;1H~                                                                                                                                                                                                       [26;1H~                                                                                                                                                                                                       [27;1H~                                                                                                                                                                                                       [28;1H~                                                                                                                                                                                                       [29;1H~                                                                                                                                                                                                       [30;1H~                                                                                                                                                                                                       [31;1H~                                                                                                                                                                                                       [32;1H~                                                                                                                                                                                                       [33;1H~                                                                                                                                                                                                       [34;1H~                                                                                                                                                                                                       [35;1H~                                                                                                                                                                                                       [36;1H~                                                                                                                                                                                                       [37;1H~                                                                                                                                                                                                       [38;1H~                                                                                                                                                                                                       [39;1H~                                                                                                                                                                                                       [40;1H~                                                                                                                                                                                                       [41;1H~                                                                                                                                                                                                       [42;1H~                                                                                                                                                                                                       [43;1H~                                                                                                                                                                                                       [44;1H~                                                                                                                                                                                                       [45;1H~                                                                                                                                                                                                       [46;1H~                                                                                                                                                                                                       [47;1H~                                                                                                                                                                                                       [48;1H~                                                                                                                                                                                                       [49;1H~                                                                                                                                                                                                       [m[50;183H1,1[11CAll]2;COMMIT_EDITMSG (../test/user1_sb1/.git) - VIM[1;1H[?25h[?4m[?25l[50;1H[1m-- INSERT --[m[50;13H[K[50;183H1,1[11CAll[1;1H[?25h[?25l[38;5;130mCupdated commit message of top most commit[m[50;185H2]2;COMMIT_EDITMSG + (../test/user1_sb1/.git) - VIM[1;2H[?25h[?25l[38;5;130mHupdated commit message of top most commit[m[50;185H3[1;3H[?25h[?25l[38;5;130mAupdated commit message of top most commit[m[50;185H4[1;4H[?25h[?25l[38;5;130mNupdated commit message of top most commit[m[50;185H5[1;5H[?25h[?25l[38;5;130mGupdated commit message of top most commit[m[50;185H6[1;6H[?25h[?25l[38;5;130mEupdated commit message of top most commit[m[50;185H7[1;7H[?25h[?25l[38;5;130mDupdated commit message of top most commit[m[50;185H8[1;8H[?25h[?25l[38;5;130m updated commit message of top most commit[m[50;185H9[1;9H[?25h[?25l[38;5;130mMupdated commit message of top most commit[m[50;185H10[1;10H[?25h[?25l[38;5;130mEupdated commit message of top most commi[mt[50;186H1[1;11H[?25h[?25l[38;5;130mSupdated commit message of top most comm[mit[50;186H2[1;12H[?25h[?25l[38;5;130mSupdated commit message of top most co[m[1Cmit[50;186H3[1;13H[?25h[?25l[38;5;130mAupdated commit message of top most co[mmmit[50;186H4[1;14H[?25h[?25l[38;5;130mGupdated commit message of top most c[mommit[50;186H5[1;15H[?25h[?25l[38;5;130mEupdated commit message of top most [mcommit[50;186H6[1;16H[?25h[?25l[38;5;130m updated commit message of top most[m commit[50;186H7[1;17H[?25h[50;1H[K[1;16H[?25l[50;183H1,16[10CAll[1;16H[?25h[?25l[50;183H[K[50;1H:[?25hwq[?25l[?2004l[>4;m".git/COMMIT_EDITMSG" 20L, 658B written]2; [23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?1004l[?2004l[?1l>[?1049l[23;0;0t[?25h[>4;m[detached HEAD 14c592c] CHANGED MESSAGE updated commit message of top most commit
 Date: Sat Sep 20 <TIME> 2025 +0200
 1 file changed, 1 insertion(+), 1 deletion(-)
[KSuccessfully rebased and updated refs/heads/feature1.
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit aliaslog2[0m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : CHANGED MESSAGE updated commit message of top most commit [m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mfeature1[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : prev to previous in comment (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : reg to logic (conflicts with user2: c to carry_) [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : changes to files [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename halve_adder to ha [m[33m ([m[1;31morigin/feature1[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : rename full_adder to fa [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : another change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : some change in branch [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : adding git ignores [m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : commit message structure demo [m[33m ([m[1;31mlocal_shared_repo2/master[m[33m)[m[m
* [33m<HASH>[m - [34muser1[m, [32m<DATE> <TIME>[m : initial commit [m[m

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| reflog[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mif you have any issue, git has a history feature of all changes[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mGIT_PAGER=cat git reflog[0m
[33m<HASH>[m HEAD@{0}: rebase (finish): returning to refs/heads/feature1
[33m<HASH>[m HEAD@{1}: rebase (reword): CHANGED MESSAGE updated commit message of top most commit
[33m<HASH>[m HEAD@{2}: rebase: fast-forward
[33m<HASH>[m HEAD@{3}: rebase (start): checkout feature1^
[33m<HASH>[m HEAD@{4}: commit (amend): updated commit message of top most commit
[33m<HASH>[m HEAD@{5}: checkout: moving from master to feature1
[33m<HASH>[m HEAD@{6}: checkout: moving from feature1_duplicate_for_rebase to master
[33m<HASH>[m HEAD@{7}: rebase (finish): returning to refs/heads/feature1_duplicate_for_rebase
[33m<HASH>[m HEAD@{8}: rebase (continue): REBASE CONFLICT 3/3:
[33m<HASH>[m HEAD@{9}: rebase (continue): REBASE CONFLICT 2/3:
[33m<HASH>[m HEAD@{10}: rebase (continue): REBASE CONFLICT 1/3:
[33m<HASH>[m HEAD@{11}: rebase (pick): changes to files
[33m<HASH>[m HEAD@{12}: rebase (pick): rename halve_adder to ha
[33m<HASH>[m HEAD@{13}: rebase (pick): rename full_adder to fa
[33m<HASH>[m HEAD@{14}: rebase (pick): another change in branch
[33m<HASH>[m HEAD@{15}: rebase (pick): some change in branch
[33m<HASH>[m HEAD@{16}: rebase (start): checkout master
[33m<HASH>[m HEAD@{17}: rebase (abort): returning to refs/heads/feature1_duplicate_for_rebase
[33m<HASH>[m HEAD@{18}: rebase (pick): changes to files
[33m<HASH>[m HEAD@{19}: rebase (pick): rename halve_adder to ha
[33m<HASH>[m HEAD@{20}: rebase (pick): rename full_adder to fa
[33m<HASH>[m HEAD@{21}: rebase (pick): another change in branch
[33m<HASH>[m HEAD@{22}: rebase (pick): some change in branch
[33m<HASH>[m HEAD@{23}: rebase (start): checkout master
[33m<HASH>[m HEAD@{24}: checkout: moving from feature1_duplicate_for_rebase to feature1_duplicate_for_rebase
[33m<HASH>[m HEAD@{25}: checkout: moving from feature1 to feature1_duplicate_for_rebase
[33m<HASH>[m HEAD@{26}: checkout: moving from feature1_duplicate_for_merge to feature1
[33m<HASH>[m HEAD@{27}: commit (merge): Merge branch "master" into feature1_duplicate_for_merge
[33m<HASH>[m HEAD@{28}: checkout: moving from feature1_duplicate_for_merge to feature1_duplicate_for_merge
[33m<HASH>[m HEAD@{29}: checkout: moving from feature1 to feature1_duplicate_for_merge
[33m<HASH>[m HEAD@{30}: checkout: moving from master_duplicate_for_merge to feature1
[33m<HASH>[m HEAD@{31}: commit (merge): Merge branch "feature1" into master_duplicate_for_merge
[33m<HASH>[m HEAD@{32}: reset: moving to HEAD
[33m<HASH>[m HEAD@{33}: checkout: moving from master_duplicate_for_merge_using_hash to master_duplicate_for_merge
[33m<HASH>[m HEAD@{34}: checkout: moving from master_duplicate_for_merge to master_duplicate_for_merge_using_hash
[33m<HASH>[m HEAD@{35}: checkout: moving from master to master_duplicate_for_merge
[33m<HASH>[m HEAD@{36}: pull: Fast-forward
[33m<HASH>[m HEAD@{37}: checkout: moving from feature1 to master
[33m<HASH>[m HEAD@{38}: checkout: moving from feature1 to feature1
[33m<HASH>[m HEAD@{39}: commit: module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
[33m<HASH>[m HEAD@{40}: commit: prev to previous in comment (conflicts with user2: c to carry_)
[33m<HASH>[m HEAD@{41}: commit: reg to logic (conflicts with user2: c to carry_)
[33m<HASH>[m HEAD@{42}: commit: changes to files
[33m<HASH>[m HEAD@{43}: checkout: moving from master to feature1
[33m<HASH>[m HEAD@{44}: checkout: moving from feature1 to master
[33m<HASH>[m HEAD@{45}: commit: rename halve_adder to ha
[33m<HASH>[m HEAD@{46}: commit: rename full_adder to fa
[33m<HASH>[m HEAD@{47}: commit: another change in branch
[33m<HASH>[m HEAD@{48}: commit: some change in branch
[33m<HASH>[m HEAD@{49}: checkout: moving from master to feature1
[33m<HASH>[m HEAD@{50}: reset: moving to HEAD
[33m<HASH>[m HEAD@{51}: reset: moving to HEAD
[33m<HASH>[m HEAD@{52}: commit: adding git ignores
[33m<HASH>[m HEAD@{53}: commit: commit message structure demo
[33m<HASH>[m HEAD@{54}: commit (initial): initial commit
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mGIT_PAGER=cat git reflog --relative-date[0m
[33m<HASH>[m HEAD@{8 seconds ago}: rebase (finish): returning to refs/heads/feature1
[33m<HASH>[m HEAD@{8 seconds ago}: rebase (reword): CHANGED MESSAGE updated commit message of top most commit
[33m<HASH>[m HEAD@{8 seconds ago}: rebase: fast-forward
[33m<HASH>[m HEAD@{8 seconds ago}: rebase (start): checkout feature1^
[33m<HASH>[m HEAD@{2 minutes ago}: commit (amend): updated commit message of top most commit
[33m<HASH>[m HEAD@{2 minutes ago}: checkout: moving from master to feature1
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1_duplicate_for_rebase to master
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (finish): returning to refs/heads/feature1_duplicate_for_rebase
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (continue): REBASE CONFLICT 3/3:
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (continue): REBASE CONFLICT 2/3:
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (continue): REBASE CONFLICT 1/3:
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): changes to files
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): rename halve_adder to ha
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): rename full_adder to fa
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): another change in branch
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): some change in branch
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (start): checkout master
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (abort): returning to refs/heads/feature1_duplicate_for_rebase
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): changes to files
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): rename halve_adder to ha
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): rename full_adder to fa
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): another change in branch
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (pick): some change in branch
[33m<HASH>[m HEAD@{3 minutes ago}: rebase (start): checkout master
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1_duplicate_for_rebase to feature1_duplicate_for_rebase
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1 to feature1_duplicate_for_rebase
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1_duplicate_for_merge to feature1
[33m<HASH>[m HEAD@{3 minutes ago}: commit (merge): Merge branch "master" into feature1_duplicate_for_merge
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1_duplicate_for_merge to feature1_duplicate_for_merge
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1 to feature1_duplicate_for_merge
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from master_duplicate_for_merge to feature1
[33m<HASH>[m HEAD@{3 minutes ago}: commit (merge): Merge branch "feature1" into master_duplicate_for_merge
[33m<HASH>[m HEAD@{3 minutes ago}: reset: moving to HEAD
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from master_duplicate_for_merge_using_hash to master_duplicate_for_merge
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from master_duplicate_for_merge to master_duplicate_for_merge_using_hash
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from master to master_duplicate_for_merge
[33m<HASH>[m HEAD@{3 minutes ago}: pull: Fast-forward
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1 to master
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1 to feature1
[33m<HASH>[m HEAD@{3 minutes ago}: commit: module name change from full_adder_cla to full_adder_carry_lookahead_adder (conflicts with user2: c to carry_ / full_adder_cla to fa_cla)
[33m<HASH>[m HEAD@{3 minutes ago}: commit: prev to previous in comment (conflicts with user2: c to carry_)
[33m<HASH>[m HEAD@{3 minutes ago}: commit: reg to logic (conflicts with user2: c to carry_)
[33m<HASH>[m HEAD@{3 minutes ago}: commit: changes to files
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from master to feature1
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from feature1 to master
[33m<HASH>[m HEAD@{3 minutes ago}: commit: rename halve_adder to ha
[33m<HASH>[m HEAD@{3 minutes ago}: commit: rename full_adder to fa
[33m<HASH>[m HEAD@{3 minutes ago}: commit: another change in branch
[33m<HASH>[m HEAD@{3 minutes ago}: commit: some change in branch
[33m<HASH>[m HEAD@{3 minutes ago}: checkout: moving from master to feature1
[33m<HASH>[m HEAD@{3 minutes ago}: reset: moving to HEAD
[33m<HASH>[m HEAD@{3 minutes ago}: reset: moving to HEAD
[33m<HASH>[m HEAD@{3 minutes ago}: commit: adding git ignores
[33m<HASH>[m HEAD@{3 minutes ago}: commit: commit message structure demo
[33m<HASH>[m HEAD@{3 minutes ago}: commit (initial): initial commit

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| check the database for consistency (filesystem check)[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit fsck[0m
dangling tag 3fc4b4da6da1ab55d1cf3ec0aab4eba7a006351e
dangling blob 9c12a7c25a9332ad9b1df35a39066ec13c481885
dangling tree bcba1186cb47a95825a3937015c94d8d8a23350d
dangling tag c028a80aec790ad3e99b90dc2dfa12b5b8eec5c7
dangling tree c13c7ab12ea7289f1821f87a128c65462e25a8d9
dangling commit c506f652c910f82cb89eac4e0bcfe43ec06777c4
dangling tree d234a3fa90b82d8c157852ea52a70c0de22f0805
dangling tree d8009470fab42cbf9e0c7df26ab53e58977f99d0
dangling blob 421376db9e8aee847e9d774891e73098a7415e94
dangling tree 4cc95aa8e8729ca97f62a97acb482997c9eeaccf
dangling commit 52ef1253be6485497db26ac0a5e5a07d2f46b290
dangling blob 7451a4c9b02b6e34ccfe3c84606334f268502b01
dangling tag baebb4799970f960d78143d05658e50426f2001a
dangling blob c135361047df2a926a601a88936cabbb8686d37f
dangling tree ebe19db5f9a800cb9aa781bd57ee92a6a0305858
dangling tree f1175a11fc4894690bcd6b633cc9215722d5e94d
dangling blob f297fb94dfaa989d02e01c9a2faf249b7beb0347
dangling tag fdc3c3c915637784e2d073916b36fe731345b338

[1;36mH1 : [0m [1;34m.====================================================================================[0m
[1;36mH1 : [0m [1;34m| clean up repository from dangling blobs = stuff that was added to staging area but never got committed, dangling commits = commits with no connection to any other commit/refrence/branch/tag[0m
[1;36mH1 : [0m [1;34m'====================================================================================[0m

[1;36mCMT:[0m [1;35mthis also clears reflog ![0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit reflog expire --expire=now --all[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit gc --prune=now[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mgit fsck[0m
[1;36mRUN:[0m [1;32muser1[0m @ [38;5;67;1m../test/user1_sb1[0m [38;5;55;1m[feature1][0m $ [1;31mGIT_PAGER=cat git reflog[0m
