
################################################
# setup: Setup backup
.../test_backup

################################################
# setup: create local repository (file system repository) server1
.../test_backup/server1

################################################
# setup: create local / sandbox repository
.../test_backup/server1_create

 .============================================================================
 | Executing:  svn checkout file://.../test_backup/server1/repo .
 |============================================================================
Checked out revision 0.
 '============================================================================

A         trunk
A         branches
A         tags
A         .svnignore
Adding         branches
Adding         tags
Adding         trunk
Adding         trunk/.svnignore
Transmitting file data .done
Committing transaction...
Committed revision 1.

################################################
# setup: 

################################################
# setup: create local / sandbox repository for user1
.../test_backup/svn_user1

 .============================================================================
 | Executing:  svn checkout file://.../test_backup/server1/repo/trunk .
 |============================================================================
A    .svnignore
Checked out revision 1.
 '============================================================================


################################################
# setup: create local / sandbox repository for user1
.../test_backup/git_user2

 .============================================================================
 | Executing:  .../../bin/gvn.sh clone file://.../test_backup/server1/repo/trunk .
 |============================================================================
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty Git repository in .../test_backup/git_user2/.git/
	A	.svnignore
r1 = <HASH> (refs/remotes/origin/trunk)
Checked out HEAD:
  file://.../test_backup/server1/repo/trunk r1
 '============================================================================


 .============================================================================
 |             Rename master to trunk to match name for gvn
 | Executing:  .../../bin/git.sh branch -m trunk
 |============================================================================
 '============================================================================


 .============================================================================
 |             update map database
 | Executing:  .../../bin/gvn.sh umdb
 |============================================================================
 '============================================================================


################################################
# setup: create local / sandbox repository for user1
.../test_backup/git_user3

 .============================================================================
 | Executing:  .../../bin/gvn.sh clone-ns file://.../test_backup/server1/repo/trunk .
 |============================================================================
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty Git repository in .../test_backup/git_user3/.git/
	A	.svnignore
r1 = <HASH> (refs/remotes/git-svn)
Checked out HEAD:
  file://.../test_backup/server1/repo/trunk r1
 '============================================================================


 .============================================================================
 |             Rename master to trunk to match name for gvn
 | Executing:  .../../bin/git.sh branch -m trunk
 |============================================================================
 '============================================================================


 .============================================================================
 |             update map database
 | Executing:  .../../bin/gvn.sh umdb
 |============================================================================
 '============================================================================


 .============================================================================
 |             add some files
 | Executing:  .../../bin/git.sh add file*
 |============================================================================
 '============================================================================


 .============================================================================
 |             commit new files
 | Executing:  .../../bin/git.sh commit -a -m 'files'
 |============================================================================
[trunk  <HASH>] files
 3 files changed, 15 insertions(+)
 create mode 100644 file.html
 create mode 100644 file.pl
 create mode 100644 file.py
 '============================================================================


 .============================================================================
 |             backup with no change
 | Executing:  .../../bin/git.sh bb without_changes
 |============================================================================
 '============================================================================


 .============================================================================
 |             commit new files
 | Executing:  .../../bin/git.sh commit -a -m 'files'
 |============================================================================
[trunk  <HASH>] files
 1 file changed, 1 insertion(+), 1 deletion(-)
 '============================================================================


 .============================================================================
 |             backup with no change and no title
 | Executing:  .../../bin/git.sh bb
 |============================================================================
 '============================================================================


 .============================================================================
 |             add new file2.pl
 | Executing:  .../../bin/git.sh add file2.pl
 |============================================================================
 '============================================================================


 .============================================================================
 |             backup with change
 | Executing:  .../../bin/git.sh bb with_changes
 |============================================================================
Saved working directory and index state WIP on trunk: <HASH> files
Switched to a new branch 'bb.trunk.with_changes.<DATE>_<TIME>'
On branch bb.trunk.with_changes.<DATE>_<TIME>
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mnew file:   file2.pl[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   file.py[m

[bb.trunk.with_changes.<DATE>_<TIME>  <HASH>] Local changes for backup branch
 2 files changed, 5 insertions(+), 1 deletion(-)
 create mode 100644 file2.pl
Switched to branch 'trunk'
On branch trunk
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mnew file:   file2.pl[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   file.py[m

Dropped refs/stash@{0} (<HASH>)
 '============================================================================


 .============================================================================
 |             backup with change and no title
 | Executing:  .../../bin/git.sh bb
 |============================================================================
Saved working directory and index state WIP on trunk: <HASH> files
Switched to a new branch 'bb.trunk.untitled.<DATE>_<TIME>'
On branch bb.trunk.untitled.<DATE>_<TIME>
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mnew file:   file2.pl[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   file.py[m

[bb.trunk.untitled.<DATE>_<TIME>  <HASH>] Local changes for backup branch
 2 files changed, 5 insertions(+), 1 deletion(-)
 create mode 100644 file2.pl
Switched to branch 'trunk'
On branch trunk
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mnew file:   file2.pl[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   file.py[m

Dropped refs/stash@{0} (<HASH>)
 '============================================================================


 .============================================================================
 |             show all branches
 | Executing:  .../../bin/git.sh lgasb
 |============================================================================
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mLocal changes for backup branch[m [1;35m (bb.trunk.untitled.<DATE>_<TIME>)[m
[31m|[m * [33m   <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mLocal changes for backup branch[m [1;35m (bb.trunk.with_changes.<DATE>_<TIME>)[m
[31m|[m[31m/[m  
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mfiles[m [1;35m (HEAD -> trunk, bb.trunk.untitled.<DATE>_<TIME>)[m
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mfiles[m [1;35m (bb.trunk.without_changes.<DATE>_<TIME>)[m
* [33m     <HASH>[m [1;34mr1[m [1;32m<DATE> <TIME>[m [2;34m<user>             [m [30minitial commit[m [1;35m (origin/trunk)[m
 '============================================================================


 .============================================================================
 |             check for wrong branch name
 | Executing:  .../../bin/git.sh bb \.
 |============================================================================
ERROR: unexpected <..> in branch name <bb.trunk...<DATE>_<TIME>>
 '============================================================================


 .============================================================================
 |             show all branches
 | Executing:  .../../bin/git.sh lgasb
 |============================================================================
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mLocal changes for backup branch[m [1;35m (bb.trunk.untitled.<DATE>_<TIME>)[m
[31m|[m * [33m   <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mLocal changes for backup branch[m [1;35m (bb.trunk.with_changes.<DATE>_<TIME>)[m
[31m|[m[31m/[m  
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mfiles[m [1;35m (HEAD -> trunk, bb.trunk.untitled.<DATE>_<TIME>)[m
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mfiles[m [1;35m (bb.trunk.without_changes.<DATE>_<TIME>)[m
* [33m     <HASH>[m [1;34mr1[m [1;32m<DATE> <TIME>[m [2;34m<user>             [m [30minitial commit[m [1;35m (origin/trunk)[m
 '============================================================================


 .============================================================================
 |             backup with own datetime
 | Executing:  .../../bin/git.sh bb test test_<DATE>_<TIME>
 |============================================================================
Saved working directory and index state WIP on trunk: <HASH> files
Switched to a new branch 'bb.trunk.test.test_<DATE>_<TIME>'
On branch bb.trunk.test.test_<DATE>_<TIME>
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mnew file:   file2.pl[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   file.py[m

[bb.trunk.test.test_<DATE>_<TIME>  <HASH>] Local changes for backup branch
 2 files changed, 5 insertions(+), 1 deletion(-)
 create mode 100644 file2.pl
Switched to branch 'trunk'
On branch trunk
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	[32mnew file:   file2.pl[m

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	[31mmodified:   file.py[m

Dropped refs/stash@{0} (<HASH>)
 '============================================================================


 .============================================================================
 |             show all branches
 | Executing:  .../../bin/git.sh lgasb
 |============================================================================
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mLocal changes for backup branch[m [1;35m (bb.trunk.test.test_<DATE>_<TIME>)[m
[31m|[m * [33m   <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mLocal changes for backup branch[m [1;35m (bb.trunk.untitled.<DATE>_<TIME>)[m
[31m|[m[31m/[m  
[31m|[m * [33m   <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mLocal changes for backup branch[m [1;35m (bb.trunk.with_changes.<DATE>_<TIME>)[m
[31m|[m[31m/[m  
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mfiles[m [1;35m (HEAD -> trunk, bb.trunk.untitled.<DATE>_<TIME>)[m
* [33m     <HASH>[m [1;34mr?[m [1;32m<DATE> <TIME>[m [2;34muser2               [m [30mfiles[m [1;35m (bb.trunk.without_changes.<DATE>_<TIME>)[m
* [33m     <HASH>[m [1;34mr1[m [1;32m<DATE> <TIME>[m [2;34m<user>             [m [30minitial commit[m [1;35m (origin/trunk)[m
 '============================================================================

