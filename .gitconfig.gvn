# Description: GVN - Git sVN - git configuration and more for easier usage of git-svn, test suite
# Author:      jlechnar
# Licence:     GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
# Source:      https://github.com/jlechnar/gvn

[alias]

	# NOTE: adapt below as required - speedwise is the following is ordered slowest to fastest at the moment:

#	gvn-cmd-annotate = "!python3 ~/bin/bin_gvn/gvn_annotate.py"
#	gvn-cmd-blame = "!python3 ~/bin/bin_gvn/gvn_blame.py"
#	gvn-cmd-update-mapping-db = "!true"

#        # in case of always mapping, to speedup remove update-mapping-database from gvn-commit below
#	gvn-cmd-annotate = "!python3 ~/bin/bin_gvn/gvn_annotate.py -m"
#	gvn-cmd-blame = "!python3 ~/bin/bin_gvn/gvn_blame.py -m"
#	gvn-cmd-update-mapping-db = "!python3 ~/bin/bin_gvn/gvn_update_mapping_db.py"

#	gvn-cmd-annotate = "!perl ~/bin/bin_gvn/gvn_annotate.pl"
#	gvn-cmd-blame = "!python3 ~/bin/bin_gvn/gvn_blame.py"
#        gvn-cmd-update-mapping-db = "!true"

	gvn-cmd-annotate = "!perl ~/bin/bin_gvn/gvn_annotate.pl -m"
	gvn-cmd-blame = "!python3 ~/bin/bin_gvn/gvn_blame.py"
	gvn-cmd-hash = "!perl ~/bin/bin_gvn/gvn_hash.pl"
	gvn-cmd-convert-hashes = "!perl ~/bin/bin_gvn/gvn_convert_hashes.pl"
        gvn-cmd-update-mapping-db = "!perl ~/bin/bin_gvn/gvn_update_mapping_db.pl"

	gvn-lb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_log.sh -- \"$@\"' --"
        lbs = "gvn-lb"
        lsb = "gvn-lb"
        gvn-l  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_log.sh -p -- \"$@\"' --"
        # ls = "gvn-l" # disabled to avoid conflict with ls !

        gvn-lbf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_log.sh -f -- \"$@\"' --"
        gvn-lfb = "gvn-lbf"
        lbfs = "gvn-lbf"
        lbsf = "gvn-lbf"
        lsbf = "gvn-lbf"
        lsfb = "gvn-lbf"
        lfsb = "gvn-lbf"
        lfbs = "gvn-lbf"
        gvn-lf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_log.sh -p -f -- \"$@\"' --"
        lfs = "gvn-lf"
        lsf = "gvn-lf"

        gvn-lab = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_log.sh -a -- \"$@\"' --"
        lasb = "gvn-lab"
        labs = "gvn-lab"
        gvn-la  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_log.sh -p -a -- \"$@\"' --"
        las = "gvn-la"

        gvn-labf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_log.sh -a -f -- \"$@\"' --"
        gvn-lafb = "gvn-labf"
        lafbs = "gvn-labf"
        lafsb = "gvn-labf"
        lasfb = "gvn-labf"
        lasbf = "gvn-labf"
        labsf = "gvn-labf"
        labfs = "gvn-labf"
        gvn-laf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_log.sh -p -a -f -- \"$@\"' --"
        lafs = "gvn-laf"
        lasf = "gvn-laf"

	
        gvn-lgb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -- \"$@\"' --"
        lgsb = "gvn-lgb"
        lgbs = "gvn-lgb"
        gvn-lg = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -p -- \"$@\"' --"
        lgs = "gvn-lg"


        gvn-lgfb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -f -- \"$@\"' --"
        gvn-lgbf = "gvn-lgfb"
        lgsfb = "gvn-lgfb"
        lgsbf = "gvn-lgfb"
        lgbsf = "gvn-lgfb"
        lgbfs = "gvn-lgfb"
        lgfbs = "gvn-lgfb"
        lgfsb = "gvn-lgfb"
        gvn-lgf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -f -p -- \"$@\"' --"
        lgsf = "gvn-lgf"
        lgfs = "gvn-lgf"

        gvn-lglb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -c -- \"$@\"' --"
        gvn-lgbl = "gvn-lglb"
        lgslb = "gvn-lglb"
        lgsbl = "gvn-lglb"
        lglbs = "gvn-lglb"
        lglsb = "gvn-lglb"
        lgbls = "gvn-lglb"
        lgbsl = "gvn-lglb"
        gvn-lgl  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -c -p -- \"$@\"' --"
        lgsl = "gvn-lgl"
        lgls = "gvn-lgl"

        gvn-lglfb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -c -f -- \"$@\"' --"
        gvn-lglbf = "gvn-lglfb"
        gvn-lgfbl = "gvn-lglfb"
        gvn-lgflb = "gvn-lglfb"
        gvn-lgblf = "gvn-lglfb"
        gvn-lgbfl = "gvn-lglfb"
        lgslfb = "gvn-lglfb"
        lgslbf = "gvn-lglfb"
        lgsflb = "gvn-lglfb"
        lgsfbl = "gvn-lglfb"
        lgsbfl = "gvn-lglfb"
        lgsblf = "gvn-lglfb"
        #
        lglsfb = "gvn-lglfb"
        lglsbf = "gvn-lglfb"
        lglfsb = "gvn-lglfb"
        lglfbs = "gvn-lglfb"
        lglbfs = "gvn-lglfb"
        lglbsf = "gvn-lglfb"
        #
        lgfslb = "gvn-lglfb"
        lgfsbl = "gvn-lglfb"
        lgflsb = "gvn-lglfb"
        lgflbs = "gvn-lglfb"
        lgfbls = "gvn-lglfb"
        lgfbsl = "gvn-lglfb"
        #
        lgbsfl = "gvn-lglfb"
        lgbslf = "gvn-lglfb"
        lgbfsl = "gvn-lglfb"
        lgbfls = "gvn-lglfb"
        lgblfs = "gvn-lglfb"
        lgblsf = "gvn-lglfb"
        #
        gvn-lglf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -c -f -p -- \"$@\"' --"
	gvn-lgfl = "gvn-lglf"
        lgslf = "gvn-lglf"
	lgsfl = "gvn-lglf"
	lglsf = "gvn-lglf"
	lglfs = "gvn-lglf"
	lgfls = "gvn-lglf"
	lgfsl = "gvn-lglf"
	

        gvn-lgab = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -a -- \"$@\"' --"
        lgasb = "gvn-lgab"
        lgabs = "gvn-lgab"
        gvn-lga = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -a -p -- \"$@\"' --"
        lgas = "gvn-lga"

        gvn-lgafb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -a -f -- \"$@\"' --"
        gvn-lgabf = "gvn-lgafb"
        lgasfb = "gvn-lgafb"
        lgasbf = "gvn-lgafb"
        lgafsb = "gvn-lgafb"
        lgafbs = "gvn-lgafb"
        lgabfs = "gvn-lgafb"
        lgabsf = "gvn-lgafb"
        gvn-lgaf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -a -f -p -- \"$@\"' --"
        lgasf = "gvn-lgaf"
        lgafs = "gvn-lgaf"

        gvn-lgalb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -a -c -- \"$@\"' --"
        gvn-lgabl = "gvn-lgalb"
        lgaslb = "gvn-lgalb"
        lgasbl = "gvn-lgalb"
        lgalsb = "gvn-lgalb"
        lgalbs = "gvn-lgalb"
        lgabls = "gvn-lgalb"
        lgabsl = "gvn-lgalb"
        gvn-lgal = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -a -c -p -- \"$@\"' --"
        lgasl = "gvn-lgal"
        lgals = "gvn-lgal"

        gvn-lgalfb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -a -c -f -- \"$@\"' --"
        gvn-lgalbf = "gvn-lgalfb"
        gvn-lgafbl = "gvn-lgalfb"
        gvn-lgaflb = "gvn-lgalfb"
        gvn-lgablf = "gvn-lgalfb"
        gvn-lgabfl = "gvn-lgalfb"
        lgaslfb = "gvn-lgalfb"
        lgaslbf = "gvn-lgalfb"
        lgasflb = "gvn-lgalfb"
        lgasfbl = "gvn-lgalfb"
        lgasblf = "gvn-lgalfb"
        lgasbfl = "gvn-lgalfb"
        #
        lgalsfb = "gvn-lgalfb"
        lgalsbf = "gvn-lgalfb"
        lgalfsb = "gvn-lgalfb"
        lgalfbs = "gvn-lgalfb"
        lgalbsf = "gvn-lgalfb"
        lgalbfs = "gvn-lgalfb"
        #
        lgablfs = "gvn-lgalfb"
        lgablsf = "gvn-lgalfb"
        lgabfls = "gvn-lgalfb"
        lgabfsl = "gvn-lgalfb"
        lgabslf = "gvn-lgalfb"
        lgabsfl = "gvn-lgalfb"
        #
        lgaflsb = "gvn-lgalfb"
        lgaflbs = "gvn-lgalfb"
        lgafslb = "gvn-lgalfb"
        lgafsbl = "gvn-lgalfb"
        lgafbls = "gvn-lgalfb"
        lgafbsl = "gvn-lgalfb"
        gvn-lgalf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_lg.sh -N -a -c -f -p -- \"$@\"' --"
        gvn-lgafl = "gvn-lgalf"
        lgaslf = "gvn-lgalf"
        lgaslf = "gvn-lgalf"
        lgalsf = "gvn-lgalf"
        lgalfs = "gvn-lgalf"
        lgafls = "gvn-lgalf"
        lgafsl = "gvn-lgalf"


        # --------------------------
	# gvn

	gvn-log = "svn log"
	gvn-logf = "svn log -v"
	gvn-logo = "svn log --oneline"

	gvn-commit = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		git svn dcommit; \
                gvn update-mapping-database; \
		' --"
	gvn-co = "gvn-commit"


	gvn-fetch = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		git svn fetch; \
                gvn update-mapping-database; \
		' --"
	gvn-fe = "gvn-fetch"
	gvn-get = "gvn-fetch"

	gvn-status = "status -s"
	gvn-st = "gvn-status"
	gvn-revert = "!f(){ git checkout -- $1; };f"

        # ------
        gvn-hash = "gvn-cmd-hash"
        gvn-convert-hashes = "gvn-cmd-convert-hashes"

        # ------
	# returns current git-svn branch name
	gvn-currentbranch = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		branch=`git svn info | grep URL | rev | sed \"s,\\/, ,g\" | git awk1 | rev;`; \
		echo $branch' --"

	# returns 1 if current git-svn branch name matches current git branch name
	gvn-branchmatch = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		branch_git=`git currentbranch`; \
		branch_svn=`gvn currentbranch`; \
		if [[ \"$branch_git\" == \"$branch_svn\" ]]; then \
		  echo 1; \
		else \
		  echo 0; \
		fi' --"

	# print error if current git-svn branch does not match else nothing is printed
	# ATTENTION: naming is a limitation that should be fine
	# master needs to be renamed to trunk!
	# branch names must match and not called trunk!
	gvn-check-for-branch-name-match = "!bash -c '\
		branch_git=`git currentbranch`; \
		branch_svn=`gvn currentbranch`; \
		if [[ \"$branch_git\" != \"$branch_svn\" ]]; then \
                  echo \"ERROR: Branch is not a real svn branch as branch name does not match svn remote branch name: <$branch_git> != <$branch_svn>. Aborting operation.\"; \
		  exit -1; \
		fi' --"

	gvn-check-for-branch-name-missmatch = "!bash -c '\
		branch_git=`git currentbranch`; \
		branch_svn=`gvn currentbranch`; \
		if [[ \"$branch_git\" == \"$branch_svn\" ]]; then \
                  echo \"ERROR: Detected branch to be bound to real svn branch: <$branch_git> == <$branch_svn>. Aborting operation.\"; \
		  exit -1; \
		fi' --"

	gvn-check-branch-to-be-svn-branch = "!bash -c '\
		branch_svn=`gvn currentbranch || true`; \
		if [[ \"$branch_svn\" == \"\" ]]; then \
                  echo \"ERROR: Branch is not a real svn branch. No svn branch detect. Aborting operation.\"; \
		  exit -1; \
		fi' --"

        # --------
        # create git-svn branch of current branch that must be a a valid git-svn branch name matching with the git branch name
	# futhermore no local changes must be there
	gvn-branch = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		set -e; \
		gvn check-for-branch-name-match; \
		git check-for-unexpected-local-changes; \
                git svn branch \"$1\" -m \"Created branch \"$1\"\" ; \
                gvn update-mapping-database; \
                remote=`git branch -ra --no-color | egrep \"\\/$1\"`; \
                git checkout -b \"$1\" $remote' --"

        # -------
	gvn-rebase = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		head_svn=`git svn log --oneline --show-commit --no-abbrev --limit 1 | git awk3`; \
		head_git=`git rev-parse HEAD`; \
		is_git_on_top_of_svn_head=`git rev-list $head_git | grep $(git rev-parse $head_svn)`; \
		if [[ \"\" == \"\" ]]; then \
		  datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
		  git tag -a gvn_rebase_${datetime}_git_${head_git}_to_svn_${head_svn} -m \"git svn rebase tag $datetime (git $head_git rebased to svn $head_svn)\"; \
		  echo \"Created Tag gvn_rebase_$datetime_${datetime}_git_${head_git}_to_svn_${head_svn}\"; \
		fi; \
		git svn rebase' --"

        # -------
	gvn-update = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		set -e; \
		gvn check-for-branch-name-match; \
		git check-for-unexpected-local-changes; \
		gvn fetch; \
		gvn rebase' --"
        gvn-up = "gvn-update"
        gvn-u = "gvn-update"

        # -------
	gvn-update-stash = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		set -e; \
		gvn check-for-branch-name-match; \
                changes=`git stash-local-changes-if-any`; \
		gvn fetch; \
		gvn rebase; \
		if [[ \"$changes\" != \"\" ]]; then \
		  git stash pop; \
		fi' --"
        gvn-us = "gvn-update-stash"
        gvn-ups = "gvn-update-stash"
	#
	gvn-update-commit = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		set -e; \
		gvn check-for-branch-name-match; \
		git check-for-unexpected-local-changes; \
		gvn fetch; \
		gvn rebase; \
		gvn commit' --"
        gvn-uc = "gvn-update-commit"
	#
	gvn-stash-update-commit-unstash = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
		set -e; \
		gvn check-for-branch-name-match; \
                changes=`git stash-local-changes-if-any`; \
		gvn fetch; \
		gvn rebase; \
		gvn commit; \
		if [[ \"$changes\" != \"\" ]]; then \
		  git stash pop; \
		fi' --"
        gvn-ucs = "gvn-stash-update-commit-unstash"
        gvn-suc = "gvn-stash-update-commit-unstash"

	# -------
        # usage: gvn-cherry-pick <hash>
	gvn-cherry-pick = "!bash -c ' \
		set -x; \
		set -e; \
		git check-for-unexpected-local-changes; \
		svn_remote_commit_to_pick=\"$1\"; \
		svn_url=`git log $svn_remote_commit_to_pick^..$svn_remote_commit_to_pick | grep git-svn-id | git awk2 | sed \"s,@, r,g\" | git awk1`; \
		svn_rev=`git log $svn_remote_commit_to_pick^..$svn_remote_commit_to_pick | grep git-svn-id | git awk2 | sed \"s,@, r,g\" | git awk2`; \
		svn_project=`git branch -r --contains $svn_remote_commit_to_pick --no-color | git awk1`; \
		svn_commit_message=`git log -n 1 --format=format:'%B' $svn_remote_commit_to_pick | egrep -v \"git-svn-id\"`; \
		echo \"CP: $svn_url $svn_rev $svn_project\"; \
		git cherry-pick $svn_remote_commit_to_pick -n; \
		if [[ $? == 0 ]]; then \
		  anything_to_commit=`git status --untracked-files=no --porcelain`; \
                  if [[ \"$anything_to_commit\" == \"\" ]]; then \
  		    echo -e \"\nINFO: Cherry-Pick did not change anything. Nothing to commit.\n\"; \
		  else \
                    git commit -a -m \"$(echo -e \"[CP: $svn_project $svn_rev] $svn_commit_message \n\n [CPE: $svn_project $svn_rev $svn_url]\")\"; \
		  fi; \
		else \
  		  echo -e \"\nWARNING: Manual rework required. Run gvn-cp-cont.sh when finished.\n\"; \
		  git status -uno; \
		  echo -e \"git commit -a -m \"$(echo -e \"[CP: $svn_project $svn_rev (modified)] $svn_commit_message \n\n [CPE: $svn_project $svn_rev $svn_url]\")\"\" > gvn-cp-cont.sh; \
                  cat gvn-cp-cont.sh; \
		fi' --"
        gvn-cp = "gvn-cherry-pick" 

        # -----------------------------
        # add svn to git sandbox
        # usage: gvn-clone-add <full_svn_url_without_trunk_in_std_layout> <origin_name> <new_trunk_branch_name>
        gvn-clone-add = "!bash -c ' \
		set -e; \
		git check-for-unexpected-local-changes; \
		branch_current=`git branch --show-current`; \
		git svn init \"$1\" -s -R\"$2\" --prefix \"$2\"/ .; \
		gvn fetch \"$2\"; \
		git checkout -b \"$3\" \"$2\"/trunk; \
		git checkout $branch_current' --"
	gvn-ca = "gvn-clone-add"

        # usage: gvn-clone <full_svn_url_without_trunk_in_std_layout>
	gvn-clone = "!bash -c 'git svn clone \"$1\" -s .' --"
	gvn-c = "gvn-clone"

	gvn-ls = "ls-files"

        # --------------------------
        # diff difftool = dd for gvn

	gvn-dd  = "dd"
        gvn-ddc = "ddc"
	gvn-ddv = "ddv"

        # -------------------------
        # blame
        # below requires python pygmentize !
	gvn-blame = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; gvn cmd-blame -s -a 8 -- \"$@\"' --"
	gvn-blame-syntax-intern = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; gvn cmd-blame -s -a 8 -p -A -- \"$@\"' --"
	gvn-blame-syntax-extern = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; gvn cmd-blame -s -a 8 -p -e -A -- \"$@\"' --"
	gvn-blame-syntax-extern-debug = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; gvn cmd-blame -d -s -p -e -A -- \"$@\"' --"
        gvn-b = "gvn-blame"
        gvn-bse = "gvn-blame-syntax-extern"
        gvn-bsi = "gvn-blame-syntax-intern"
        gvn-bs = "gvn-bse"

        # git blaming using gvn_blame.py
	git-blame = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; gvn cmd-blame -a 8 -- \"$@\"' --"
	git-blame-syntax-intern = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; gvn cmd-blame -a 8 -p -A -- \"$@\"' --"
	git-blame-syntax-extern = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; gvn cmd-blame -a 8 -p -e -A -- \"$@\"' --"
	git-blame-syntax-extern-debug = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; gvn cmd-blame -d -p -e -A -- \"$@\"' --"
	b = "git-blame"
        bsi = "git-blame-syntax-intern"
	bse = "git-blame-syntax-extern"
	bs = "bse"

        # --------------------------
        gvn-update-mapping-database = "!bash -c ' \
          set -e; \
          dot_git_path=`git get-dot-git-path`; \
          mkdir -p $dot_git_path/gvn/rev/; \
          gvn cmd-update-mapping-db; \
          ' --"
        gvn-umdb = "gvn-update-mapping-database"

        # --------------------------
        # worktree
        gvn-worktree-delete = "!bash -c ' \
          set -e; \
          worktree_name=$1; \
          branch_current=`git branch --show-current`; \
          dot_git_path=`git get-dot-git-path`; \
          if [ ! -f $dot_git_path/gvn/branch/$worktree_name ]; then \
            echo \"ERROR: worktree/branch with name $worktree_name does not exist. Aborting delete operation.\"; \
            exit -1; \
          fi; \
          git worktree remove $worktree_name; \
          rm -rf $dot_git_path/gvn/branch/$worktree_name; \
          ' --"
        gvn-wd = "gvn-worktree-delete"

        gvn-wl = "wl"

        gvn-wg = "wg"

        # usage: gvn wa <worktree_branch_name>
        # Adds a worktree with <worktree_branch_name> parallel to the root folder of the current git sandbox.
        # The name of the folder is "<worktree_branch_name>",
        # Worktrees are special in case of git svn => for synching (automatic merging/rebasing) we need to know the base of the worktree, this is the name of the svn branch base!
        # We only allow one parameter no <commit-ish> parameter selection, hence it is always forked of the current branch which must be a real svn branch !
        # Note that base information is required and stored in .git/gvn/branch/<worktree/branch> files as "<worktree> <base svn branch of worktree>".
        # Worktrees can only be created on branch that is related to real svn branch (name match of branch and svn repo branch) !
        gvn-worktree-add = "!bash -c ' \
          set -e; \
          worktree_name=$1; \
	  gvn check-branch-to-be-svn-branch; \
	  gvn check-for-branch-name-match; \
          branch_current=`git branch --show-current`; \
          dot_git_path=`git get-dot-git-path`; \
          mkdir -p $dot_git_path/gvn/branch/; \
          if [ -f $dot_git_path/gvn/branch/$worktree_name ]; then \
            echo \"ERROR: worktree/branch with name $worktree_name already exists. Aborting creation of new worktree/branch.\"; \
            exit -1; \
          fi; \
          main_path=`git rev-parse --path-format=absolute --show-toplevel`; \
          cd $main_path; cd ..; cwd=`pwd`; cd $main_path; \
          path=\"$cwd/$worktree_name\"; \
          git worktree add $path -b $worktree_name; \
          echo \"$worktree_name $branch_current\" > $dot_git_path/gvn/branch/$worktree_name; \
          ' --"
        gvn-wa = "gvn-worktree-add"

        # usage: gvn wr <worktree_base_branch>
        # rebases all local changes after updating to the changes from the worktree_base_branch which is a git svn branch and so a real svn branch
        # Working branch must not be a real svn branch but a worktree branch of a real one.
        gvn-worktree-rebase="!bash -c '\
          set -e; \
          branch_to_rebase_to=$1; \
	  gvn check-branch-to-be-svn-branch; \
	  gvn check-for-branch-name-missmatch; \
          if [ `git rev-parse --verify $branch_to_rebase_to 2>/dev/null` ]; then \
            branch_to_rebase=`git rev-parse --abbrev-ref HEAD`; \
            head_branch_to_rebase=`git rev-parse HEAD`; \
            head_branch_to_rebase_to=`git rev-parse $branch_to_rebase_to`; \
            if [[ \"$head_branch_to_rebase\" != \"$head_branch_to_rebase_to\" ]]; then \
              datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
              git tag -a gvn_worktree_rebase_${datetime}_${branch_to_rebase}_${head_branch_to_rebase}_to_${branch_to_rebase_to}_${head_branch_to_rebase_to} -m \"git rebase tag $datetime (git ${branch_to_rebase} ${head_branch_to_rebase} to ${branch_to_rebase_to} ${head_branch_to_rebase_to})\"; \
              echo \"Created Tag for git rebase: gvn_worktree_rebase_${datetime}_${branch_to_rebase}_${head_branch_to_rebase}_to_${branch_to_rebase_to}_${head_branch_to_rebase_to}\"; \
            fi; \
            git rebase $@; \
          else \
            git rebase $@; \
          fi' --"
        gvn-wrebase = "gvn-worktree-rebase"
        gvn-wr = "gvn-worktree-rebase"

        # usage: gvn wm <worktree_branch>
        # merges back changes from a worktree branch that base upon the current branch which is a git svn branch and so a real svn branch
        gvn-worktree-merge="!bash -c '\
          set -e; \
          branch_to_merge_to=$1; \
	  gvn check-branch-to-be-svn-branch; \
	  gvn check-for-branch-name-match; \
          if [ `git rev-parse --verify $branch_to_merge_to 2>/dev/null` ]; then \
            branch_to_merge=`git rev-parse --abbrev-ref HEAD`; \
            head_branch_to_merge=`git rev-parse HEAD`; \
            head_branch_to_merge_to=`git rev-parse $branch_to_merge_to`; \
            if [[ \"$head_branch_to_merge\" != \"$head_branch_to_merge_to\" ]]; then \
              datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
              git tag -a gvn_worktree_merge_${datetime}_${branch_to_merge}_${head_branch_to_merge}_to_${branch_to_merge_to}_${head_branch_to_merge_to} -m \"git merge tag $datetime (git ${branch_to_merge} ${head_branch_to_merge} to ${branch_to_merge_to} ${head_branch_to_merge_to})\"; \
              echo \"Created Tag for git merge: gvn_worktree_merge_${datetime}_${branch_to_merge}_${head_branch_to_merge}_to_${branch_to_merge_to}_${head_branch_to_merge_to}\"; \
            fi; \
            git merge --ff-only $@; \
          else \
            git merge $@; \
          fi' --"
        gvn-wmerge = "gvn-worktree-merge"
        gvn-wm = "gvn-worktree-merge"

        # usage: gvn ws // if on worktree branch not connected to svn (created before with gvn wa <branchname>
        #        gvn ws <branchname> // if on main branch connected to svn
        # automatically detects base branch
        # if branches are related each other it automatically selects and runs gvn worktree-rebase or worktree-merge.
        gvn-worktree-sync="!bash -c '\
          set -e; \
          branch_to_sync=$1; \
	  gvn check-branch-to-be-svn-branch; \
          branch_current=`git branch --show-current`; \
          branch_current_svn=`gvn currentbranch`; \
          dot_git_path=`git get-dot-git-path`; \
          \
          if [ -z $branch_to_sync ]; then \
            if [ -f $dot_git_path/gvn/branch/$branch_current ]; then \
              branch_to_sync=`cat $dot_git_path/gvn/branch/$branch_current | git awk2`; \
              echo \"INFO: Auto-detected branch to sync to be <$branch_to_sync>.\"; \
            else \
              possible_branches=`cat $dot_git_path/gvn/branch/* | grep \"$branch_current\\$\" | git awk1 | sed \"s,^, ,g\"`; \
              if [[ \"$possible_branches\" == \"\" ]]; then \
                echo \"ERROR: Could not detect any branch to sync. No worktree/branch available related to $branch_current.\"; \
                exit -1; \
              else \
                echo \"ERROR: Master worktree detected / Could not detect base to sync. Candidates are:\"; \
                echo \"$possible_branches\"; \
                exit -1; \
              fi; \
            fi; \
          fi; \
          \
          if [[ \"$branch_to_sync\" == \"$branch_current\" ]]; then \
            echo \"ERROR: Cannot sync branch to same branch <$branch_to_sync> == <$branch_current>.\"; \
            exit -1; \
          fi; \
          \
          if [[ \"$branch_current\" == \"$branch_current_svn\" ]]; then \
            echo \"INFO: try to sync via merge <$branch_to_sync> into <$branch_current> for svn base <$branch_current_svn>.\"; \
            if [ -f $dot_git_path/gvn/branch/$branch_current ]; then \
              echo \"ERROR: Found unexpected branch information file <$dot_git_path/gvn/branch/$branch_current>. Must not exist for none worktree / main branches that are bound to real svn repos. Aborting sync (merge) operation.\"; \
              exit -1; \
            fi; \
            if [ -f $dot_git_path/gvn/branch/$branch_to_sync ]; then \
              branch_to_sync_svn_from_file=`cat $dot_git_path/gvn/branch/$branch_to_sync | git awk2`; \
              if [[ \"$branch_to_sync_svn_from_file\" != \"$branch_current_svn\" ]]; then \
                echo \"ERROR: Detected missmatch in svn base branch <$branch_to_sync_svn_from_file> (<$branch_to_sync>) != <$branch_current_svn> ($branch_current). Aborted sync (merge) of <$branch_to_sync> into <$branch_current>.\"; \
                exit -1; \
              fi; \
              echo \"INFO: detected current branch <$branch_current> to be base for branch to sync <$branch_to_sync>.\"; \
              echo \"INFO: merging branch to sync <$branch_to_sync> into current branch <$branch_current>.\"; \
              changes=`git stash-local-changes-if-any`; \
              gvn wmerge $branch_to_sync; \
              if [[ \"$changes\" != \"\" ]]; then \
	        git stash pop; \
	      fi; \
            else \
              echo \"ERROR: Could not find branch information file <$dot_git_path/gvn/branch/$branch_to_sync>. Aborting sync (merge) operation.\"; \
              exit -1; \
            fi; \
          \
          elif [[ \"$branch_to_sync\" == \"$branch_current_svn\" ]]; then \
            echo \"INFO: try to sync via rebase <$branch_current> onto <$branch_to_sync> for svn base <$branch_current_svn>.\"; \
            if [[ -f $dot_git_path/gvn/branch/$branch_to_sync ]]; then \
              echo \"ERROR: Found unexpected branch information file <$dot_git_path/gvn/branch/$branch_to_sync>. Must not exist for none worktree / main branches that are bound to real svn repos. Aborting sync (rebase) operation.\"; \
              exit -1; \
            fi; \
            if [[ -f $dot_git_path/gvn/branch/$branch_current ]]; then \
              branch_current_svn_from_file=`cat $dot_git_path/gvn/branch/$branch_current | git awk2`; \
              if [[ \"$branch_current_svn_from_file\" != \"$branch_current_svn\" ]]; then \
                echo \"ERROR: Detected missmatch in svn base branch <$branch_current_svn_from_file> (<$branch_to_sync>) != <$branch_current_svn> ($branch_current). Aborted sync (rebase) of <$branch_current> onto <$branch_to_sync>.\"; \
                exit -1; \
              fi; \
              echo \"INFO: detected current branch <$branch_current> to base upon branch to sync <$branch_to_sync>.\"; \
              echo \"INFO: rebasing current branch <$branch_current> onto branch to sync <$branch_to_sync>.\"; \
              changes=`git stash-local-changes-if-any`; \
              gvn wrebase $branch_to_sync; \
              if [[ \"$changes\" != \"\" ]]; then \
	        git stash pop; \
	      fi; \
            else \
              echo \"ERROR: Could not find branch information file <$dot_git_path/gvn/branch/$branch_current>. Aborting sync (rebase) operation.\"; \
              exit -1; \
            fi; \
          \
          else \
            echo \"ERROR: Could not detect valid sync branches for current <$branch_current> to <$branch_to_sync>. Aborting sync operation.\"; \
            exit -1; \
          fi' --"

        gvn-wsync = "gvn-worktree-sync"
        gvn-ws = "gvn-worktree-sync"

	gvn-stw = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/gvn_stw.sh -- \"$@\"' --"
	gvn-wst = "gvn-stw"


