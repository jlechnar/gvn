# Description: GVN - Git sVN - git configuration and more for easier usage of git-svn, test suite
# Author:      jlechnar
# Licence:     GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
# Source:      https://github.com/jlechnar/gvn

[alias]
        # --------------------------
        # log

        # -----------
        # base
        lb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_log.sh -- \"$@\"' --"
        l  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_log.sh -p -- \"$@\"' --"

        lbf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_log.sh -f -- \"$@\"' --"
        lfb = "lbf"
        lf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_log.sh -p -f -- \"$@\"' --"

        lab = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_log.sh -a -- \"$@\"' --"
        la  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_log.sh -p -a -- \"$@\"' --"

        labf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_log.sh -a -f -- \"$@\"' --"
        laf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_log.sh -p -a -f -- \"$@\"' --"

        # -----------
        # actual
        lgb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -- \"$@\"' --"
        lg = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -p -- \"$@\"' --"

        lgbf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -N -f -- \"$@\"' --"
        lgfb = "lgbf"
        lgf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -N -f -p -- \"$@\"' --"

        lgbl = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -N -c -- \"$@\"' --"
        lglb = "lgbl"
        lgl  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -N -c -p -- \"$@\"' --"

        lgblf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -N -c -f -- \"$@\"' --"
        lgbfl = "lgbfl"
        lglbf = "lgbfl"
        lglfb = "lgbfl"
        lgflb = "lgbfl"
        lgfbl = "lgbfl"
        lglf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -N -c -f -p -- \"$@\"' --"
        lgfl = "lglf"

        # -----------
        # all
        lgab = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -a -- \"$@\"' --"
        lga  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -a -p -- \"$@\"' --"

        lgabf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -a -N -f -- \"$@\"' --"
        lgafb = "lgabf"
        lgaf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -a -N -f -p -- \"$@\"' --"

        lgabl = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -a -N -c -- \"$@\"' --"
        lgalb = "lgabl"
        lgal  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -a -N -c -p -- \"$@\"' --"

        lgalfb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -a -N -c -f -- \"$@\"' --"
        lgalbf = "lgalfb"
        lgaflb = "lgalfb"
        lgafbl = "lgalfb"
        lgablf = "lgalfb"
        lgabfl = "lgalfb"
        lgalf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lg.sh -a -N -c -f -p -- \"$@\"' --"
        lgafl = "lgalf"

        # -----------
        # log with diff of file
        logd = "log --all --follow -p --"

        # --------------------------
        # root
        root = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_root.sh' --"


        # --------------------------
        rebase-in-progress = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                dot_git_path=`git get-dot-git-path-abs`; \
                rebase_folder_name=`ls $dot_git_path | grep rebase`; \
                if [[ \"$rebase_folder_name\" == \"\" ]]; then \
                  echo 0; \
                else \
                  echo 1; \
                fi' --"

        merge-in-progress = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                dot_git_path=`git get-dot-git-path-abs`; \
                merge_folder_name=`ls $dot_git_path | grep merge`; \
                if [[ \"$merge_folder_name\" == \"\" ]]; then \
                  echo 0; \
                else \
                  rebase_in_progress=`git rebase-in-progress`; \
                  if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                    echo 0; \
                  else \
                    echo 1; \
                  fi; \
                fi' --"

        # --------------------------
        # merge
        # note that depending on merge OR rebase-merge ours/theis exchange in show/diff commands automatically
        # automatic detecting rebase-merges helps to avoid confusion
  # with ours in below commands always our/mine changes are meant independent on merge operation type

        merge-file-diff = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_merge_file_diff.sh \"$@\"' --"
        mfd = "merge-file-diff"

        merge-diff = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                a=\"================================================================================\"; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  echo \"$a\n$a\nMERGE REBASE - BASE\n$a\"; \
                  git diff -1 $1; \
                  echo \"$a\n$a\nMERGE REBASE - OURS\n$a\"; \
                  git diff -3 $1; \
                  echo \"$a\n$a\nMERGE REBASE - THEIRS\n$a\"; \
                  git diff -2 $1; \
                  echo \"$a\"; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  echo \"$a\n$a\nMERGE - BASE\n$a\"; \
                  git diff -1 $1; \
                  echo \"$a\n$a\nMERGE - OURS\n$a\"; \
                  git diff -2 $1; \
                  echo \"$a\n$a\nMERGE - THEIRS\n$a\"; \
                  git diff -3 $1; \
                  echo \"$a\"; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        md = "merge-diff"

        merge-diff-ours = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git diff -3 $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git diff -2 $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mdo = "merge-diff-ours"

        merge-diff-theirs = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git diff -2 $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git diff -3 $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mdt = "merge-diff-theirs"

        merge-diff-base = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git diff -1 $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git diff -1 $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mdb = "merge-diff-base"

        merge-diff-wordwise = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                a=\"================================================================================\"; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  echo \"$a\n$a\nMERGE REBASE - BASE\n$a\"; \
                  git dw -1 $1; \
                  echo \"$a\n$a\nMERGE REBASE - OURS\n$a\"; \
                  git dw -3 $1; \
                  echo \"$a\n$a\nMERGE REBASE - THEIRS\n$a\"; \
                  git dw -2 $1; \
                  echo \"$a\"; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  echo \"$a\n$a\nMERGE - BASE\n$a\"; \
                  git dw -1 $1; \
                  echo \"$a\n$a\nMERGE - OURS\n$a\"; \
                  git dw -2 $1; \
                  echo \"$a\n$a\nMERGE - THEIRS\n$a\"; \
                  git dw -3 $1; \
                  echo \"$a\"; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mdw = "merge-diff-wordwise"

        merge-diff-wordwise-ours = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git dw -3 $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git dw -2 $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mdwo = "merge-diff-wordwise-ours"

        merge-diff-wordwise-theirs = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git dw -2 $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git dw -3 $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mdwt = "merge-diff-wordwise-theirs"

        merge-diff-wordwise-base = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git dw -1 $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git dw -1 $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mdwb = "merge-diff-wordwise-base"

        merge-file-ours = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                echo \"test\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                a=\"================================================================================\"; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git checkout --theirs $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git checkout --ours $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mfo = "merge-file-ours"

        merge-file-theirs = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                a=\"================================================================================\"; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git checkout --ours $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git checkout --theirs $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mft = "merge-file-theirs"

        merge-file-base = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_merge_file_base.sh \"$@\"' --"
        mfb = "merge-file-base"

        merge-file-merge = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                rebase_in_progress=`git rebase-in-progress`; \
                merge_in_progress=`git merge-in-progress`; \
                a=\"================================================================================\"; \
                if [[ \"$rebase_in_progress\" == \"1\" ]]; then \
                  git checkout --merge $1; \
                elif [[ \"$merge_in_progress\" == \"1\" ]]; then \
                  git checkout --merge $1; \
                else \
                  echo \"ERROR: There is no merge nor rebase in progress. Aborting operation.\"; \
                  exit -1; \
                fi' --"
        mfm = "merge-file-merge"

        dtm = "dt HEAD..REBASE_HEAD"
        dtdm = "dtd HEAD..REBASE_HEAD"
        mdtd = "mdtd"
        mt = "mergetool"
        m = "mt"

        merge-wrapper="!bash -c '\
          branch_to_merge_to=$1; \
          if [ `git rev-parse --verify $branch_to_merge_to 2>/dev/null` ]; then \
            branch_to_merge=`git rev-parse --abbrev-ref HEAD`; \
            head_branch_to_merge=`git rev-parse HEAD`; \
            head_branch_to_merge_to=`git rev-parse $branch_to_merge_to`; \
            if [[ \"$head_branch_to_merge\" != \"$head_branch_to_merge_to\" ]]; then \
              datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
              git tag -a git_merge_${datetime}_${branch_to_merge}_${head_branch_to_merge}_to_${branch_to_merge_to}_${head_branch_to_merge_to} -m \"git merge tag $datetime (git ${branch_to_merge} ${head_branch_to_merge} to ${branch_to_merge_to} ${head_branch_to_merge_to})\"; \
              echo \"Created Tag for git merge: git_merge_${datetime}_${branch_to_merge}_${head_branch_to_merge}_to_${branch_to_merge_to}_${head_branch_to_merge_to}\"; \
            fi; \
            git merge $@; \
          else \
            git merge $@; \
          fi' --"

        # -------
        currentbranch = "rev-parse --abbrev-ref HEAD"
        branch-current = "branch --show-current"

        # -------
        awk1 = "!awk '{print $1}'"
        awk2 = "!awk '{print $2}'"
        awk3 = "!awk '{print $3}'"
        awk-1 = "!rev | awk '{print $1}' | rev"

        # -------
        check-for-unexpected-local-changes = "!bash -c '\
                changes=`git status --short | grep -v \"??\"`; \
                if [[ \"$changes\" != \"\" ]]; then \
                  git status -uno; \
                  echo \"ERROR: There are uncommited changes. Aborting operation.\"; \
                  exit -1; \
                fi' --"

        stash-local-changes-if-any = "!bash -c '\
                changes=`git status --short | grep -v \"??\"`; \
                if [[ \"$changes\" != \"\" ]]; then \
                  echo "INFO: Detected local changes. Automatic stashing them for later restore."; \
                  git stash; \
                  echo "1"; \
                fi' --"

        any-local-changes = "!bash -c '\
                changes=`git status --short | grep -v \"??\"`; \
                if [[ \"$changes\" != \"\" ]]; then \
                  echo 1; \
                else \
                  echo 0; \
                fi' --"

       get-dot-git-path = "!bash -c '\
          dot_git_path=`git rev-parse --git-dir | sed \"s,/\\.git/,/\\.git /,g\" | git awk1`; \
          echo \"$dot_git_path\" \
          ' --"

       get-dot-git-path-abs = "!bash -c '\
          dot_git_path=`git rev-parse --git-dir | sed \"s,/\\.git/,/\\.git /,g\" | git awk1`; \
          dot_git_path_abs=`realpath $dot_git_path`; \
          echo \"$dot_git_path_abs\" \
          ' --"


        # --------------------------
        # diff
        d = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -f -- \"$@\"' --"
        dnc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -f -N -- \"$@\"' --"
        diffc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -f -c -- \"$@\"' --"
        dc = "diffc"
        dcnc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -f -N -c -- \"$@\"' --"

        diff-wordwise-no-follow = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -w -- \"$@\"' --"
        dwnf = "diff-wordwise-no-follow"

        dw = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -w -f -- \"$@\"' --"
        diff-wordwise = "dw"
        diffw = "dw"
        dwc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -w -f -c -- \"$@\"' --"
        dwnc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -w -f -N -- \"$@\"' --"
        dwcnc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -w -f -c -N -- \"$@\"' --"

        dw3 = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -W -f -- \"$@\"' --"
        dw3c = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -W -f -c -- \"$@\"' --"
        dw3nc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -W -f -N -- \"$@\"' --"
        dw3cnc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -W -f -c -N -- \"$@\"' --"

        diffw2 = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -f -i -- \"$@\"' --"
        dw2 = "diffw2"

        dl = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -l -f -- \"$@\"' --"
        dlc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -l -f -c -- \"$@\"' --"

        ds = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -s -f -- \"$@\"' --"
        dsc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -s -f -c -- \"$@\"' --"

        db = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -b -f -- \"$@\"' --"
        dbc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -b -f -c -- \"$@\"' --"

        db3 = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -B -f -- \"$@\"' --"
        db3c = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_diff.sh -B -f -c -- \"$@\"' --"

        # ----------------------------
        # diff/difftool files
        # NOTE: diff-files already used in base function
        diff-two-files = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                set -x; \
                if [[ \"$#\" == \"4\" ]]; then \
                  git diff $1:$2 $3:$4; \
                elif [[ \"$#\" == \"2\" ]]; then \
                  git diff $1 $2; \
                else \
                  echo \"ERROR: options missing - check parameters git diff-two-files {<rev1>} <file1> {<rev2>} <file2> or git diff-two-files <file1> <file2>\"; \
                  exit -1; \
                fi' --"
        df = "diff-two-files"

        diff-two-files-wordwise = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                if [[ \"$#\" == \"4\" ]]; then \
                  git diff-wordwise-no-follow $1:$2 $3:$4; \
                elif [[ \"$#\" == \"2\" ]]; then \
                  git diff-wordwise-no-follow $1 $2; \
                else \
                  echo \"ERROR: options missing - check parameters git diff-two-files-wordwise {<rev1>} <file1> {<rev2>} <file2> or git diff-two-files-wordwise <file1> <file2>\"; \
                  exit -1; \
                fi' --"
        dfw = "diff-two-files-wordwise"

        difftool-two-files = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                if [[ \"$#\" == \"4\" ]]; then \
                  git difftool $1:$2 $3:$4; \
                elif [[ \"$#\" == \"2\" ]]; then \
                  git difftool $1 $2; \
                else \
                  echo \"ERROR: options missing - check parameters git difftool-files {<rev1>} <file1> {<rev2>} <file2> or git difftool-files <file1> <file2>\"; \
                  exit -1; \
                fi' --"
        dtf = "difftool-two-files"

        # --------------------------
        # diff not indexed files
        # usage: git nidw <file1> <file2>
        nidiff = "diff --no-index"
        nid = "nidiff"
        nidnc = "nidiff --no-color"
        nidiffw = "diff -w -U0 --word-diff-regex=[^[:space:]] --no-index"
        nidw = "nidiffw"
        nidwnc = "nidiffw --no-color"

        nidiffw2 = "diff --ignore-all-space --ignore-blank-lines --ignore-space-change --no-index"
        nidw2 = "nidiffw2"

        # not git diff indirection
        ngdiff = "nidiff"
        ngd = "nid"
        ngdnc = "nidnc"
        ngdiffw = "nidiffw"
        ngdw = "nidw"
        ngdwnc = "nidwnc"

        ngdiffw2 = "nidiffw2"
        ngdw2 = "nidiffw2"

        # --------------------------
        # add "* diff=nocomments" to .gitattributes for this to work !
        diff-ignore-comments = "-c diff.nocomments.textconv=~/bin/bin_gvn/git_diff_filter_comments.sh diff"
        dic = "diff-ignore-comments"

        # --------------------------
        diffall = "log --follow -p --"
        da = "diffall"

        diffallword = "log --follow -p -w -U0 --word-diff-regex=[^[:space:]] --"
        daw = "diffallword"

        # --------------------------
        # difftool -d = dtd - directory difftool

        dtd = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_difftool.sh -d -f -- \"$@\"' --"
        dtdc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_difftool.sh -d -f -c -- \"$@\"' --"
        # version change
        dtdv = "!f(){ git difftool -d \"$1\"^..\"$1\"; };f"

        # --------------------------
        # difftool

        dt = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_difftool.sh -f -- \"$@\"' --"
        dtc = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_difftool.sh -f -c -- \"$@\"' --"

        # --------------------------
        # diff prev

        diff-prev = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; prev_hash=`git log --no-color --format=format:%h \"$@\" | head -n 1`; git diff $prev_hash^ \"$@\"' --"
        diffp = "diff-prev"
        dp = "diff-prev"

        diff-wordwise-prev = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; prev_hash=`git log --no-color --format=format:%h \"$@\" | head -n 1`; git diff-wordwise-no-follow $prev_hash^ \"$@\"' --"
        dpw = "diff-wordwise-prev"
        dwp = "diff-wordwise-prev"

        difftool-prev = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; prev_hash=`git log --no-color --format=format:%h \"$@\" | head -n 1`; git difftool $prev_hash^ \"$@\"' --"
        dtp = "difftool-prev"

        difftool-dir-prev = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; prev_hash=`git log --no-color --format=format:%h \"$@\" | head -n 1`; git difftool -d $prev_hash^ \"$@\"' --"
        dtdp = "difftool-dir-prev"


        # --------------------------
        # cat files of revision
        cat = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_cat.sh \"$@\" #' --"


        # link gvn/bin/git.sh to e.g. ~/bin/git.sh and add following alias to your shell (e.g. bash), this will wrap git rebase to add a tag when starting a rebase to a branch
        # alias git="~/bin/git.sh"

        # create tag on rebase if branch exists else let rebase error out
        rebase-wrapper="!bash -c '\
          branch_to_rebase_to=$1; \
          if [ `git rev-parse --verify $branch_to_rebase_to 2>/dev/null` ]; then \
            branch_to_rebase=`git rev-parse --abbrev-ref HEAD`; \
            head_branch_to_rebase=`git rev-parse HEAD`; \
            head_branch_to_rebase_to=`git rev-parse $branch_to_rebase_to`; \
            if [[ \"$head_branch_to_rebase\" != \"$head_branch_to_rebase_to\" ]]; then \
              datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
              git tag -a git_rebase_${datetime}_${branch_to_rebase}_${head_branch_to_rebase}_to_${branch_to_rebase_to}_${head_branch_to_rebase_to} -m \"git rebase tag $datetime (git ${branch_to_rebase} ${head_branch_to_rebase} to ${branch_to_rebase_to} ${head_branch_to_rebase_to})\"; \
              echo \"Created Tag for git rebase: git_rebase_${datetime}_${branch_to_rebase}_${head_branch_to_rebase}_to_${branch_to_rebase_to}_${head_branch_to_rebase_to}\"; \
            fi; \
            git rebase $@; \
          else \
            git rebase $@; \
          fi' --"

        rebase-notag="!bash -c 'git rebase $@;' --"


        # --------------------------
        # list files

        ls = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_ls.sh \"$@\" #' --"

        lsa = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lsa.sh \"$@\" #' --"

        # list files sorted by sizes
        ll = "!f(){ git ls-tree -r -t -l --full-name HEAD | sort -n -k 4; };f"

        # --------------------------
        # misc


        stat = "status -s"

        logv = "log --name-status"
        lv = "logv"
        log-files = "log -f"

        cpc = "cherry-pick"
        cp = "cherry-pick -n"
        dt = "difftool"

        status-uno = "status -uno"
        stat = "status-uno"
        st = "status-uno"
        sta = "status"
        stai = "status --ignored"

        co = "commit"

        add-updated = "add -u"
        addu = "add-updated"

        alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"


        # --------------------------
        # rebase
        rbi = "rebase -i"
        rbc = "rebase -continue"

        # --------------------------
        # adding
        add-interactive = "add -i"
        ai = "add-interactive"
        #
        add-updated = "add -u"
        au = "add-updated"

        # --------------------------
        # restoring
        restore-staged = "restore --staged"
        rs = "restore-staged"
        restore-staged-all = "restore --staged :/"
        rsa = "restore-staged-all"

        # --------------------------
        # remove r
        rm-cached-recursive = "rm --cached -r"
        rmcr = "rm-cached-recursive"
        # rm-cached = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git rm --cached \"$@\";' --"
        rm-cached = "rm --cached"
        rmr = "rm-cached"

        # --------------------------
        # restore
        restore = "checkout --"

        # --------------------------
        # stash

        s = "stash"
        # pop = apply + drop
        sp = "stash pop"
        sa = "stash apply"
        sdrop = "stash drop"
        sl = "stash list"
        #
        #stash-diff = "!bash -c 'set -e; if [ -z ${1+x} ]; then id=\"0\"; else id=\"$1\"; fi; git stash show -p $id;' --"
        stash-diff = "!bash -c 'set -e; if [ -z ${1+x} ]; then id=\"0\"; else id=\"$1\"; fi; git diff \"stash@{$id}\"^ \"stash@{$id}\";' --"
        sd = "stash-diff"
        #
        stash-difftool = "!bash -c 'set -e; if [ -z ${1+x} ]; then id=\"0\"; else id=\"$1\"; fi; git difftool \"stash@{$id}\"^ \"stash@{$id}\";' --"
        sdt = "stash-difftool"
        #
        stash-difftool-dir = "!bash -c 'set -e; if [ -z ${1+x} ]; then id=\"0\"; else id=\"$1\"; fi; git difftool -d \"stash@{$id}\"^ \"stash@{$id}\";' --"
        sdtd = "stash-difftool-dir"


        # --------------------------
        # finding / greping

        grep-log = "!f(){ git log --all -i --grep=\"$1\"; };f"
        find-all = "!f(){ git log --all -i --grep=\"$1\"; git grep \"$1\"; };f"

        find = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_find.sh \"$@\" #' --"

        find-old = "!bash -c ' \
                BWD=`pwd`; \
                cd -- \"${GIT_PREFIX:-.}\"; \
                CWD=`pwd`; \
                if [[ \"$#\" == \"1\" ]]; then \
                  rp=`realpath --relative-to=${CWD} ${BWD}`; \
                  git ls $rp | egrep \"$1\"; \
                elif [[ \"$#\" == \"2\" ]]; then \
                  git ls \"$2\" | egrep \"$1\"; \
                else \
                  echo \"ERROR: options missing - check parameters git find <file_name> <folder> OR git find <file_name> to search in current folder recursively\"; \
                  exit -1; \
                fi' --"
        f = "find"

        find-all = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_find_all.sh \"$@\" #' --"
        afind = "find-all"
        finda = "find-all"
        fa = "find-all"
        find-all-nc = "find-all --no-color"
        fanc = "find-all-nc"

        g = "grep"
        grep-nc = "grep --no-color"
        grepnc ="grep-nc"
        gnc = "grep-nc"

        egrep = "grep -E"
        ge = "egrep"
        egrep-nc = "egrep --no-color"
        grepnc = "egrep-nc"
        genc = "egrep-nc"

        grep-all = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_grep_all.sh \"$@\" #' --"
        agrep = "grep-all"
        grepa = "grep-all"
        ga = "grep-all"
        grep-all-nc = "grep-all --no-color"
        ganc = "grep-all-nc"



        # ---------------------------
        # stats
        stats-unpushed = "!bash -c 'nr=`git diff --stat @{u}..@ | grep '|' | wc -l`; echo $nr;' --"

        unpushed-commits = "log @{push}.. --oneline"

        # ---------------------------
        # branch

        get-current-branch = "rev-parse --abbrev-ref HEAD"

        # branch_exists=`git for-each-ref --format=\"%(refname:short)\" | grep \"^$branch_name$\"`;

        check-branch-exists = "!bash -c '\
                branch_name=$1; \
                branch_exists=`git branch --no-color -a | sed -r \"s,^(\\s+|\\*|\\+)\\s+,,g\" | sed -r \"s,^remotes/,,g\" | grep \"^$branch_name$\"`; \
                if [[ \"$branch_exists\" == \"\" ]]; then \
                  echo 0; \
                else \
                  echo 1; \
                fi' --"

        check-branch-exists-remote = "!bash -c '\
                branch_name=$1; \
                branch_exists=`git branch --no-color -a | sed -r \"s,^(\\s+|\\*|\\+)\\s+,,g\" | grep \"^remotes/\" | sed -r \"s,^remotes/,,g\" | grep \"^$branch_name$\"`; \
                if [[ \"$branch_exists\" == \"\" ]]; then \
                  echo 0; \
                else \
                  echo 1; \
                fi' --"

        check-branch-exists-local = "!bash -c '\
                branch_name=$1; \
                branch_exists=`git branch --no-color -a | sed -r \"s,^(\\s+|\\*|\\+)\\s+,,g\" | grep -v \"^remotes/\" | sed -r \"s,^remotes/,,g\" | grep \"^$branch_name$\"`; \
                if [[ \"$branch_exists\" == \"\" ]]; then \
                  echo 0; \
                else \
                  echo 1; \
                fi' --"

        bm = "branch -m"

        bc = "checkout"

        branch-list-all = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_branch_list.sh -a' --"
        bla = "branch-list-all"
        branch-list = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_branch_list.sh' --"
        bl = "branch-list"
        branch-add = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_branch_add.sh \"$@\"' --"
        ba = "branch-add"

        branch-push-remote = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_branch_push_remote.sh \"$@\"' --"
        bpr = "branch-push-remote"
        bp = "branch-push-remote"

        branch-delete-local = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_branch_delete.sh -l \"$@\"' --"
        bdl = "branch-delete-local"

        branch-delete-remote = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_branch_delete.sh -r \"$@\"' --"
        bdr = "branch-delete-remote"

        branch-delete-all = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_branch_delete.sh -r -l \"$@\"' --"
        bda = "branch-delete-all"
        bd = "branch-delete-all"

        branch-remote-to-local = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_checkout.sh \"$@\"' --"
        brtl = "branch-remote-to-local"
        bc = "branch-remote-to-local"

        branch-merged-to-current = "git branch --merged"
        branch-not-merged-to-current = "git branch --no-merged"

        has-upstream ="!bash -c ' \
                git rev-parse @{u} &> /dev/null; \
                if [[ \"$?\" == \"0\" ]]; then \
                  echo 1; \
                else \
                  echo 0; \
                fi' --"

        nr-stashes = "!bash -c 'nr=`git stash list | wc -l`; echo $nr;' --"
        nr-branches = "!bash -c 'nr=`git branch --no-color | egrep -v \"[ ]*bb.\" | wc -l`; echo $nr;' --"
        nr-branches-not-merged = "!bash -c 'nr=`git branch --no-color --no-merged | egrep -v \"[ ]*bb.\" | wc -l`; echo $nr;' --"
        nr-changed-files = "!bash -c 'nr=`git diff --name-only | wc -l`; echo $nr;' --"
        nr-changed-files-cached = "!bash -c 'nr=`git diff --name-only --cached | wc -l`; echo $nr;' --"
        nr-worktrees = "!bash -c 'nr=`git worktree list | wc -l`; echo $nr;' --"

        nr-unpushed-commits = "!bash -c ' \
          nr=0; \
          has_upstream=`git has-upstream`; \
          if [[ \"$has_upstream\" == \"1\" ]]; then \
            nr=`git log --no-color @{push}.. --oneline | wc -l`; \
          fi; \
          echo $nr; \
          ' --"
        nr-unpushed-files = "!bash -c ' \
          nr=0; \
          has_upstream=`git has-upstream`; \
          if [[ \"$has_upstream\" == \"1\" ]]; then \
            nr=`git diff --no-color --stat @{u}..@ | grep \"|\" | wc -l`; \
          fi; \
          echo $nr; \
          ' --"

        # ---------------------------

        # ---------------------------
        # e.g. for bash integration add the following at the end of your ~/.bashrc
        # txtblu='\[\e[0;34m\]' # Blue
        # txtgrn='\[\e[0;32m\]' # Green
        # txtpur='\[\e[0;35m\]' # Purple
        # txtblk='\[\e[0;30m\]' # Black - Regular
        # git_prompt() {
        #   git prompt | sed -e "s/^\(.*\)$/ [ GIT: \1 ]/"
        # }
        # PS1="$txtblu \u@\h: $txtgrn\w$txtpur\$(git_prompt)$txtblk $ $txtblk"
        # unset color_prompt force_color_prompt
        #
        prompt = "!bash -c ' \
           is_in_git_repo=`git rev-parse --is-inside-work-tree 2> /dev/null`; \
           if [ \"$is_in_git_repo\" == \"true\" ]; then \
             is_empty_git_repo=`git rev-list -n 1 --all`; \
             if [ \"$is_empty_git_repo\" != \"\" ]; then \
               nr_stashes=`git nr-stashes`; \
               nr_branches=`git nr-branches`; \
               nr_branches_not_merged=`git nr-branches-not-merged`; \
               nr_worktrees=`git nr-worktrees`; \
               nr_changed_files=`git nr-changed-files`; \
               nr_changed_files_cached=`git nr-changed-files-cached`; \
               nr_unpushed_commits=`git nr-unpushed-commits`; \
               nr_unpushed_files=`git nr-unpushed-files`; \
               branch_name=`git rev-parse --abbrev-ref HEAD`; \
               echo \"${branch_name}: W${nr_worktrees} B${nr_branches}/${nr_branches_not_merged} S${nr_stashes} C${nr_changed_files}/${nr_changed_files_cached}/${nr_unpushed_files}_${nr_unpushed_commits}\"; \
             else \
               echo \"\"; \
             fi \
           else \
             echo \"\"; \
           fi;' --"

        # ---------------------------
        # config
        config-list = "config --list"
        config-list-origin = "config --list --show-origin"
        config-list-scope = "config --list --show-scope"
        config-list-origin-scope = "config --list --show-origin --show-scope"

        # ---------------------------
        # aliases
        aliases = "!git config --list | grep alias | sort"
        aliases-names = "!git config --list | grep alias | sed 's,\\., ,g' | sed 's,\\=, ,g' | awk '{print $2}' | sort"
        a = "aliases"
        al = "aliases-names"

        # ---------------------------
        # changelog
        changelog = "shortlog"

        # ---------------------------
        worktree-list = "worktree list"
        wl = "worktree-list"

        worktree-add = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_worktree_add.sh \"$@\"' --"
        wa = "worktree-add"

        # echo -n could be used below for direct "git wg <worktreename> | cd"  => still does not work in shell ???! => gave up
        worktree-branch-get-path = "!bash -c ' \
           branch_name=$1; \
           worktree_path=`git worktree list | grep \"\\[$branch_name\\]\" | git awk1`; \
           echo \"$worktree_path\"; \
           ' --"
        wg = "worktree-branch-get-path"

        worktree-get-branch = "!bash -c ' \
           worktree_name=$1; \
           worktree_path=`git worktree list | grep \"$worktree_name \" | git awk-1 | sed \"s,\\[,,g\" | sed \"s,\\],,g\"`; \
           echo \"$worktree_path\"; \
           ' --"
        wgb = "worktree-get-branch"

        worktree-delete = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_worktree_delete.sh \"$@\"' --"
        wd = "worktree-delete"

        worktree-branch-get-path-git-dir = "!bash -c ' \
           branch_name=$1; \
           worktree_path=`git wg $branch_name`; \
           if [ -f $worktree_path/.git ]; then \
             worktree_git_dir=`cat $worktree_path/.git | grep \"^gitdir: \" | git awk2`; \
             echo \"$worktree_git_dir\"; \
           else \
             echo \"$worktree_path/.git\"; \
           fi; \
           ' --"
        wggd = "worktree-branch_get-path-git-dir"

        stw = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_stw.sh -- \"$@\"' --"
        wst = "stw"


        # --------------------------
        # branch
        branch-backup = "!bash -c '\
          branch_title=$1; \
          if [ -z $branch_title ]; then \
            branch_title=\"untitled\"; \
          fi; \
          datetime=$2; \
          if [ -z $datetime ]; then \
            datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
          fi; \
          message=$3; \
          if [ -z $message ]; then \
            message=\"Local changes for backup branch\"; \
          fi; \
          branch_current=`git branch --show-current`; \
          branch_backup=\"bb.$branch_current.$branch_title.$datetime\"; \
          if [[ $branch_backup =~ \\.\\. ]]; then \
            echo \"ERROR: unexpected <..> in branch name <$branch_backup>\"; \
            exit -1; \
          else \
            if [[ `git any-local-changes` == "1" ]]; then \
               git stash; \
               git checkout -b $branch_backup; \
               git stash apply; \
               git commit -a -m \"$message\"; \
               git checkout $branch_current; \
               git stash pop; \
            else \
               git branch $branch_backup; \
            fi; \
          fi' --"
        bb = "branch-backup"

        # --------------------------
        # tags
        tag-add = "!bash -c ' \
           tag=$1; \
           commit_or_message_option=$2; \
           message_or_message_option=$3; \
           message=$4; \
           if [[ \"$#\" == \"1\" ]]; then \
             git tag -a $tag; \
           elif [[ \"$#\" == \"2\" ]]; then \
             git tag -a $tag $commit; \
           elif [[ \"$#\" == \"3\" && "$commit_or_message_option" == "-m" ]]; then \
             git tag -a $tag -m \"$message_or_message_option\"; \
           elif [[ \"$#\" == \"4\" && "$message_or_message_option" == "-m" ]]; then \
             git tag -a $tag $commit_or_message_option -m \"$message\"; \
           else \
             echo \"ERROR: Unexpected number of parameters, expected is {<tag_to_add>} or {<tag_to_add> <commit-ish>} or {<tag_to_add> -m <message>} or {<tag_to_add> <commit-ish> -m <message>}\"; \
             exit -1; \
           fi; \
           ' --"
        ta = "tag-add"

        tag-delete-local = "!bash -c ' \
           tag=$1; \
           if [[ \"$#\" == \"1\" ]]; then \
             git tag -d $tag; \
           else \
             echo \"ERROR: Unexpected number of parameters, expected is {<tag_to_delete>}\"; \
             exit -1; \
           fi; \
           ' --"
        tdl = "tag-delete-local"

        tag-delete-remote = "!bash -c ' \
           tag=$1; \
           remote=$2; \
           if [[ \"$#\" == \"2\" ]]; then \
             git push --delete $remote $tag; \
           else \
             echo \"ERROR: Unexpected number of parameters, expected is {<tag> <remote>}\"; \
             exit -1; \
           fi; \
           ' --"
        tdr = "tag-delete-remote"

        tag-delete-all = "!bash -c ' \
           tag=$1; \
           remote=$2; \
           if [[ \"$#\" == \"1\" ]]; then \
             git tag-delete-local $tag; \
           elif [[ \"$#\" == \"2\" ]]; then \
             git tag-delete-local $tag; \
             git tag-delete-remote $tag $remote; \
           else \
             echo \"ERROR: Unexpected number of parameters, expected is {<tag>} or {<tag> <remote>}\"; \
             exit -1; \
           fi; \
           ' --"
        tda = "tag-delete-all"
        td = "tag-delete-all"

        tag-move = "!bash -c ' \
           tag_name_old=$1; \
           tag_name_new=$2; \
           if [[ \"$#\" == \"2\" ]]; then \
             git tag $tag_name_new $tag_name_old; \
             git tag -d $tag_name_old; \
           else \
             echo \"ERROR: Unexpected number of parameters, expected is {<tag_old_name> <tag_new_name>}\"; \
             exit -1; \
           fi; \
           ' --"
        tm = "tag-move"

        tag-list-local = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_tag_list.sh -l \"$@\"' --"
        tll = "tag-list-local"

        tag-list-remote = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_tag_list.sh -r -a \"$@\"' --"
        tlr = "tag-list-remote"

        tag-list-remote-all = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_tag_list.sh -R \"$@\"' --"
        tlra = "tag-list-remote-all"

        tag-list-all = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_tag_list.sh -a -R \"$@\"' --"
        tla = "tag-list-all"

        tag-list = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_tag_list.sh -r -l \"$@\"' --"
        tl = "tag-list"

        tag-push-remote = "!bash -c ' \
           tag=$1; \
           remote=$2; \
           if [[ \"$#\" == \"2\" ]]; then \
             git push $remote tag $tag; \
           else \
             echo \"ERROR: Unexpected number of parameters, expected is {<tag> <remote>}\"; \
             exit -1; \
           fi; \
           ' --"
        tpr = "tag-push-remote"
        tp = "tag-push-remote"

        # --------------------------
        history = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_history.sh \"$@\"' --"
        h = "history"

