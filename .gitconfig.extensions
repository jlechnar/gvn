# Description: GVN - Git sVN - git configuration and more for easier usage of git-svn, test suite
# Author:      jlechnar
# Licence:     GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
# Source:      https://github.com/jlechnar/gvn

[alias]
        # --------------------------
	# log 

        logl = "log --graph --abbrev=9 --abbrev-commit --decorate --date=format-local:'%Y-%m-%d %H:%M:%S' --format=format:'%C(03)%>|(16)%h%C(reset) %C(bold green)%<(19,trunc)%ad%C(reset) %C(dim blue)%<(16,trunc)%an%C(reset) %C(black)%s%C(reset) %C(bold magenta)%d%C(reset)'"
	# below is with \n at end !
        logl-with-lf-after-commit-message = "log --graph --abbrev=9 --abbrev-commit --decorate --date=format-local:'%Y-%m-%d %H:%M:%S' --format=format:'%C(03)%>|(16)%h%C(reset) %C(bold green)%<(19,trunc)%ad%C(reset) %C(dim blue)%<(16,trunc)%an%C(reset) %C(black)%s%C(reset) %C(bold magenta)%d%C(reset)\n'"

        logll = "log --graph --abbrev=9 --abbrev-commit --decorate --date=format-local:'%Y-%m-%d %H:%M:%S' --format=format:'%C(03)%>|(16)%h%C(reset) %C(bold green)%<(19,trunc)%ad%C(reset) %C(dim blue)%<(16,trunc)%an%C(reset) %C(black)%s%C(reset) %C(bold magenta)%d%C(reset)\n\n%C(white)%b%C(reset)'"
	# below is with \n at end !
        logll-with-lf-after-commit-message = "log --graph --abbrev=9 --abbrev-commit --decorate --date=format-local:'%Y-%m-%d %H:%M:%S' --format=format:'%C(03)%>|(16)%h%C(reset) %C(bold green)%<(19,trunc)%ad%C(reset) %C(dim blue)%<(16,trunc)%an%C(reset) %C(black)%s%C(reset) %C(bold magenta)%d%C(reset)\n\n%C(white)%b%C(reset)\n'"


	# -----------
        # base
        lb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager log \"$@\"; echo \"\"' --"
        l  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager log \"$@\" | less -R' --"

        lbf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager log --name-status \"$@\"; echo \"\"' --"
        lf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager log --name-status \"$@\" | less -R' --"

        labf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager log --all --name-status \"$@\"; echo \"\"' --"
        laf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager log --all --name-status \"$@\" | less -R' --"

        # -----------
        # actual
        lgb = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logl \"$@\"; echo \"\"' --"
        lg  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logl \"$@\" | less -R' --"

        lgbf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logl-with-lf-after-commit-message --name-status \"$@\"; echo \"\"' --"
        lgf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logl-with-lf-after-commit-message --name-status \"$@\" | less -R' --"

        lgbl = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logll-with-lf-after-commit-message \"$@\"; echo \"\"' --"
        lgl  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logll-with-lf-after-commit-message \"$@\" | less -R' --"

        lgblf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logll-with-lf-after-commit-message --name-status \"$@\"; echo \"\"' --"
        lglf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logll-with-lf-after-commit-message --name-status \"$@\" | less -R' --"
        lgfl = "lglf"

        # -----------
        # all
        lgab = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logl --all \"$@\"; echo \"\"' --"
        lga  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logl --all \"$@\" | less -R' --"

        lgabf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logl-with-lf-after-commit-message --all --name-status \"$@\"; echo \"\"' --"
        lgaf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logl-with-lf-after-commit-message --all --name-status \"$@\"; less -R' --"

        lgabl = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logll-with-lf-after-commit-message --all \"$@\"; echo \"\"' --"
        lgal  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logll-with-lf-after-commit-message --all \"$@\" | less -R' --"

        lgablf = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logll-with-lf-after-commit-message --all --name-status \"$@\"; echo \"\"' --"
        lgalf  = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git --no-pager logll-with-lf-after-commit-message --all --name-status \"$@\"; less -R' --"
        lgafl = "lgalf"

        # -----------
        logls = "log --graph --abbrev=9 --abbrev-commit --decorate --date=format-local:'%Y-%m-%d %H:%M:%S' --format=format:'%C(03)%>|(16)%h%C(reset) <hash>%H</hash> %C(bold green)%<(19,trunc)%ad%C(reset) %C(dim blue)%<(16,trunc)%an%C(reset) %C(black)%s%C(reset) %C(bold magenta)%d%C(reset)'"
        logls-with-lf-after-commit-message = "log --graph --abbrev=9 --abbrev-commit --decorate --date=format-local:'%Y-%m-%d %H:%M:%S' --format=format:'%C(03)%>|(16)%h%C(reset) <hash>%H</hash> %C(bold green)%<(19,trunc)%ad%C(reset) %C(dim blue)%<(16,trunc)%an%C(reset) %C(black)%s%C(reset) %C(bold magenta)%d%C(reset)\n'"

        loglls = "log --graph --abbrev=9 --abbrev-commit --decorate --date=format-local:'%Y-%m-%d %H:%M:%S' --format=format:'%C(03)%>|(16)%h%C(reset) <hash>%H</hash> %C(bold green)%<(19,trunc)%ad%C(reset) %C(dim blue)%<(16,trunc)%an%C(reset) %C(black)%s%C(reset) %C(bold magenta)%d%C(reset)\n\n%C(white)%b%C(reset)'"
        loglls-with-lf-after-commit-message = "log --graph --abbrev=9 --abbrev-commit --decorate --date=format-local:'%Y-%m-%d %H:%M:%S' --format=format:'%C(03)%>|(16)%h%C(reset) <hash>%H</hash> %C(bold green)%<(19,trunc)%ad%C(reset) %C(dim blue)%<(16,trunc)%an%C(reset) %C(black)%s%C(reset) %C(bold magenta)%d%C(reset)\n\n%C(white)%b%C(reset)\n'"

        # log with diff of file
        logd = "log --all --follow -p --"

        # --------------------------
	# root
        # below does not always work properly in subfolders in worktrees hence replaced with below implementation
        #root = "rev-parse --show-toplevel"
        root = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                 current_dir=`pwd | sed 's,/$,,g'`; \
                 prefix=`echo $GIT_PREFIX | sed 's,/$,,g'`; \
                 root_dir=`echo $current_dir | sed \"s,/$prefix$,,\"`; \
                 echo $root_dir' --"
 
        # --------------------------
	# merge

	mdf = "!f(){ git show :1:$1 > $1.BASE; git show :2:$1 > $1.OURS; git show :3:$1 > $1.THEIRS; };f"
	md = "!f(){ a='================================================================================'; echo \"$a\n$a\nBASE\n$a\"; git diff -1 $1; echo \"$a\n\n$a\nOURS\n$a\"; git diff -2 $1; echo \"$a\n\n$a\nTHEIRS\n$a\"; git diff -3 $1; echo $a; };f"
	mdd = "dd HEAD..REBASE_HEAD"
	m = "mergetool"

        merge-wrapper="!bash -c '\
          branch_to_merge_to=$1; \
          if [ `git rev-parse --verify $branch_to_merge_to 2>/dev/null` ]; then \
            branch_to_merge=`git rev-parse --abbrev-ref HEAD`; \
            head_branch_to_merge=`git rev-parse HEAD`; \
            head_branch_to_merge_to=`git rev-parse $branch_to_merge_to`; \
            if [[ \"$head_branch_to_merge\" != \"$head_branch_to_merge_to\" ]]; then \
              datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
              git tag -a git_merge_${datetime}_${branch_to_merge}_${head_branch_to_merge}_to_${branch_to_merge_to}_${head_branch_to_merge_to} -m \"git merge tag $datetime (git ${branch_to_merge} ${head_branch_to_merge} to ${branch_to_merge_to} ${head_branch_to_merge_to})\"; \
              echo \"Created Tag for git merge: git_merge_${datetime}_${branch_to_merge}_${head_branch_to_merge}_to_${branch_to_merge_to}_${head_branch_to_merge_to}\"; \
            fi; \
            git merge $@; \
          else \
            git merge $@; \
          fi' --"

        # -------
	currentbranch = "rev-parse --abbrev-ref HEAD"
        branch-current = "branch --show-current"

        # -------
	awk1 = "!awk '{print $1}'"
	awk2 = "!awk '{print $2}'"
	awk3 = "!awk '{print $3}'"
	awk-1 = "!rev | awk '{print $1}' | rev"

        # -------
	check-for-unexpected-local-changes = "!bash -c '\
		changes=`git status --short | grep -v \"??\"`; \
		if [[ \"$changes\" != \"\" ]]; then \
		  git status -uno; \
  		  echo \"ERROR: There are uncommited changes. Aborting operation.\"; \
  		  exit -1; \
		fi' --"

	stash-local-changes-if-any = "!bash -c '\
		changes=`git status --short | grep -v \"??\"`; \
		if [[ \"$changes\" != \"\" ]]; then \
                  echo "INFO: Detected local changes. Automatic stashing them for later restore."; \
  		  git stash; \
                  echo "1"; \
		fi' --"

	any-local-changes = "!bash -c '\
		changes=`git status --short | grep -v \"??\"`; \
		if [[ \"$changes\" != \"\" ]]; then \
                  echo 1; \
		else \
		  echo 0; \
		fi' --"

       get-dot-git-path = "!bash -c '\
          dot_git_path=`git rev-parse --git-dir | sed \"s,/\\.git/,/\\.git /,g\" | git awk1`; \
          echo \"$dot_git_path\" \
          ' --"

        # --------------------------
        # diff
        d = "diff"
        diffc = "diff --cached"
        dc = "diffc"

        diff-wordwise = "diff -w -U0 --word-diff-regex=[^[:space:]] --word-diff=color"
        diffw = "diff-wordwise"
        dw = "diff-wordwise"
        dwc = "diff-wordwise --cached"
        dwnc = "diff-wordwise --no-color"
        dwcnc = "diff-wordwise --no-color --cached"

        diffw2 = "diff --ignore-all-space --ignore-blank-lines --ignore-space-change"
        dw2 = "diffw2"

        # ----------------------------
        # diff/difftool files
        # NOTE: diff-files already used in base function
        diff-two-files = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                set -x; \
                if [[ \"$#\" == \"4\" ]]; then \
                  git diff $1:$2 $3:$4; \
                elif [[ \"$#\" == \"2\" ]]; then \
                  git diff $1 $2; \
                else \
                  echo \"ERROR: options missing - check parameters git diff-two-files {<rev1>} <file1> {<rev2>} <file2> or git diff-two-files <file1> <file2>\"; \
                  exit -1; \
                fi' --"
        df = "diff-two-files"

        diff-two-files-wordwise = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                if [[ \"$#\" == \"4\" ]]; then \
                  git diff-wordwise $1:$2 $3:$4; \
                elif [[ \"$#\" == \"2\" ]]; then \
                  git diff-wordwise $1 $2; \
                else \
                  echo \"ERROR: options missing - check parameters git diff-two-files-wordwise {<rev1>} <file1> {<rev2>} <file2> or git diff-two-files-wordwise <file1> <file2>\"; \
                  exit -1; \
                fi' --"
        dfw = "diff-two-files-wordwise"

        difftool-two-files = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                if [[ \"$#\" == \"4\" ]]; then \
                  git difftool $1:$2 $3:$4; \
                elif [[ \"$#\" == \"2\" ]]; then \
                  git difftool $1 $2; \
                else \
                  echo \"ERROR: options missing - check parameters git difftool-files {<rev1>} <file1> {<rev2>} <file2> or git difftool-files <file1> <file2>\"; \
                  exit -1; \
                fi' --"
        dtf = "difftool-two-files"

        # --------------------------
        # diff not indexed files
        # usage: git nidw <file1> <file2>
        nidiff = "diff --no-index"
        nid = "nidiff"
        nidnc = "nidiff --no-color"
        nidiffw = "diff -w -U0 --word-diff-regex=[^[:space:]] --no-index"
        nidw = "nidiffw"
        nidwnc = "nidiffw --no-color"

        nidiffw2 = "diff --ignore-all-space --ignore-blank-lines --ignore-space-change --no-index"
        nidw2 = "nidiffw2"

        # --------------------------
        diffall = "log --follow -p --"
        da = "diffall"

        diffallword = "log --follow -p -w -U0 --word-diff-regex=[^[:space:]] --"
        daw = "diffallword"

        # --------------------------
        # difftool -d = dtd - directory difftool

        dtd  = "difftool -d"
	dtdc = "difftool -d --cached"
	# version change
	dtdv = "!f(){ git difftool -d \"$1\"^..\"$1\"; };f"

        # --------------------------
	# difftool

        dt = "difftool"
        dtc = "difftool --cached"

        # --------------------------
	# diff prev

	diff-prev = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; prev_hash=`git log --no-color --format=format:%h \"$@\" | head -n 1`; git diff $prev_hash^ \"$@\"' --"
        diffp = "diff-prev"
        dp = "diff-prev"

	diff-prev-wordwise = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; prev_hash=`git log --no-color --format=format:%h \"$@\" | head -n 1`; git diff-wordwise $prev_hash^ \"$@\"' --"
        dpw = "diff-prev-wordwise"

	difftool-prev = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; prev_hash=`git log --no-color --format=format:%h \"$@\" | head -n 1`; git difftool $prev_hash^ \"$@\"' --"
        dtp = "difftool-prev"

        difftool-dir-prev = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; prev_hash=`git log --no-color --format=format:%h \"$@\" | head -n 1`; git difftool -d $prev_hash^ \"$@\"' --"
        dtdp = "difftool-dir-prev"


        # --------------------------
        # cat files of revision
        cat = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; \
                if [[ \"$1\" == \"\" ]]; then \
                  echo \"ERROR: options missing - check parameters git cat {<rev>} <file>\"; \
                  exit -1; \
                elif [[ \"$2\" == \"\" ]]; then \
                  git show HEAD:$1; \
                elif [[ \"$3\" != \"\" ]]; then \
                  echo \"ERROR: too many options - check parameters git cat {<rev>} <file>\"; \
                  exit -1; \
                else \
                  git show $1:$2; \
                fi' --"


        # link gvn/bin/git.sh to e.g. ~/bin/git.sh and add following alias to your shell (e.g. bash), this will wrap git rebase to add a tag when starting a rebase to a branch
        # alias git="~/bin/git.sh"

        # create tag on rebase if branch exists else let rebase error out
        rebase-wrapper="!bash -c '\
          branch_to_rebase_to=$1; \
          if [ `git rev-parse --verify $branch_to_rebase_to 2>/dev/null` ]; then \
            branch_to_rebase=`git rev-parse --abbrev-ref HEAD`; \
            head_branch_to_rebase=`git rev-parse HEAD`; \
            head_branch_to_rebase_to=`git rev-parse $branch_to_rebase_to`; \
            if [[ \"$head_branch_to_rebase\" != \"$head_branch_to_rebase_to\" ]]; then \
              datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
              git tag -a git_rebase_${datetime}_${branch_to_rebase}_${head_branch_to_rebase}_to_${branch_to_rebase_to}_${head_branch_to_rebase_to} -m \"git rebase tag $datetime (git ${branch_to_rebase} ${head_branch_to_rebase} to ${branch_to_rebase_to} ${head_branch_to_rebase_to})\"; \
              echo \"Created Tag for git rebase: git_rebase_${datetime}_${branch_to_rebase}_${head_branch_to_rebase}_to_${branch_to_rebase_to}_${head_branch_to_rebase_to}\"; \
            fi; \
            git rebase $@; \
          else \
            git rebase $@; \
          fi' --"


        # --------------------------
        # list files

        ls = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_ls.sh \"$@\" #' --"

        lsa = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_lsa.sh \"$@\" #' --"

        # list files sorted by sizes
        ll = "!f(){ git ls-tree -r -t -l --full-name HEAD | sort -n -k 4; };f"

        # --------------------------
	# misc

	stat = "status -s"

	logv = "log --name-status"
	lv = "logv"
	log-files = "log -f"

	cpc = "cherry-pick"
	cp = "cherry-pick -n"
	dt = "difftool"

	status-uno = "status -uno"
	stat = "status-uno"
	st = "status-uno"
        sta = "status"
        stai = "status --ignored"

	co = "commit"

        add-updated = "add -u"
	addu = "add-updated"

	alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"


        # --------------------------
	# rebase
        rbi = "rebase -i"
        rbc = "rebase -continue"

        # --------------------------
	# adding
        add-interactive = "add -i"
        ai = "add-interactive"
        #
        add-updated = "add -u"
        au = "add-updated"

        # --------------------------
	# restoring
        restore-staged = "restore --staged"
        rs = "restore-staged"
        restore-staged-all = "restore --staged :/"
        rsa = "restore-staged-all"

        # --------------------------
        # remove r
        rm-cached-recursive = "rm --cached -r"
        rmcr = "rm-cached-recursive"
        # rm-cached = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; git rm --cached \"$@\";' --"
        rm-cached = "rm --cached"
        rmr = "rm-cached"

        # --------------------------
        # restore
        restore = "checkout --"

        # --------------------------
	# stash

	s = "stash"
        # pop = apply + drop
	sp = "stash pop"
	sa = "stash apply"
	sdrop = "stash drop"
	sl = "stash list"
        #
        #stash-diff = "!bash -c 'set -e; if [ -z ${1+x} ]; then id=\"0\"; else id=\"$1\"; fi; git stash show -p $id;' --"
        stash-diff = "!bash -c 'set -e; if [ -z ${1+x} ]; then id=\"0\"; else id=\"$1\"; fi; git diff \"stash@{$id}\"^ \"stash@{$id}\";' --"
        sd = "stash-diff"
        #
        stash-difftool = "!bash -c 'set -e; if [ -z ${1+x} ]; then id=\"0\"; else id=\"$1\"; fi; git difftool \"stash@{$id}\"^ \"stash@{$id}\";' --"
        sdt = "stash-difftool"
        #
        stash-difftool-dir = "!bash -c 'set -e; if [ -z ${1+x} ]; then id=\"0\"; else id=\"$1\"; fi; git difftool -d \"stash@{$id}\"^ \"stash@{$id}\";' --"
        sdtd = "stash-difftool-dir"


        # --------------------------
	# finding / greping

	grep-log = "!f(){ git log --all -i --grep=\"$1\"; };f"
	find-all = "!f(){ git log --all -i --grep=\"$1\"; git grep \"$1\"; };f"

        find = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_find.sh \"$@\" #' --"

        find-old = "!bash -c ' \
                BWD=`pwd`; \
                cd -- \"${GIT_PREFIX:-.}\"; \
                CWD=`pwd`; \
                if [[ \"$#\" == \"1\" ]]; then \
                  rp=`realpath --relative-to=${CWD} ${BWD}`; \
                  git ls $rp | egrep \"$1\"; \
                elif [[ \"$#\" == \"2\" ]]; then \
                  git ls \"$2\" | egrep \"$1\"; \
                else \
                  echo \"ERROR: options missing - check parameters git find <file_name> <folder> OR git find <file_name> to search in current folder recursively\"; \
                  exit -1; \
                fi' --"
        f = "find"

        g = "grep"
        grep-nc = "grep --no-color"
        grepnc ="grep-nc"
        gnc = "grep-nc"

        egrep = "grep -E"
        ge = "egrep"
        egrep-nc = "egrep --no-color"
        grepnc = "egrep-nc"
        genc = "egrep-nc"

        grep-all = "!bash -c 'cd -- \"${GIT_PREFIX:-.}\"; ~/bin/bin_gvn/git_grep_all.sh \"$@\" #' --"
        agrep = "grep-all"
        grepa = "grep-all"
        ga = "grep-all"
        grep-all-nc = "grep-all --no-color"
        ganc = "grep-all-nc"



        # ---------------------------
        # stats
        stats-unpushed = "!bash -c 'nr=`git diff --stat @{u}..@ | grep '|' | wc -l`; echo $nr;' --"

        unpushed-commits = "log @{push}.. --oneline"

        # ---------------------------
        # branch
        branch-merged-to-current = "git branch --merged"
        branch-not-merged-to-current = "git branch --no-merged"

        has-upstream ="!bash -c ' \
                git rev-parse @{u} &> /dev/null; \
		if [[ \"$?\" == \"0\" ]]; then \
		  echo 1; \
		else \
		  echo 0; \
		fi' --"

        nr-stashes = "!bash -c 'nr=`git stash list | wc -l`; echo $nr;' --"
        nr-branches = "!bash -c 'nr=`git branch --no-color | wc -l`; echo $nr;' --"
        nr-branches-not-merged = "!bash -c 'nr=`git branch --no-color --no-merged | wc -l`; echo $nr;' --"
        nr-changed-files = "!bash -c 'nr=`git diff --name-only | wc -l`; echo $nr;' --"
        nr-changed-files-cached = "!bash -c 'nr=`git diff --name-only --cached | wc -l`; echo $nr;' --"
        nr-worktrees = "!bash -c 'nr=`git worktree list | wc -l`; echo $nr;' --"

        nr-unpushed-commits = "!bash -c ' \
          nr=0; \
          has_upstream=`git has-upstream`; \
          if [[ \"$has_upstream\" == \"1\" ]]; then \
            nr=`git log --no-color @{push}.. --oneline | wc -l`; \
          fi; \
          echo $nr; \
          ' --"
        nr-unpushed-files = "!bash -c ' \
          nr=0; \
          has_upstream=`git has-upstream`; \
          if [[ \"$has_upstream\" == \"1\" ]]; then \
            nr=`git diff --no-color --stat @{u}..@ | grep \"|\" | wc -l`; \
          fi; \
          echo $nr; \
          ' --"

        # ---------------------------
        # e.g. for bash integration add the following at the end of your ~/.bashrc
        # txtblu='\[\e[0;34m\]' # Blue
        # txtgrn='\[\e[0;32m\]' # Green
        # txtpur='\[\e[0;35m\]' # Purple
        # txtblk='\[\e[0;30m\]' # Black - Regular
        # git_prompt() {
        #   git prompt | sed -e "s/^\(.*\)$/ [ GIT: \1 ]/"
        # }
        # PS1="$txtblu \u@\h: $txtgrn\w$txtpur\$(git_prompt)$txtblk $ $txtblk"
        # unset color_prompt force_color_prompt
        # 
        prompt = "!bash -c ' \
           is_in_git_repo=`git rev-parse --is-inside-work-tree 2> /dev/null`; \
           if [ \"$is_in_git_repo\" == \"true\" ]; then \
             is_empty_git_repo=`git rev-list -n 1 --all`; \
             if [ \"$is_empty_git_repo\" != \"\" ]; then \
               nr_stashes=`git nr-stashes`; \
               nr_branches=`git nr-branches`; \
               nr_branches_not_merged=`git nr-branches-not-merged`; \
               nr_worktrees=`git nr-worktrees`; \
               nr_changed_files=`git nr-changed-files`; \
               nr_changed_files_cached=`git nr-changed-files-cached`; \
               nr_unpushed_commits=`git nr-unpushed-commits`; \
               nr_unpushed_files=`git nr-unpushed-files`; \
               branch_name=`git rev-parse --abbrev-ref HEAD`; \
               echo \"${branch_name}: W${nr_worktrees} B${nr_branches}/${nr_branches_not_merged} S${nr_stashes} C${nr_changed_files}/${nr_changed_files_cached}/${nr_unpushed_files}_${nr_unpushed_commits}\"; \
             else \
               echo \"\"; \
             fi \
           else \
             echo \"\"; \
           fi;' --"
        
        # ---------------------------
        # config
        config-list = "config --list"
        config-list-origin = "config --list --show-origin"
        config-list-scope = "config --list --show-scope"
        config-list-origin-scope = "config --list --show-origin --show-scope"

        # ---------------------------
        # aliases
        aliases = "!git config --list | grep alias | sort"
        aliases-names = "!git config --list | grep alias | sed 's,\\., ,g' | sed 's,\\=, ,g' | awk '{print $2}' | sort"

        # ---------------------------
        # changelog
        changelog = "shortlog"

        # ---------------------------
        worktree-list = "worktree list"
        wl = "worktree-list"
        worktree-add = "!bash -c ' \
           worktree_name=$1; \
           shift; \
           main_path=`git rev-parse --path-format=absolute --show-toplevel`; \
           cd $main_path; cd ..; cwd=`pwd`; cd $main_path; \
           path=\"$cwd/$worktree_name\"; \
           git worktree add $path $@; \
           ' --"
        wa = "worktree-add"

        # echo -n could be used below for direct "git wg <worktreename> | cd"  => still does not work in shell ???! => gave up
        worktree-get-path = "!bash -c ' \
           worktree_name=$1; \
           worktree_path=`git worktree list | grep \"\\[$worktree_name\\]\" | git awk1`; \
           echo \"$worktree_path\"; \
           ' --"
        wg = "worktree-get-path"
        worktree-delete = "worktree delete"
        wd = "worktree-delete"


        # --------------------------
        # branch
        branch-backup = "!bash -c '\
          branch_title=$1; \
          if [ -z $branch_title ]; then \
            branch_title=\"untitled\"; \
          fi; \
          datetime=$2; \
          if [ -z $datetime ]; then \
            datetime=`date +'%Y_%m_%d-%H_%M_%S'`; \
          fi; \
          branch_current=`git branch --show-current`; \
          branch_backup=\"$branch_current.$branch_title.$datetime\"; \
          if [[ $branch_backup =~ \\.\\. ]]; then \
            echo \"ERROR: unexpected <..> in branch name <$branch_backup>\"; \
            exit -1; \
          else \
            if [[ `git any-local-changes` == "1" ]]; then \
               git stash; \
               git checkout -b $branch_backup; \
               git stash apply; \
               git commit -a -m \"Local changes for backup branch\"; \
               git checkout $branch_current; \
               git stash pop; \
            else \
               git branch $branch_backup; \
            fi; \
          fi' --"
        bb = "branch-backup"

